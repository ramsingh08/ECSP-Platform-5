<?xml version="1.0" encoding="UTF-8"?>
<calculated_attributes vi_bhs_platform_version="5" project_id="VI_BHS_Platform" iec_version_GEN="137" iec_version_RAW="36" iec_version_SAFE="33" file_version="%version: 24 %" file_date="%date_created: Friday, September 21, 2018 9:02:51 AM %">
  <calculated_attribute family="GEN" id="CA_iec_version" used_by="GEN" expression="=SUBSTITUTE(MID(&quot;%version: 137 %&quot;;11;LEN(&quot;%version: 137 %&quot;)-11);&quot; &quot;;&quot;&quot;)" comment="Return version information of this IEC (calculated attribute file). Version info is automaticly updated by Synergy" />
  <calculated_attribute family="GEN" id="CA_ASI_Address" used_by="CD1" expression="=IF(ISERROR(asi_slave_address_as_build); /* If as_build asi address is not available */&#xD;&#xA;	/* Then if highest other available as_build asi address is available */ &#xD;&#xA;	IF(NOT(ISERROR(MAX(parent(integration_level=&quot;area&quot;).next(AND(NOT(ISERROR(asi_slave_address_as_build));asi_slave_address_as_build&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address_as_build)));&#xD;&#xA;        /* Then if highest previous asi address is not available */&#xD;&#xA;	    IF(ISERROR(MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address));&#xD;&#xA;	        /* Then if highest as_build asi address is equal to max allowed */&#xD;&#xA;			IF(MAX(parent(integration_level=&quot;area&quot;).next(AND(NOT(ISERROR(asi_slave_address_as_build));asi_slave_address_as_build&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address_as_build)=CA_ASI_CFG_SlaveRangeEnd;&#xD;&#xA;			    /* Then error max asi address reached */&#xD;&#xA;				&quot;#ERROR_MAX_SLAVE_ADDRESS_REACHED&quot;;&#xD;&#xA;				/* Else new asi address becomes highest as_build asi address + 1 */&#xD;&#xA;				MAX(parent(integration_level=&quot;area&quot;).next(AND(NOT(ISERROR(asi_slave_address_as_build));asi_slave_address_as_build&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address_as_build)+1);&#xD;&#xA;		    /* Else if highest previous asi address is greater than highest as_build asi address */&#xD;&#xA;		    IF(MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address)&gt;MAX(parent(integration_level=&quot;area&quot;).next(AND(NOT(ISERROR(asi_slave_address_as_build));asi_slave_address_as_build&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address_as_build);&#xD;&#xA;		        /* Then if highest previous asi address is equal to max allowed */&#xD;&#xA;                IF(MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address)=CA_ASI_CFG_SlaveRangeEnd;&#xD;&#xA;			        /* Then error max asi address reached */&#xD;&#xA;				    &quot;#ERROR_MAX_SLAVE_ADDRESS_REACHED&quot;;&#xD;&#xA;				    /* Else new asi address becomes highest previous asi address + 1 */&#xD;&#xA;				    MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address)+1);&#xD;&#xA;			    /* Else if highest as_build asi address is equal to max allowed */&#xD;&#xA;                IF(MAX(parent(integration_level=&quot;area&quot;).next(AND(NOT(ISERROR(asi_slave_address_as_build));asi_slave_address_as_build&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address_as_build)=CA_ASI_CFG_SlaveRangeEnd;&#xD;&#xA;			        /* Then error max asi address reached */&#xD;&#xA;				    &quot;#ERROR_MAX_SLAVE_ADDRESS_REACHED&quot;;&#xD;&#xA;				    /* Else new asi address becomes highest as_build asi address + 1 */&#xD;&#xA;				    MAX(parent(integration_level=&quot;area&quot;).next(AND(NOT(ISERROR(asi_slave_address_as_build));asi_slave_address_as_build&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address_as_build)+1)));&#xD;&#xA;		/* Else if highest previous asi address is not available */ &#xD;&#xA;		IF(ISERROR(MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address));&#xD;&#xA;		    /* Then new asi address becomes 1 */&#xD;&#xA;			1;&#xD;&#xA;			/* Else if highest previous asi address is equal to max allowed */&#xD;&#xA;			IF(MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address)=CA_ASI_CFG_SlaveRangeEnd;&#xD;&#xA;			    /* Then error max asi address reached */&#xD;&#xA;				&quot;#ERROR_MAX_SLAVE_ADDRESS_REACHED&quot;;&#xD;&#xA;				/* Else new asi address becomes highest previous asi address + 1 */&#xD;&#xA;				MAX(prev(AND(NOT(ISERROR(asi_slave_address));asi_slave_address&lt;&gt;31;asi_channel=.asi_channel;start_address=.start_address)).;asi_slave_address)+1)));&#xD;&#xA;	/* Else new asi address becomes as_build asi address */&#xD;&#xA;	asi_slave_address_as_build)" comment="Formula to calculate the ASi slave address based on asi_channel and start_address information" />
  <calculated_attribute family="GEN" id="CA_ASI_CFG_SlaveRangeEnd" used_by="CD1" expression="30" comment="Number of the last allowed slave" />
  <calculated_attribute family="GEN" id="CA_ASI_CFG_SlaveRangeStart" used_by="CD1" expression="1" comment="Number of the first allowed slave" />
  <calculated_attribute family="GEN" id="CA_ASI_lcc_id" used_by="CLP" expression="=IFERROR(&#xD;&#xA;    .child(AND(element_name=&quot;addressing&quot;;LEFT(id;3)=&quot;ASI&quot;)).lcc_id;&#xD;&#xA;    IFERROR(&#xD;&#xA;        .lcc_id;&#xD;&#xA;        .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;4)=&quot;PN_P&quot;))).lcc_id&#xD;&#xA;    )&#xD;&#xA;)/* First try to find the lcc_id on &lt;addressing&gt;, if fails try to find the lcc_id on &lt;isc&gt;. If all fails, get the lcc_id from any &lt;addressing&gt; not being a ProfiNET node */" comment="Get lcc_id value from isc level(old) or addressing level(new), or any" />
  <calculated_attribute family="GEN" id="CA_ASI_lcc_id_power" used_by="CLP" expression="=IFERROR(&#xD;&#xA;    .child(AND(element_name=&quot;addressing&quot;;LEFT(id;3)=&quot;ASI&quot;)).lcc_id_power;&#xD;&#xA;    IFERROR(&#xD;&#xA;        .lcc_id_power;&#xD;&#xA;        .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;4)=&quot;PN_P&quot;))).lcc_id_power&#xD;&#xA;    )&#xD;&#xA;)/* First try to find the lcc_id on &lt;addressing&gt;, if fails try to find the lcc_id on &lt;isc&gt;. If all fails, get the lcc_id from any &lt;addressing&gt; not being a ProfiNET node */" comment="Get lcc_id_power value from isc level(old) or addressing level(new), or any" />
  <calculated_attribute family="GEN" id="CA_ASI_ProfinetStartAddress" used_by="CD1" expression="=IF(IFERROR(/* If lcc_id is an ASi repeater */&#xD;&#xA;    global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).child(element_name=&quot;addressing&quot;).lcc_id).CA_MCFV=&quot;LCC29&quot;;&#xD;&#xA;    global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).lcc_id).CA_MCFV=&quot;LCC29&quot;); &#xD;&#xA;    	IFERROR( /* Then take start address from Asi repeater */&#xD;&#xA;        	global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).child(element_name=&quot;addressing&quot;).lcc_id).child(element_name=&quot;addressing&quot;).start_address;&#xD;&#xA;    		global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).lcc_id).child(element_name=&quot;addressing&quot;).start_address);&#xD;&#xA;    	 IF(IFERROR(/* Check if child of an ASi gateway */&#xD;&#xA;        	 OR(.parent(integration_level&lt;&gt;&quot;element&quot;).CA_MCFV=&quot;LCC23&quot;;.parent(integration_level&lt;&gt;&quot;element&quot;).CA_MCFV=&quot;CCC16&quot;);&#xD;&#xA;             OR(.parent.CA_MCFV=&quot;LCC23&quot;;.parent.CA_MCFV=&quot;CCC16&quot;)); &#xD;&#xA; 			IFERROR(/* If child of a Asi gateway */&#xD;&#xA;         			.parent(integration_level&lt;&gt;&quot;element&quot;).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).start_address;&#xD;&#xA;         			.prev(element_name=&quot;addressing&quot;).start_address);&#xD;&#xA;         		IFERROR(/* Else take start address from Asi gateway */&#xD;&#xA;             		global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).child(element_name=&quot;addressing&quot;).lcc_id).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).start_address;&#xD;&#xA;             		global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).lcc_id).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).start_address)&#xD;&#xA;         	)&#xD;&#xA;&#xD;&#xA;     )" comment="Retrieve the start address of profinet subscribers on which this ASi slave is connected (used indirectly to calculate the symbolic address)." />
  <calculated_attribute family="GEN" id="CA_ASI_SlaveAddress" used_by="GEN" expression="=IF(ISERROR(asi_slave_address); /* IF 'calculated' attribute is not available */&#xD;&#xA;	&quot;#ERROR_slave_information_is_not_available&quot;; /* THEN no slave information is available */&#xD;&#xA;	IF(ISERROR(asi_slave_address_as_build); /* IF 'as build' attribute is not available */&#xD;&#xA;		asi_slave_address; /* THEN return the 'calculated' information */&#xD;&#xA;		IF(asi_slave_address_as_build=&quot;&quot;; /* IF 'as build' attribute is empty */&#xD;&#xA;    			asi_slave_address; /* THEN return the 'calculated' information */&#xD;&#xA;			asi_slave_address_as_build))) /* ELSE return the 'as build' information */" comment="ASi interface slave address, returns if present the 'as build ' information otherwise the 'calculated' information" />
  <calculated_attribute family="GEN" id="CA_ASI_SlaveError" used_by="CLP" expression="=&quot;&quot;&quot;DB_Diagnose_ASI_PF&quot;&quot;.Gateway_&quot;&amp; CA_ASI_Slave_ProfinetDeviceNumber &amp; &quot;_Channel_&quot;&amp; .child(element_name=&quot;addressing&quot;).asi_channel &amp; &quot;.Slave_Error[&quot; &amp; .child(element_name=&quot;addressing&quot;).CA_CFG_asi_slave_address &amp; &quot;]&quot;" comment="&quot;DB_Diagnose_ASI_PF&quot;.Gateway_xxx_Channel_x.Slave_Error[xx]" />
  <calculated_attribute family="GEN" id="CA_ASI_SlaveNotPresent" used_by="CLP" expression="=&quot;&quot;&quot;DB_Diagnose_ASI_PF&quot;&quot;.Gateway_&quot;&amp; CA_ASI_Slave_ProfinetDeviceNumber &amp; &quot;_Channel_&quot;&amp; .child(element_name=&quot;addressing&quot;).asi_channel &amp; &quot;.Slave_Not_Present[&quot; &amp; .child(element_name=&quot;addressing&quot;).CA_CFG_asi_slave_address &amp; &quot;]&quot;" comment="&quot;DB_Diagnose_ASI_PF&quot;.Gateway_xxx_Channel_x.Slave_Not_Present[xx]" />
  <calculated_attribute family="GEN" id="CA_ASI_Slave_ProfinetDeviceNumber" used_by="CLP" expression="=IF(IFERROR(/* If lcc_id is an ASi repeater */&#xD;&#xA;	    IF(IFERROR(integration_level&lt;&gt;&quot;element&quot;;FALSE);&#xD;&#xA;    		global_find(id=.child(element_name=&quot;addressing&quot;).lcc_id).CA_MCFV=&quot;LCC29&quot;;&#xD;&#xA;			global_find(id=.parent(integration_level&lt;&gt;&quot;element&quot;).child(element_name=&quot;addressing&quot;).lcc_id).CA_MCFV=&quot;LCC29&quot;);&#xD;&#xA;        IF(IFERROR(integration_level&lt;&gt;&quot;element&quot;;FALSE);	&#xD;&#xA;            parent(integration_level=&quot;area&quot;).next(id=.lcc_id).CA_MCFV=&quot;LCC29&quot;;&#xD;&#xA;            parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level&lt;&gt;&quot;element&quot;).lcc_id).CA_MCFV=&quot;LCC29&quot;)); &#xD;&#xA;    IFERROR( /* Then take ProfiNET address from Asi repeater */&#xD;&#xA;        IFERROR(&#xD;&#xA;            parent(integration_level=&quot;area&quot;).next(AND(parent.CA_MCFV=&quot;FBM03&quot;;CA_CFG_start_address=parent(integration_level=&quot;area&quot;).next(AND(mark_code=&quot;LCC&quot;;id=.child(element_name=&quot;addressing&quot;).lcc_id)).child(element_name=&quot;addressing&quot;).CA_CFG_start_address)).CA_CFG_profinet_device_number;&#xD;&#xA;        	parent(integration_level=&quot;area&quot;).next(AND(parent.CA_MCFV=&quot;FBM03&quot;;CA_CFG_start_address=parent(integration_level=&quot;area&quot;).next(AND(mark_code=&quot;LCC&quot;;id=.lcc_id)).child(element_name=&quot;addressing&quot;).CA_CFG_start_address)).CA_CFG_profinet_device_number);&#xD;&#xA;        IFERROR(&#xD;&#xA;            parent(integration_level=&quot;area&quot;).next(AND(parent.CA_MCFV=&quot;FBM03&quot;;CA_CFG_start_address=parent(integration_level=&quot;area&quot;).next(AND(mark_code=&quot;LCC&quot;;id=.parent(integration_level&lt;&gt;&quot;element&quot;).child(element_name=&quot;addressing&quot;).lcc_id)).child(element_name=&quot;addressing&quot;).CA_CFG_start_address)).CA_CFG_profinet_device_number;&#xD;&#xA;            parent(integration_level=&quot;area&quot;).next(AND(parent.CA_MCFV=&quot;FBM03&quot;;CA_CFG_start_address=parent(integration_level=&quot;area&quot;).next(AND(mark_code=&quot;LCC&quot;;id=.parent(integration_level&lt;&gt;&quot;element&quot;).lcc_id)).child(element_name=&quot;addressing&quot;).CA_CFG_start_address)).CA_CFG_profinet_device_number));&#xD;&#xA; 	IF(IFERROR(/* If lcc_id is an ASi gateway */&#xD;&#xA;     	.parent(integration_level&lt;&gt;&quot;element&quot;).CA_MCFV=&quot;LCC23&quot;;&#xD;&#xA;         .parent.CA_MCFV=&quot;LCC23&quot;); &#xD;&#xA;     	IFERROR(/* Else take ProfiNET address from Asi gateway */&#xD;&#xA;         		.parent(integration_level&lt;&gt;&quot;element&quot;).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number;&#xD;&#xA;         		.prev(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number);&#xD;&#xA;        IFERROR(/* Else take ProfiNET address from Asi gateway */&#xD;&#xA;             IF(IFERROR(integration_level&lt;&gt;&quot;element&quot;;FALSE);&#xD;&#xA;             	global_find(AND(mark_code=&quot;LCC&quot;;id=.child(element_name=&quot;addressing&quot;).lcc_id)).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number;&#xD;&#xA;             	global_find(AND(mark_code=&quot;LCC&quot;;id=.parent(integration_level&lt;&gt;&quot;element&quot;).child(element_name=&quot;addressing&quot;).lcc_id)).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number);&#xD;&#xA;               IF(IFERROR(integration_level&lt;&gt;&quot;element&quot;;FALSE);       &#xD;&#xA;                 global_find(AND(mark_code=&quot;LCC&quot;;id=.lcc_id)).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number;&#xD;&#xA;                 global_find(AND(mark_code=&quot;LCC&quot;;id=.parent(integration_level&lt;&gt;&quot;element&quot;).lcc_id)).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number))&#xD;&#xA;         	)&#xD;&#xA;&#xD;&#xA;     )" comment="Retrieve the profinet device number rom the LCC where the section is connected" />
  <calculated_attribute family="GEN" id="CA_CFG_asi_slave_address" used_by="GEN" expression="=IFERROR(asi_slave_address_as_build;asi_slave_address)" comment="attribute asi_slave_address: asi_slave_address is over ruled by asi_slave_address_as_build if present" />
  <calculated_attribute family="GEN" id="CA_CFG_Delimiter_FUNCTION_ABBREVIATION" used_by="GEN" expression="|" comment="Character which is used to delimit the function_abbreviation attribute" />
  <calculated_attribute family="GEN" id="CA_CFG_Delimiter_ID" used_by="GEN" expression="." comment="Character which is used to delimit the id attribute" />
  <calculated_attribute family="GEN" id="CA_CFG_Delimiter_SYMBOL" used_by="GEN" expression="_" comment="Character which is used to delimit the id attribute" />
  <calculated_attribute family="GEN" id="CA_CFG_Gap_FWD" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_FWD_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_FWD_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_FWD_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_FWD_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_FWD_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_FWD_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))));&quot;#ERROR_Family_Not_Defined&quot;)" comment="Main formule for the calculation of the ECS-P gap of the section (be aware Forward adds the upstream)" />
  <calculated_attribute family="GEN" id="CA_CFG_Gap_REV" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_REV_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_REV_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_REV_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_REV_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_REV_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;    		CA_CFG_Gap_REV_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))));&quot;#ERROR_Family_Not_Defined&quot;)" comment="Main formule for the calculation of the ECS-P gap of the section (be aware Reverse adds the downstream)" />
  <calculated_attribute family="GEN" id="CA_CFG_MaxLength_SYMBOL" used_by="CD1" expression="24" comment="Maximum allowed length of a symbolic name within the PLC" />
  <calculated_attribute family="GEN" id="CA_CFG_LabelOffset_CADSYMBOL" used_by="GLP" expression="0.2" comment="Default label offset" />
  <calculated_attribute family="GEN" id="CA_CFG_LengthSection_FWD" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;    		CA_CFG_LengthSection_FWD_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_FWD_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_FWD_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_FWD_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_FWD_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_FWD_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))));&quot;#ERROR_Family_Not_Defined&quot;)" comment="Main formule for the calculation of the ECS-P length of the section" />
  <calculated_attribute family="GEN" id="CA_CFG_LengthSection_REV" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;    		CA_CFG_LengthSection_REV_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_REV_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_REV_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_REV_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_REV_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_CFG_LengthSection_REV_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))));&quot;#ERROR_Family_Not_Defined&quot;)" comment="Main formule for the calculation of the ECS-P length of the section" />
  <calculated_attribute family="GEN" id="CA_CFG_PN_IORangesEquipment_GEN" used_by="CD1" expression="=IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC01&quot;; &#xD;&#xA;	30; /* Number of bytes used for CCC01 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC02&quot;;&#xD;&#xA;	20; /* Number of bytes used for CCC02 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC03&quot;;&#xD;&#xA;	25; /* Number of bytes used for CCC03 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC05&quot;;&#xD;&#xA;	100; /* Number of bytes used for CCC05 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC06&quot;;&#xD;&#xA;	100; /* Number of bytes used for CCC06 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC07&quot;;&#xD;&#xA;	100; /* Number of bytes used for CCC07 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC08&quot;;&#xD;&#xA;	50; /* Number of bytes used for CCC08 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC09&quot;;&#xD;&#xA;	50; /* Number of bytes used for CCC09 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC10&quot;;&#xD;&#xA;	100; /* Number of bytes used for CCC10 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC16&quot;;&#xD;&#xA;	84; /* Number of bytes used for CCC16 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC17&quot;;&#xD;&#xA;	30; /* Number of bytes used for CCC17 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC01&quot;;&#xD;&#xA;	2; /* Number of bytes used for LCC01 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC02&quot;;&#xD;&#xA;	1; /* Number of bytes used for LCC02 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC10&quot;;&#xD;&#xA;	52; /* Number of bytes used for LCC10 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC11&quot;;&#xD;&#xA;	52; /* Number of bytes used for LCC11 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC12&quot;;&#xD;&#xA;	52; /* Number of bytes used for LCC12 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC13&quot;;&#xD;&#xA;	52; /* Number of bytes used for LCC13 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC22&quot;;&#xD;&#xA;	144; /* Number of bytes used for LCC22 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC23&quot;;&#xD;&#xA;	44; /* Number of bytes used for LCC23 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC42&quot;;&#xD;&#xA;	144; /* Number of bytes used for LCC42 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC65&quot;;&#xD;&#xA;	2; /* Number of bytes used for LCC65 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;OPS01&quot;;&#xD;&#xA;	150; /* Number of bytes used for OPS01 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;OPS02&quot;;&#xD;&#xA;	150; /* Number of bytes used for OPS02 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;OPS03&quot;;&#xD;&#xA;	150; /* Number of bytes used for OPS03 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;OPS04&quot;;&#xD;&#xA;	50; /* Number of bytes used for OPS04 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;OPS05&quot;;&#xD;&#xA;	150; /* Number of bytes used for OPS05 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;OPS06&quot;;&#xD;&#xA;	150; /* Number of bytes used for OPS06 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;HBO01&quot;;&#xD;&#xA;	320; /* Number of bytes used for HBO01 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;HBO10&quot;;&#xD;&#xA;	320; /* Number of bytes used for HBO01 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;HBO20&quot;;&#xD;&#xA;	320; /* Number of bytes used for HBO01 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).mark_code=&quot;BSO&quot;;&#xD;&#xA;	64; /* Number of bytes used for BSOxx (all function variants) as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).mark_code=&quot;CIO&quot;;&#xD;&#xA;	128; /* Number of bytes used for CIOxx (all function variants) as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).mark_code=&quot;WE&quot;;&#xD;&#xA;	8; /* Number of bytes used for WExx (all function variants) as offset for 'start_address' calculation */&#xD;&#xA;	&quot;#ERROR_No_IO_Range_Defined_for: &quot; &amp; global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV)))))))))))))))))))))))))))))))))" comment="Calculating the start address of profinet subscribers of family GEN" />
  <calculated_attribute family="GEN" id="CA_CFG_PN_MinDeviceNumber" used_by="CD1" expression="10" />
  <calculated_attribute family="GEN" id="CA_CFG_PN_MinSwitchNumber" used_by="CD1" expression="3" />
  <calculated_attribute family="GEN" id="CA_CFG_PN_MaxSwitchNumber" used_by="CD1" expression="8" />
  <calculated_attribute family="GEN" id="CA_CFG_PN_StartAddress" used_by="CD1" expression="0" />
  <calculated_attribute family="GEN" id="CA_CFG_profinet_device_number" used_by="GEN" expression="=IFERROR(profinet_device_number_as_build;profinet_device_number)" comment="attribute profinet_device_number: profinet_device_number is over ruled by profinet_device_number_as_build if present" />
  <calculated_attribute family="GEN" id="CA_CFG_profinet_routing_sequence" used_by="CD1" expression="=IF(OR(parent.CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(parent.CA_PROFINET_lcc_id));&#xD;&#xA;&quot;0&quot;;&#xD;&#xA;IF(OR(global_find(id=.parent.CA_PROFINET_lcc_id).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=.parent.CA_PROFINET_lcc_id).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;1&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;2&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;3&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;4&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;5&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;6&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;7&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;8&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;9&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;10&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;11&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;12&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;13&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;14&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;15&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;16&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;17&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;18&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;19&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;20&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;21&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;22&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;23&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;24&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;25&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;26&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;27&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;28&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;29&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;30&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;31&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;32&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;33&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;34&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;35&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;36&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;37&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;38&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;39&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;40&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;41&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;42&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;43&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;44&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;45&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;46&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;47&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;48&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;49&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;50&quot;;&#xD;&#xA;&quot;51&quot;)))))))))))))))))))))))))))))))))))))))))))))))))))" comment="Number of ProfiNET components till master cabinet is reached." />
  <calculated_attribute family="GEN" id="CA_CFG_profinet_switch_port_id" used_by="GEN" expression="=IFERROR(profinet_switch_port_id_as_build;profinet_switch_port_id)" comment="attribute profinet_switch_port_id: profinet_switch_port_id is over ruled by profinet_switch_port_id_as_build if present" />
  <calculated_attribute family="GEN" id="CA_CFG_Range_Snippet" used_by="CLP" expression="100" comment="Snippet group division" />
  <calculated_attribute family="GEN" id="CA_CFG_RunOutDistance_Speed1" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed1*speed1)/(2*deceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed1*speed1)/(2*deceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_RunOutDistance_Speed2" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed2*speed2)/(2*deceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed2*speed2)/(2*deceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_RunOutDistance_Speed3" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed3*speed3)/(2*deceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed3*speed3)/(2*deceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_RunOutDistance_Speed4" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed4*speed4)/(2*deceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed4*speed4)/(2*deceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_StartUpDistance_Speed1" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed1*speed1)/(2*acceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed1*speed1)/(2*acceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_StartUpDistance_Speed2" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed2*speed2)/(2*acceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed2*speed2)/(2*acceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_StartUpDistance_Speed3" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed3*speed3)/(2*acceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed3*speed3)/(2*acceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_StartUpDistance_Speed4" used_by="CLP" expression="=IFERROR(IF( parent(integration_level=&quot;section&quot;).family=&quot;RAW&quot;&#xD;&#xA;			;ROUNDUP(((speed4*speed4)/(2*acceleration))*100;0)&#xD;&#xA;			;CEILING(ROUNDUP(((speed4*speed4)/(2*acceleration))*100;0);5))&#xD;&#xA;    ;&quot;&quot;)" />
  <calculated_attribute family="GEN" id="CA_CFG_start_address" used_by="GEN" expression="=IFERROR(start_address_as_build;start_address)" comment="attribute start_address: start_address is over ruled by start_address_as_build if present" />
  <calculated_attribute family="GEN" id="CA_Component_Type_DB" used_by="CLP" expression="=IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; &quot;_Type_T&quot;;2;4)));&#xD;&#xA;	LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; &quot;_Type_T&quot;;2;4); /* TTT markcode specific */&#xD;&#xA;	IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; function &amp; &quot;_Type_T&quot;;2;4)));&#xD;&#xA;		LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; function &amp; &quot;_Type_T&quot;;2;4); /* TTT markcode and function variant specific */&#xD;&#xA;		IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; &quot;_Type&quot;;2;4)));&#xD;&#xA;			LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; &quot;_Type&quot;;2;4); /* GEN/RAW markcode specific */&#xD;&#xA;			IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; function &amp; &quot;_Type&quot;;2;4)));&#xD;&#xA;				LOOKUP(&quot;DB_&quot; &amp; mark_code &amp; function &amp; &quot;_Type&quot;;2;4); /* GEN/RAW markcode and function variant specific */&#xD;&#xA;				IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; function &amp; &quot;_Type_T&quot;;2;4))); &#xD;&#xA;					LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; function &amp; &quot;_Type_T&quot;;2;4); /* TTT transport/switch and function specific */&#xD;&#xA;					IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; function &amp; &quot;_Type&quot;;2;4))); &#xD;&#xA;						LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; function &amp; &quot;_Type&quot;;2;4); /* GEN/RAW transport/switch and function specific */&#xD;&#xA;						IF(NOT(ISERROR(LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_Type_T&quot;;2;4))); &#xD;&#xA;							LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_Type_T&quot;;2;4); /* TTT transport/switch sections */&#xD;&#xA;							LOOKUP(&quot;DB_&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_Type&quot;;2;4) /* GEN/RAW transport/switch sections */&#xD;&#xA;						)&#xD;&#xA;					)&#xD;&#xA;				)&#xD;&#xA;			)&#xD;&#xA;		)&#xD;&#xA;	)&#xD;&#xA;)" />
  <calculated_attribute family="GEN" id="CA_DB_Declaration" used_by="CLP" expression="=IF(integration_level=&quot;area&quot;;&#xD;&#xA;	&quot;&quot;;&#xD;&#xA;	IF(integration_level=&quot;zone&quot;;&#xD;&#xA;		mark_code &amp; &quot;_&quot; &amp; CA_ID_zz_ss;&#xD;&#xA;		IF(integration_level=&quot;section&quot;;&#xD;&#xA;			IFERROR(LEFT(.child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;3) &amp; &quot;_&quot; &amp; CA_ID_zz_ss;mark_code &amp; &quot;_&quot; &amp; CA_ID_zz_ss);&#xD;&#xA;			IF(integration_level=&quot;object&quot;;&#xD;&#xA;				IFERROR(LEFT(.child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;3) &amp; &quot;_&quot; &amp; CA_ID_zz_ss;mark_code &amp; &quot;_&quot; &amp; CA_ID_zz_ss);&#xD;&#xA;				IF(integration_level=&quot;element&quot;;&#xD;&#xA;					IFERROR(LEFT(parent(integration_level=&quot;section&quot;).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;3) &amp; &quot;_&quot; &amp; parent(integration_level=&quot;section&quot;).CA_ID_zz_ss;mark_code &amp; &quot;_&quot; &amp; CA_ID_zz_ss);&#xD;&#xA;					IF(integration_level=&quot;software&quot;;&#xD;&#xA;						RIGHT(mark_code;LEN(mark_code)-3) &amp; &quot;_&quot; &amp; CA_ID_zz_ss;&#xD;&#xA;						&quot;&quot;))))))" />
  <calculated_attribute family="GEN" id="CA_DB_PLT" used_by="CLP" expression="=IF(mark_code=&quot;HOO&quot;; /* Check if it concern an HOO */	&#xD;&#xA;	IF(NOT(ISERROR(prev(id=.child(element_name=&quot;cif&quot;).isc_id).id)); /* Check which side is applicable, sending or receiving */&#xD;&#xA;		&quot;&quot;&quot;DB_&quot; &amp; child(element_name=&quot;cif&quot;).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;; /* Connect to the section from the CIF, it concerns a sending side of the HOO */&#xD;&#xA;		&quot;&quot;&quot;DB_&quot; &amp; CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;); /* Connect to the HOO instead of the section, it concerns a receiving side of the HOO */&#xD;&#xA;	&quot;&quot;&quot;DB_&quot; &amp; CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;) /* Connect to the section */" comment="Generate the default name for the PLT datablock" />
  <calculated_attribute family="GEN" id="CA_DB_PLT_Downstream" used_by="CLP" expression="=IF(mark_code=&quot;HOO&quot;; /* Check if it concern an HOO */&#xD;&#xA;	IF(ISERROR(prev(id=.child(element_name=&quot;cif&quot;).isc_id).id); /* Check which side is applicable, sending or receiving */&#xD;&#xA;		&quot;&quot;&quot;DB_&quot; &amp; child(element_name=&quot;cif&quot;).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;; /* Connect to the section from the CIF, it concerns a receiving side of the HOO */&#xD;&#xA;		&quot;&quot;&quot;DB_&quot; &amp; CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;); /* Connect to the HOO instead of the section, it concerns a sending side of the HOO */&#xD;&#xA;	IF(ISERROR(next(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).id); /* Check if there is not an area transition applicable */&#xD;&#xA;		IF(NOT(ISERROR(child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).id)); /* Check if at least one downstream fif is available */&#xD;&#xA;			IF(COUNTIF(child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).;TRUE)&gt;1; /* Check if multiple downstream fif's are available */&#xD;&#xA;				&quot;&quot;&quot;DB_&quot; &amp; child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;; /* Connect to the section from the fif at position 100 */&#xD;&#xA;				&quot;&quot;&quot;DB_&quot; &amp; child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;); /* Connect to the section from the single fif */&#xD;&#xA;			&quot;&quot;); /* No downstream section available, so no connection required */&#xD;&#xA;		&quot;&quot;&quot;DB_&quot; &amp; next(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;)) /* Connect to the HOO instead of the section */" comment="Generate the default name for the PLT datablock on the downstream side" />
  <calculated_attribute family="GEN" id="CA_DB_PLT_Dwnstr" used_by="CLP" expression="=IF(mark_code=&quot;HOO&quot;; /* Check if it concern an HOO */&#xD;&#xA;	IF(ISERROR(prev(id=.child(element_name=&quot;cif&quot;).isc_id).id); /* Check which side is applicable, sending or receiving */&#xD;&#xA;		&quot;DB_&quot; &amp; child(element_name=&quot;cif&quot;).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;; /* Connect to the section from the CIF, it concerns a receiving side of the HOO */&#xD;&#xA;		&quot;DB_&quot; &amp; CA_ID_zz_ss &amp; &quot;_PLT&quot;); /* Connect to the HOO instead of the section, it concerns a sending side of the HOO */&#xD;&#xA;	IF(ISERROR(next(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).id); /* Check if there is not an area transition applicable */&#xD;&#xA;		IF(ISERROR(child(mark_code=&quot;SW_IND&quot;).id); /* Check if there is not an induct function available */&#xD;&#xA;			IF(NOT(ISERROR(child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).id)); /* Check if at least one downstream fif is available */&#xD;&#xA;				IF(COUNTIF(child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).;TRUE)&gt;1; /* Check if multiple downstream fif's are available */&#xD;&#xA;					&quot;DB_&quot; &amp; child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;; /* Connect to the section from the fif at position 100 */&#xD;&#xA;					&quot;DB_&quot; &amp; child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).CA_ISC_ID_zz_ss &amp; &quot;_PLT&quot;); /* Connect to the section from the single fif */&#xD;&#xA;				&quot;&quot;); /* No downstream section available, so no connection required */&#xD;&#xA;			&quot;DB_&quot; &amp; child(mark_code=&quot;SW_IND&quot;).CA_ID_Element &amp; &quot;_&quot; &amp; CA_ID_zz_ss &amp; &quot;_PLT&quot;); /* Connect to the IND instead of the section */&#xD;&#xA;		&quot;DB_&quot; &amp; next(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).CA_ID_zz_ss &amp; &quot;_PLT&quot;)) /* Connect to the HOO instead of the section */" comment="Generate the default name for the PLT datablock on the downstream side" />
  <calculated_attribute family="GEN" id="CA_DB_PLT_NonTrack" used_by="CLP" expression="=IF(ISERROR(.child(element_name=&quot;fif&quot;).isc_id); /* IF formula is used at an 'object' eg. IDO */&#xD;&#xA;	IF(AND(global_find(id=.child(element_name=&quot;cif&quot;).isc_id).child(mark_code=&quot;SW_TRK&quot;).function=&quot;01&quot;;ISERROR(global_find(id=.child(element_name=&quot;cif&quot;).isc_id).route_find(child(mark_code=&quot;SW_TRK&quot;).function=&quot;01&quot;;&quot;upstream&quot;;&quot;end_or_single&quot;;2).id)); /* Is section tracking and upstream not */&#xD;&#xA;    	IF(NOT(ISERROR(global_find(id=.child(element_name=&quot;cif&quot;).isc_id).route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(mark_code=&quot;SW_NTB&quot;).id)));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss)); /* AND an 'upstream' located NON TRACKING DB is present */&#xD;&#xA;			&quot;&quot;&quot;DB_Non_Trk_&quot; &amp; global_find(id=.child(element_name=&quot;cif&quot;).isc_id).route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(mark_code=&quot;SW_NTB&quot;).id));ISERROR(child(AND(mark_code=&quot;SW_TRN&quot;;function=&quot;03&quot;)).id));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;; /* THEN couple the 'upstream' located NON TRACKING DB */&#xD;&#xA;			&quot;&quot;); /* ELSE no DB needs to be coupled */&#xD;&#xA;		&quot;&quot;); /* ELSE no DB needs to be coupled */&#xD;&#xA;	IF(NOT(ISERROR(route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(mark_code=&quot;SW_NTB&quot;).id)));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss)); /* ELSE IF an 'upstream' located NON TRACKING DB is present */&#xD;&#xA;		IF(OR(NOT(ISERROR(parent(integration_level=&quot;zone&quot;).global_find(id=.parent(integration_level=&quot;zone&quot;).child(CA_ID_Section=&quot;01&quot;).child(AND(element_name=&quot;fif&quot;;LEFT(id;8)=&quot;upstream&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).child_find(mark_code=&quot;SW_NTB&quot;).id));NOT(ISERROR(route_find(AND(CA_ID_Zone=.CA_ID_Zone;NOT(ISERROR(child(mark_code=&quot;SW_NTB&quot;).id)));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss))); /* AND the previous or current zone has a 'non tracking' part */&#xD;&#xA;			&quot;&quot;&quot;DB_Non_Trk_&quot; &amp; route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(mark_code=&quot;SW_NTB&quot;).id)));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;;/* THEN couple the 'upstream' located NON TRACKING DB */&#xD;&#xA;			&quot;&quot;); /* ELSE no DB needs to be coupled */&#xD;&#xA;		IF(NOT(ISERROR(route_find(NOT(ISERROR(child(AND(element_name=&quot;fif&quot;;LEFT(id;8)=&quot;upstream&quot;;CA_ISC_ID_Area&lt;&gt;.CA_ID_Area)).id));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss)); /* ELSE IF an 'upstream' section with a handover from an other area is present */&#xD;&#xA;			&quot;&quot;&quot;DB_Non_Trk_&quot; &amp; route_find(NOT(ISERROR(child(AND(element_name=&quot;fif&quot;;LEFT(id;8)=&quot;upstream&quot;;CA_ISC_ID_Area&lt;&gt;.CA_ID_Area)).id));&quot;upstream&quot;;&quot;end_or_single&quot;).CA_ID_zz_ss &amp; &quot;_PLT&quot;&quot;&quot;; /* THEN couple the NON TRACKING DB from the HOO */&#xD;&#xA;			&quot;&quot;))) /* ELSE no DB needs to be coupled */" />
  <calculated_attribute family="GEN" id="CA_DB_TEP_TOP" used_by="CLP" expression="=&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot; &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; CA_ID_zz_ss" comment="Generate the default name for the PLT datablock" />
  <calculated_attribute family="GEN" id="CA_DB_TEP_TOP_Downstream" used_by="CLP" expression="=IF(NOT(ISERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).isc_id).child(OR(mark_code=&quot;SW_TT&quot;;mark_code=&quot;SW_EOC&quot;)).id));&#xD;&#xA;	&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot; &amp; global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).isc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).isc_id).CA_ID_zz_ss;&#xD;&#xA;	&quot;0&quot;)	" comment="Generate the default name for the PLT datablock on the downstream side" />
  <calculated_attribute family="GEN" id="CA_ELP_ASISlaveAddress" used_by="ELP" expression="=IF(&#xD;&#xA;    ISERROR(prev(element_name=&quot;addressing&quot;).asi_slave_address); /* IF 'calculated' attribute is not available */&#xD;&#xA;	&quot;#ERROR_slave_information_is_not_available&quot;; /* THEN no slave information is available */&#xD;&#xA;	IF(&#xD;&#xA;    	ISERROR(prev(element_name=&quot;addressing&quot;).asi_slave_address_as_build); /* IF 'as build' attribute is not available */&#xD;&#xA;		prev(element_name=&quot;addressing&quot;).asi_slave_address; /* THEN return the 'calculated' information */&#xD;&#xA;		IF(&#xD;&#xA;    		prev(element_name=&quot;addressing&quot;).asi_slave_address_as_build=&quot;&quot;; /* IF 'as build' attribute is empty */&#xD;&#xA;    		prev(element_name=&quot;addressing&quot;).asi_slave_address; /* THEN return the 'calculated' information */&#xD;&#xA;			prev(element_name=&quot;addressing&quot;).asi_slave_address_as_build /* ELSE return the 'as build' information */&#xD;&#xA;		)&#xD;&#xA;	)&#xD;&#xA;)" />
  <calculated_attribute family="GEN" id="CA_ELP_ASIChannel" used_by="ELP" expression="=IF(&#xD;&#xA;    ISERROR(prev(element_name=&quot;addressing&quot;).asi_channel); /* IF 'calculated' attribute is not available */&#xD;&#xA;	&quot;#ERROR_slave_information_is_not_available&quot;; /* THEN no slave information is available */&#xD;&#xA;	prev(element_name=&quot;addressing&quot;).asi_channel /* ELSE return the slave information */&#xD;&#xA;)" />
  <calculated_attribute family="GEN" id="CA_ELP_PrevPageNumber" used_by="ELP" expression="=IF(&#xD;&#xA;    ISERROR(prev(AND(page_name*1&gt;=CA_ELP_CFG_MinPage;page_name*1&lt;CA_ELP_CFG_MaxPage)).page_name);&#xD;&#xA;    CA_ELP_CFG_MinPage-1;&#xD;&#xA;    prev(AND(page_name*1&gt;=CA_ELP_CFG_MinPage;page_name*1&lt;CA_ELP_CFG_MaxPage)).page_name&#xD;&#xA;)" />
  <calculated_attribute family="GEN" id="CA_ELP_LMSDipTherm" used_by="ELP" expression="=IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;1;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=300);&quot;1011&quot;;&#xD;&#xA;	IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;300;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=400);&quot;0111&quot;;&#xD;&#xA;		IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;400;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=600);&quot;1000&quot;;&#xD;&#xA;			IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;600;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=800);&quot;0100&quot;;&#xD;&#xA;				IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;800;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=1000);&quot;1100&quot;;&#xD;&#xA;					IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;1000;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=1200);&quot;0010&quot;;&#xD;&#xA;						IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;1200;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=1500);&quot;1010&quot;;&#xD;&#xA;							IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;1500;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=1700);&quot;0110&quot;;&#xD;&#xA;								IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;1700;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=1900);&quot;1110&quot;;&#xD;&#xA;									IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;1900;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=2100);&quot;0001&quot;;&#xD;&#xA;										IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;2100;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=2600);&quot;1001&quot;;&#xD;&#xA;											IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;2600;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=3600);&quot;0101&quot;;&#xD;&#xA;												IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;3600;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=5000);&quot;1101&quot;;&#xD;&#xA;													IF(AND(parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&gt;5000;parent.child(element_name=&quot;electrics&quot;).nominal_current*1000&lt;=6600);&quot;0011&quot;;&#xD;&#xA;&quot;NOT ASSIGNED&quot;))))))))))))))" />
  <calculated_attribute family="GEN" id="CA_ELP_CFG_MinPage" used_by="ELP" expression="1500" />
  <calculated_attribute family="GEN" id="CA_ELP_CFG_MaxPage" used_by="ELP" expression="2000" />
  <calculated_attribute family="GEN" id="CA_ELP_Page_Title" used_by="ELP" expression="=IF(parent.parent.integration_level=&quot;zone&quot;;&#xD;&#xA;	parent.id &amp; &quot; - &quot; &amp; parent.parent.family &amp;&quot; - &quot; &amp; parent.parent.mark_code &amp; parent.parent.function &amp; &quot; &quot; &amp; &#xD;&#xA;	IF(ISERROR(FIND(&quot; - &quot;;parent.parent.function_description));parent.parent.function_description;LEFT(parent.parent.function_description;FIND(&quot; - &quot;;parent.parent.function_description)-1)) &amp; &quot; - &quot; &amp; parent.mark_code &amp; parent.function;&#xD;&#xA;		IF(parent.parent.integration_level=&quot;area&quot;;&#xD;&#xA;    	parent.id &amp; &quot; - &quot; &amp; parent.family &amp;&quot; - &quot; &amp; parent.mark_code &amp; parent.function &amp; &quot; &quot; &amp;&#xD;&#xA;   		IF(ISERROR(FIND(&quot; - &quot;;parent.function_description));parent.function_description;LEFT(parent.function_description;FIND(&quot; - &quot;;parent.function_description)-1));&#xD;&#xA;    	&quot;#ERROR&quot;&#xD;&#xA;		)&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;=parent.id &amp;  &quot; &quot; &amp;  parent.mark_code &amp;  &quot; &quot; &amp; IF(ISERROR(FIND(&quot; - &quot;;parent.parent.function_description));parent.parent.function_description;&#xD;&#xA;    LEFT(parent.parent.function_description;FIND(&quot; - &quot;;parent.parent.function_description)-1))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;=parent.id &amp;  &quot; &quot; &amp;  parent.mark_code &amp;  &quot; &quot; &amp; parent.parent.function_description*/" />
  <calculated_attribute family="GEN" id="CA_FIF_DownstreamZoneFunctionVariant" used_by="CLP" expression="=IF(IFERROR(AND(parent.child( AND( integration_level=&quot;section&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xD;&#xA;    IFERROR( next( integration_level=&quot;section&quot;).parent.id &lt;&gt; .parent.id; TRUE ));FALSE);&#xD;&#xA;    IFERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;position=&quot;100&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).function;global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).function);&#xD;&#xA;	&quot;#ERROR&quot;)" comment="Get function from the zone that is connected via the downstream fif within the current area" />
  <calculated_attribute family="GEN" id="CA_FIF_DownstreamZoneMarkcode" used_by="CLP" expression="=IF(IFERROR(AND(parent.child( AND( integration_level=&quot;section&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xD;&#xA;    IFERROR( next( integration_level=&quot;section&quot;).parent.id &lt;&gt; .parent.id; TRUE ));FALSE);&#xD;&#xA;    IFERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;position=&quot;100&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).mark_code;global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).mark_code);&#xD;&#xA;	&quot;#ERROR&quot;)" comment="Get markcode from the zone that is connected via the downstream fif within the current area" />
  <calculated_attribute family="GEN" id="CA_FIF_UpstreamZoneFunctionVariant" used_by="CLP" expression="=IF(IFERROR(AND(parent.child( AND( integration_level=&quot;section&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xD;&#xA;	IFERROR( prev( integration_level=&quot;section&quot;).parent.id &lt;&gt; .parent.id; TRUE ));FALSE);&#xD;&#xA;	IFERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;position=&quot;0&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).function;global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;8)=&quot;upstream&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).function);&#xD;&#xA;	&quot;#ERROR&quot;)" comment="Get function from the zone that is connected via the upstream fif within the current area" />
  <calculated_attribute family="GEN" id="CA_FIF_UpstreamZoneMarkcode" used_by="CLP" expression="=IF(IFERROR(AND(parent.child( AND( integration_level=&quot;section&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xD;&#xA;	IFERROR( prev( integration_level=&quot;section&quot;).parent.id &lt;&gt; .parent.id; TRUE ));FALSE);&#xD;&#xA;	IFERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;position=&quot;0&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).mark_code;global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;8)=&quot;upstream&quot;)).isc_id).parent(integration_level=&quot;zone&quot;).mark_code);&#xD;&#xA;	&quot;#ERROR&quot;)" comment="Get markcode from the zone that is connected via the upstream fif within the current area" />
  <calculated_attribute family="GEN" id="CA_GLP_CADOffsetX" used_by="GLP" expression="=IFERROR(parent(element_name=&quot;isc&quot;).child(element_name=&quot;cadsymbol&quot;).child(element_name=&quot;offset&quot;).offset_x; /* get offset_x from the cadsymbol */&#xD;&#xA;		0) /* default value */" comment="Offset x of the cadsymbol" />
  <calculated_attribute family="GEN" id="CA_GLP_CADOffsetY" used_by="GLP" expression="=IFERROR(parent(element_name=&quot;isc&quot;).child(element_name=&quot;cadsymbol&quot;).child(element_name=&quot;offset&quot;).offset_y; /* get offset_y from the cadsymbol */&#xD;&#xA;		0) /* default value */" comment="Offset y of the cadsymbol" />
  <calculated_attribute family="GEN" id="CA_GLP_CADOffsetZ" used_by="GLP" expression="=IFERROR(parent(element_name=&quot;isc&quot;).child(element_name=&quot;cadsymbol&quot;).child(element_name=&quot;offset&quot;).offset_z; /* get offset_z from the cadsymbol */&#xD;&#xA;		0) /* default value */" comment="Offset z of the cadsymbol" />
  <calculated_attribute family="GEN" id="CA_GLP_CADBlockID" used_by="GLP" expression="=IFERROR(parent(element_name=&quot;cadsymbol&quot;).block_id;&quot;0&quot;)" comment="Block id of the cadsymbol" />
  <calculated_attribute family="GEN" id="CA_GLP_CADBlockLength" used_by="GLP" expression="=parent(NOT(ISERROR(child(element_name=&quot;block&quot;).id))).child(AND(element_name=&quot;block&quot;;id=.CA_GLP_CADBlockID)).length" comment="Length of the block where the cadsymbol resides" />
  <calculated_attribute family="GEN" id="CA_GLP_LabelAlign" used_by="GLP" expression="=IF(&#xD;&#xA;    CA_GLP_MotorPosition=&quot;R&quot;;&#xD;&#xA;    &quot;right&quot;;&#xD;&#xA;    IF(&#xD;&#xA;        CA_GLP_MotorPosition=&quot;L&quot;;&#xD;&#xA;        &quot;left&quot;;&#xD;&#xA;        IF(&#xD;&#xA;            	CA_GLP_CADOffsetY&gt;0;&#xD;&#xA;          		&quot;left&quot;;&#xD;&#xA;      			&quot;right&quot;&#xD;&#xA;  		)&#xD;&#xA;	)&#xD;&#xA;)" comment="Label side as determined by the motor position" />
  <calculated_attribute family="GEN" id="CA_GLP_MaxBlockID" used_by="GLP" expression="=MAX(parent(integration_level=&quot;section&quot;).child(element_name = &quot;block&quot;).;id)" comment="The highest block in current section" />
  <calculated_attribute family="GEN" id="CA_GLP_MotorAlign" used_by="GLP" expression="=IF(CA_GLP_MotorPosition= &quot;L&quot;; 1; -1 )" comment="Multiply factor for offset_y, determined by the motor position" />
  <calculated_attribute family="GEN" id="CA_GLP_MotorPosition" used_by="GLP" expression="=IFERROR(IFERROR(UPPER(LEFT(parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).child(element_name=&quot;cif&quot;).isc_id).child(AND(element_name=&quot;cif&quot;;isc_id=.parent(integration_level=&quot;object&quot;).id)).side;1)); /* for isc-object, look for cif reference */&#xD;&#xA;		parent(integration_level=&quot;section&quot;).child(mark_code=&quot;MTR&quot;).child(element_name=&quot;location&quot;).side); /* for isc-section get the info from child */&#xD;&#xA;		&quot;C&quot;) /* default value */" comment="Determine motor position, which will be used indirectly to determine the alignment and the offset of the blocks." />
  <calculated_attribute family="GEN" id="CA_GLP_MotorBlockID" used_by="GLP" expression="=IFERROR(IFERROR(parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).child(element_name=&quot;cif&quot;).isc_id).child(mark_code=&quot;MTR&quot;).child(element_name=&quot;location&quot;).block; /* for isc-object, get the info from cif reference */&#xD;&#xA;		parent(integration_level=&quot;section&quot;).child(mark_code=&quot;MTR&quot;).child(element_name=&quot;location&quot;).block); /* for isc-section get the info from child */&#xD;&#xA;		&quot;0&quot;) /* default value */" comment="The block ID of which the motor is located" />
  <calculated_attribute family="GEN" id="CA_GLP_ParentsSkipChildren" used_by="GLP" expression="=IFERROR(parent(NOT(ISERROR(skip_children))).skip_children=&quot;true&quot;;FALSE)" comment="Check whether skip_children has been set to true for one of the parents." />
  <calculated_attribute family="GEN" id="CA_GLP_SectionWidth" used_by="GLP" expression="=IFERROR(&#xD;&#xA;    IFERROR(parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).child(element_name=&quot;cif&quot;).isc_id).child(element_name=&quot;block&quot;).width;&#xD;&#xA;    	IFERROR(parent(integration_level=&quot;object&quot;).child(element_name=&quot;block&quot;).width;&#xD;&#xA;    		IFERROR(parent(integration_level=&quot;section&quot;).child(element_name=&quot;block&quot;).width;&#xD;&#xA;    			parent(integration_level=&quot;zone&quot;).child(element_name=&quot;block&quot;).width)));0)" comment="The width of the section" />
  <calculated_attribute family="GEN" id="CA_GLP_SectionLength" used_by="GLP" expression="=IFERROR(IFERROR(parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).child(element_name=&quot;cif&quot;).isc_id).length;&#xD;&#xA;		parent(integration_level=&quot;section&quot;).length);0)" comment="The length of the section" />
  <calculated_attribute family="GEN" id="CA_GLP_ShapeLengthCenter" used_by="GLP" expression="=IF(OR(element_name=&quot;block&quot;;element_name=&quot;gap&quot;;element_name=&quot;contour&quot;); /* IF a &lt;block&gt;, &lt;gap&gt; or &lt;contour&gt; */&#xD;&#xA;	IF(shape=&quot;arc&quot;; /* THEN determine the length based on the mechanical coordinates */&#xD;&#xA;		ROUND((SQRT((xcentre-x1)*(xcentre-x1)+(ycentre-y1)*(ycentre-y1))*3.141592654*ABS(angle1))/180;3); /* Length of an 'arc' */&#xD;&#xA;		ROUND(SQRT((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));3)); /* Length of a 'straight' and a 'cline' */&#xD;&#xA;	&quot;ERROR_No_machanical_layout_info_available&quot;) /* ELSE the function is not applicable */" comment="Calculated length of the shape based on the coordinates with an accuracy of 3 digits" />
  <calculated_attribute family="GEN" id="CA_GLP_ShapeLengthLongSide" used_by="GLP" expression="=IF(OR(element_name=&quot;block&quot;;element_name=&quot;gap&quot;;element_name=&quot;contour&quot;); /* IF a &lt;block&gt;, &lt;gap&gt; or &lt;contour&gt; */&#xD;&#xA;	IF(shape=&quot;arc&quot;; /* THEN determine the length based on the mechanical coordinates */&#xD;&#xA;		ROUND((SQRT((xcentre-(x1-(width/2)))*(xcentre-(x1-(width/2)))+(ycentre-(y1-(width/2)))*(ycentre-(y1-(width/2))))*3.141592654*ABS(angle1))/180;3); /* Length of an 'arc' */&#xD;&#xA;		IF(AND(angle2&lt;&gt;0;angle2&lt;&gt;90); /* IF inducting a 'straight' or a 'cline' under an angle (e.g. a Belt Junction) */&#xD;&#xA;			ROUND(CA_ShapeLength_Center + ((width/2)/ABS(TAN(UF_ConvertDegreeToRadians(angle2))));3); /* THEN extend the center length from the end point of the shape */&#xD;&#xA;			IF(AND(angle1&lt;&gt;0;angle1&lt;&gt;90); /* ELSE IF diverting under an angle */&#xD;&#xA;				ROUND(CA_ShapeLength_Center + ((width/2)/ABS(TAN(UF_ConvertDegreeToRadians(angle1))));3); /* THEN extend the center length from the start point of the shape */&#xD;&#xA;				CA_ShapeLength_Center))); /* ELSE take the center length of the shape */&#xD;&#xA;	&quot;ERROR_No_machanical_layout_info_available&quot;) /* ELSE the function is not applicable */" comment="Calculated length of the shape based on the coordinates with an accuracy of 3 digits" />
  <calculated_attribute family="GEN" id="CA_GLP_ShapeLengthShortSide" used_by="GLP" expression="=IF(OR(element_name=&quot;block&quot;;element_name=&quot;gap&quot;;element_name=&quot;contour&quot;); /* IF a &lt;block&gt;, &lt;gap&gt; or &lt;contour&gt; */&#xD;&#xA;	IF(shape=&quot;arc&quot;; /* THEN determine the length based on the mechanical coordinates */&#xD;&#xA;    		ROUND((SQRT((xcentre-(x1+(width/2)))*(xcentre-(x1+(width/2)))+(ycentre-(y1+(width/2)))*(ycentre-(y1+(width/2))))*3.141592654*ABS(angle1))/180;3); /* Length of an 'arc' */&#xD;&#xA;		IF(AND(angle2&lt;&gt;0;angle2&lt;&gt;90); /* IF inducting a 'straight' or a 'cline' under an angle (e.g. a Belt Junction) */&#xD;&#xA;			ROUND(CA_ShapeLength_Center - ((width/2)/ABS(TAN(UF_ConvertDegreeToRadians(angle2))));3); /* THEN reduce the center length from the end point of the shape */&#xD;&#xA;			IF(AND(angle1&lt;&gt;0;angle1&lt;&gt;90); /* ELSE IF diverting under an angle */&#xD;&#xA;				ROUND(CA_ShapeLength_Center - ((width/2)/ABS(TAN(UF_ConvertDegreeToRadians(angle1))));3); /* THEN reduce the center length from the start point of the shape */&#xD;&#xA;				CA_ShapeLength_Center))); /* ELSE take the center length of the shape */&#xD;&#xA;	&quot;ERROR_No_machanical_layout_info_available&quot;) /* ELSE the function is not applicable */" comment="Calculated length of the shape based on the coordinates with an accuracy of 3 digits" />
  <calculated_attribute family="GEN" id="CA_GLP_CFG_LMSSize" used_by="GLP" expression="0.6" comment="Size of LMS block in AutoCAD" />
  <calculated_attribute family="GEN" id="CA_GLP_CFG_CCSize" used_by="GLP" expression="4" comment="Size of CCC block in AutoCAD" />
  <calculated_attribute family="GEN" id="CA_GLP_CFG_LabelOffset" used_by="GLP" expression="0.2" comment="Offset for label in AutoCAD" />
  <calculated_attribute family="GEN" id="CA_IO_Avail_24VDC_State" used_by="CLP" expression="=IF(NOT(global_find(id=IFERROR(.CA_ASI_lcc_id_power;.CA_ASI_lcc_id)).CA_MCFV = &quot;LCC29&quot;);&#xD;&#xA;    &quot;      A     &quot;&quot;M_ASI_AUX_PWR_&quot; &#xD;&#xA;    		&amp; IFERROR( /* First try to find the lcc_id_power reference. If fails use the lcc_id */&#xD;&#xA;        			global_find(AND(mark_code=&quot;LCC&quot;;id=.CA_ASI_lcc_id_power)).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number;&#xD;&#xA;        			global_find(AND(mark_code=&quot;LCC&quot;;id=.CA_ASI_lcc_id)).child(CA_MCFV=&quot;FBM03&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number&#xD;&#xA;    			)		&#xD;&#xA;    		&amp; &quot;_CH&quot; &amp; child(AND(element_name=&quot;addressing&quot;;asi_channel)).asi_channel &amp; &quot;&quot;&quot;; &quot;;&#xD;&#xA;    &quot;// #Error, no 24 VDC state present on LCC29. Check with EM engineer&quot;&#xD;&#xA;)&#xD;&#xA;" comment="Get the 24VDC supply state. From a LCC23 this is available, From a LCC29 no info is present. Used for IO_Available" />
  <calculated_attribute family="GEN" id="CA_ID_Area" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_ID;1)" comment="Area part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_ID_Element" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_ID;4)" comment="Element part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_ID_IO_ECS" used_by="GEN" expression="=CA_ID_Zone &amp; &quot;_&quot; &amp; CA_ID_Section &amp; &quot;_&quot; &amp; CA_ID_Element" />
  <calculated_attribute family="GEN" id="CA_ID_Index" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_ID;5)" comment="Indext part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_ID_Object" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_ID;3)" comment="Object part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_ID_Section" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_ID;3)" comment="Section part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_ID_Zone" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_ID;2)" comment="Zone part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_ID_zz_ss" used_by="CLP" expression="=CA_ID_Zone &amp; &quot;_&quot; &amp; CA_ID_Section" comment="Zone and section part of the id attribute" />
  <calculated_attribute family="GEN" id="CA_INDEX_NUMBER_LCC" used_by="CLP" expression="=IF(IFERROR(UF_DelimitedData(global_find(id=.child(element_name=&quot;addressing&quot;).lcc_id).id;&quot;.&quot;;3)=UF_DelimitedData(.child(element_name=&quot;addressing&quot;).lcc_id;&quot;.&quot;;3);UF_DelimitedData(parent(integration_level=&quot;area&quot;).next(id=.lcc_id).id;&quot;.&quot;;3)=UF_DelimitedData(.lcc_id;&quot;.&quot;;3))&#xD;&#xA;;parent(integration_level=&quot;area&quot;).next(id=.child(element_name=&quot;addressing&quot;).lcc_id).index&#xD;&#xA;;&quot;index number missing&quot;)" comment="Retrieve the index number from the LCC where the section is connected" />
  <calculated_attribute family="GEN" id="CA_IP_Address" used_by="CDx" expression="=IF(UF_DelimitedData(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;/&quot;;2) = 24;&#xD;&#xA;	IFERROR(CA_IP_SubnetAddress &amp; IF(LEN(CA_IP_HostNumber)&lt;3;IF(LEN(CA_IP_HostNumber)&lt;2;&quot;00&quot; &amp; CA_IP_HostNumber;&quot;0&quot; &amp; CA_IP_HostNumber);CA_IP_HostNumber);&quot;&quot;);&#xD;&#xA;	IF(UF_DelimitedData(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;/&quot;;2) &lt; 24;&#xD;&#xA;		IFERROR( &#xD;&#xA;    		UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;1) &amp; &quot;.&quot; &amp; /* Get first part of IP address */ &#xD;&#xA;    		UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;2) &amp; &quot;.&quot; &amp; /* Get second part of IP address */  &#xD;&#xA;    		IF(LEN(UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;3) + FLOOR(CA_IP_HostNumber/256;1))&lt;3;&#xD;&#xA;        		IF(LEN(UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;3) + FLOOR(CA_IP_HostNumber/256;1))&lt;2;&#xD;&#xA;        			&quot;00&quot; &amp; UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;3) + FLOOR(CA_IP_HostNumber/256;1);&#xD;&#xA;					&quot;0&quot; &amp; UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;3) + FLOOR(CA_IP_HostNumber/256;1));&#xD;&#xA;				UF_DelimitedData(CA_IP_SubnetAddress;&quot;.&quot;;3) + FLOOR(CA_IP_HostNumber/256;1)) &amp; &quot;.&quot; &amp;  /* Get third part of IP address */ &#xD;&#xA;    		IF(LEN(UF_MOD(CA_IP_HostNumber;256))&lt;3;&#xD;&#xA;        		IF(LEN(UF_MOD(CA_IP_HostNumber;256))&lt;2;&#xD;&#xA;        			&quot;00&quot; &amp; UF_MOD(CA_IP_HostNumber;256);&#xD;&#xA;        					&quot;0&quot; &amp; UF_MOD(CA_IP_HostNumber;256));&#xD;&#xA;				UF_MOD(CA_IP_HostNumber;256));&#xD;&#xA;			&quot;&quot;);&#xD;&#xA;		&quot;Unsupported subnet CIDR&quot;&#xD;&#xA;	)&#xD;&#xA;)" comment="Complete IP address" />
  <calculated_attribute family="GEN" id="CA_IP_CFG_StartHostNumber" used_by="CDx" expression="16" comment="First allowed IP Host number from the subnet" />
  <calculated_attribute family="GEN" id="CA_IP_HostNumber" used_by="CDx" expression="=IF(ISERROR(FIND(&quot;/&quot;;prev(AND(element_name=&quot;addressing&quot;;CA_IP_SubnetAddress=.CA_IP_SubnetAddress;NOT(ISERROR(ip_address)))).ip_address)); /* Check if previous IP address has CIDR subnet mask information available */&#xD;&#xA;	IF(&#xD;&#xA;    	UF_DelimitedData(prev(AND(element_name=&quot;addressing&quot;;CA_IP_SubnetAddress=.CA_IP_SubnetAddress;NOT(ISERROR(ip_address)))).ip_address;&quot;.&quot;;4) + 1&#xD;&#xA;    	    &lt; POWER(2;32 - UF_DelimitedData(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;/&quot;;2)) - 1; /* calculate max host in netmask */&#xD;&#xA;    &#xD;&#xA;    		/* No CIDR information available, validate next IP address */&#xD;&#xA;            IF(UF_DelimitedData(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;/&quot;;2) &lt; 24&#xD;&#xA;            	;256 * (UF_DelimitedData(prev(AND(element_name=&quot;addressing&quot;;CA_IP_SubnetAddress=.CA_IP_SubnetAddress;NOT(ISERROR(ip_address)))).ip_address;&quot;.&quot;;3) - UF_DelimitedData(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;.&quot;;3))&#xD;&#xA;            	;0)&#xD;&#xA;&#xD;&#xA;            + UF_DelimitedData(prev(AND(element_name=&quot;addressing&quot;;CA_IP_SubnetAddress=.CA_IP_SubnetAddress;NOT(ISERROR(ip_address)))).ip_address;&quot;.&quot;;4) + 1; /* Generate next Host Number */&#xD;&#xA;			&quot;#ERROR Complete range is used&quot;); /* Error Range is full */&#xD;&#xA;	CA_IP_CFG_StartHostNumber &#xD;&#xA;		+ MID(&#xD;&#xA;    		global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&#xD;&#xA;    		UF_DelimiterPosition(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;.&quot;;3) +1;&#xD;&#xA;    		UF_DelimiterPosition(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;/&quot;;1) - UF_DelimiterPosition(global_find(AND(parent.mark_code=&quot;CCC&quot;;element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;.&quot;;3) -1&#xD;&#xA;			)&#xD;&#xA;) /* CIDR information available thus first item that requires an IP address */" comment="Calculation of the IP Host number from the subnet" />
  <calculated_attribute family="GEN" id="CA_IP_SubnetAddress" used_by="CDx" expression="=LEFT(global_find(AND(mark_code=&quot;CCC&quot;;NOT(ISERROR(child(AND(element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).id)))).child(AND(element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;UF_DelimiterPosition(global_find(AND(mark_code=&quot;CCC&quot;;NOT(ISERROR(child(AND(element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).id)))).child(AND(element_name=&quot;addressing&quot;;id=&quot;Fieldbus&quot;)).ip_address;&quot;.&quot;;3))" comment="Subnet Addres" />
  <calculated_attribute family="GEN" id="CA_IP_SubnetMask" used_by="CDx" expression="=256-POWER(2;(8-UF_UsedBitsSubnetMask(0))) &amp; &quot;.&quot; &amp; 256-POWER(2;(8-UF_UsedBitsSubnetMask(1))) &amp; &quot;.&quot; &amp; 256-POWER(2;(8-UF_UsedBitsSubnetMask(2))) &amp; &quot;.&quot; &amp; 256-POWER(2;(8-UF_UsedBitsSubnetMask(3)))" comment="Subnet mask used to be able to calculate the Subnet" />
  <calculated_attribute family="GEN" id="CA_IS_FIRST_PEC" used_by="CLP" expression="=&#xA;IFERROR(&#xA;AND(&#xA;  parent.child( AND( mark_code=&quot;PEC&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xA;  IFERROR( prev( mark_code=&quot;PEC&quot;).parent.id &lt;&gt; .parent.id; TRUE )&#xA;);&#xA;FALSE&#xA;)" comment="Determines whether the selected PEC is the first PEC of this section" />
  <calculated_attribute family="GEN" id="CA_IS_LAST_PEC" used_by="CLP" expression="=IFERROR(AND(parent.child( AND( mark_code=&quot;PEC&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;IFERROR( next( mark_code=&quot;PEC&quot;).parent.id &lt;&gt; .parent.id; TRUE));FALSE)" comment="Determines whether the selected PEC is the last PEC of this section" />
  <calculated_attribute family="GEN" id="CA_ISC_ID_Area" used_by="GEN" expression="=UF_DelimitedData(isc_id;CA_CFG_Delimiter_ID;1)" comment="Area part of the isc_id attribute" />
  <calculated_attribute family="GEN" id="CA_ISC_ID_Element" used_by="GEN" expression="=UF_DelimitedData(isc_id;CA_CFG_Delimiter_ID;4)" comment="Element part of the isc_id attribute" />
  <calculated_attribute family="GEN" id="CA_ISC_ID_Object" used_by="GEN" expression="=UF_DelimitedData(isc_id;CA_CFG_Delimiter_ID;3)" comment="Object part of the isc_id attribute" />
  <calculated_attribute family="GEN" id="CA_ISC_ID_Section" used_by="GEN" expression="=UF_DelimitedData(isc_id;CA_CFG_Delimiter_ID;3)" comment="Section part of the isc_id attribute" />
  <calculated_attribute family="GEN" id="CA_ISC_ID_Zone" used_by="GEN" expression="=UF_DelimitedData(isc_id;CA_CFG_Delimiter_ID;2)" comment="Zone part of the isc_id attribute" />
  <calculated_attribute family="GEN" id="CA_ISC_ID_zz_ss" used_by="CLP" expression="=UF_DelimitedData(isc_id;&quot;.&quot;;2) &amp; &quot;_&quot; &amp; UF_DelimitedData(isc_id;&quot;.&quot;;3)" comment="Zone and section part of the isc_id attribute" />
  <calculated_attribute family="GEN" id="CA_LCC_ID_zz_ss" used_by="GEN" expression="=UF_DelimitedData(IFERROR(child(element_name=&quot;addressing&quot;).lcc_id;lcc_id);CA_CFG_Delimiter_ID;2) &amp; CA_CFG_Delimiter_SYMBOL &amp; UF_DelimitedData(IFERROR(child(element_name=&quot;addressing&quot;).lcc_id;lcc_id);CA_CFG_Delimiter_ID;3)" comment="Zone and section part of the lcc_id attribute" />
  <calculated_attribute family="GEN" id="CA_LCC_ID_POWER_zz_ss" used_by="GEN" expression="=UF_DelimitedData(IFERROR(child(element_name=&quot;addressing&quot;).lcc_id_power;lcc_id_power);CA_CFG_Delimiter_ID;2) &amp; CA_CFG_Delimiter_SYMBOL &amp; UF_DelimitedData(IFERROR(child(element_name=&quot;addressing&quot;).lcc_id_power;lcc_id_power);CA_CFG_Delimiter_ID;3)" comment="Zone and section part of the lcc_id_power attribute" />
  <calculated_attribute family="GEN" id="CA_MCFV" used_by="GEN" expression="=mark_code &amp; function" comment="Returns a string containing the Marcode and Function variant" />
  <calculated_attribute family="GEN" id="CA_NetworkHeader" used_by="CLP" expression="=IF(integration_level=&quot;area&quot;;&#xD;&#xA;	&quot;AG: &quot; &amp; mark_code &amp; function &amp; &quot; &quot; &amp; CA_ID_Area; /* Area Level - Fixed mapping */&#xD;&#xA;	IF(NOT(ISERROR(global_find(mark_code=&quot;SW_FIX&quot;).isc_id)); /* Check new or old way of notating SW_FIX. (ra#29928)*/&#xD;&#xA;		/* New way of notating SW_FIX */&#xD;&#xA;		IF(ISERROR(COUNTIF(prev(AND(parent.id=.parent.id;OR(integration_level=&quot;zone&quot;;integration_level=&quot;section&quot;;integration_level=&quot;object&quot;))).;TRUE)); /* First item in zone? */&#xD;&#xA;			IF(NOT(ISERROR(global_find(AND(mark_code=&quot;SW_FIX&quot;;isc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).id));	/* Is item trigger for a fixed part? */&#xD;&#xA;				UF_NETWORK_ID(0) &amp; &quot;: &quot; &amp; parent(integration_level=&quot;zone&quot;).mark_code &amp; parent(integration_level=&quot;zone&quot;).function &amp; &quot; - &quot; &amp; global_find(AND(mark_code=&quot;SW_FIX&quot;;isc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).function_description &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index); /* Generate first header for fixed part of a zone */&#xD;&#xA;				UF_NETWORK_ID(0) &amp; &quot;: &quot; &amp; mark_code &amp; function &amp; &quot; &quot; &amp; LEFT(id;UF_DelimiterPosition(id;CA_CFG_Delimiter_ID;3)-1) &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index)); /* Generate first header for other items */&#xD;&#xA;			IF(NOT(ISERROR(global_find(AND(mark_code=&quot;SW_FIX&quot;;isc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).id));	/* Is item trigger for a fixed part? */&#xD;&#xA;				UF_NETWORK_ID(COUNTIF(prev(AND(parent.id=.parent.id;OR(integration_level=&quot;zone&quot;;integration_level=&quot;section&quot;;integration_level=&quot;object&quot;))).;TRUE)) &amp; &quot;: &quot; &amp; parent(integration_level=&quot;zone&quot;).mark_code &amp; parent(integration_level=&quot;zone&quot;).function &amp; &quot; - &quot; &amp; global_find(AND(mark_code=&quot;SW_FIX&quot;;isc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).function_description &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index); /* Generate following headers for fixed part of a zone */&#xD;&#xA;				UF_NETWORK_ID(COUNTIF(prev(AND(parent.id=.parent.id;OR(integration_level=&quot;zone&quot;;integration_level=&quot;section&quot;;integration_level=&quot;object&quot;))).;TRUE)) &amp; &quot;: &quot; &amp; mark_code &amp; function &amp; &quot; &quot; &amp; LEFT(id;UF_DelimiterPosition(id;CA_CFG_Delimiter_ID;3)-1) &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index))) /* Generate following headers for other items */&#xD;&#xA;		; /* Old way of notating SW_FIX */&#xD;&#xA;		IF(ISERROR(COUNTIF(prev(AND(parent.id=.parent.id;OR(integration_level=&quot;zone&quot;;integration_level=&quot;section&quot;;integration_level=&quot;object&quot;))).;TRUE)); /* First item in zone? */&#xD;&#xA;			IF(NOT(ISERROR(global_find(AND(mark_code=&quot;SW_FIX&quot;;lcc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).id));	/* Is item trigger for a fixed part? */&#xD;&#xA;				UF_NETWORK_ID(0) &amp; &quot;: &quot; &amp; parent(integration_level=&quot;zone&quot;).mark_code &amp; parent(integration_level=&quot;zone&quot;).function &amp; &quot; - &quot; &amp; global_find(AND(mark_code=&quot;SW_FIX&quot;;lcc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).function_description &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index); /* Generate first header for fixed part of a zone */&#xD;&#xA;				UF_NETWORK_ID(0) &amp; &quot;: &quot; &amp; mark_code &amp; function &amp; &quot; &quot; &amp; LEFT(id;UF_DelimiterPosition(id;CA_CFG_Delimiter_ID;3)-1) &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index)); /* Generate first header for other items */&#xD;&#xA;			IF(NOT(ISERROR(global_find(AND(mark_code=&quot;SW_FIX&quot;;lcc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).id));	/* Is item trigger for a fixed part? */&#xD;&#xA;				UF_NETWORK_ID(COUNTIF(prev(AND(parent.id=.parent.id;OR(integration_level=&quot;zone&quot;;integration_level=&quot;section&quot;;integration_level=&quot;object&quot;))).;TRUE)) &amp; &quot;: &quot; &amp; parent(integration_level=&quot;zone&quot;).mark_code &amp; parent(integration_level=&quot;zone&quot;).function &amp; &quot; - &quot; &amp; global_find(AND(mark_code=&quot;SW_FIX&quot;;lcc_id=.id;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).function_description &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index); /* Generate following headers for fixed part of a zone */&#xD;&#xA;				UF_NETWORK_ID(COUNTIF(prev(AND(parent.id=.parent.id;OR(integration_level=&quot;zone&quot;;integration_level=&quot;section&quot;;integration_level=&quot;object&quot;))).;TRUE)) &amp; &quot;: &quot; &amp; mark_code &amp; function &amp; &quot; &quot; &amp; LEFT(id;UF_DelimiterPosition(id;CA_CFG_Delimiter_ID;3)-1) &amp; IF(ISERROR(CA_ID_Index);&quot;&quot;;&quot; - &quot; &amp; UPPER(LEFT(integration_level;1))&amp;RIGHT(integration_level;LEN(integration_level)-1) &amp; &quot; Part &quot; &amp; CA_ID_Index))) /* Generate following headers for other items */&#xD;&#xA;		)&#xD;&#xA;	)" />
  <calculated_attribute family="GEN" id="CA_PLT_Entries" used_by="CLP" expression="=IF(OR(mark_code=&quot;HOO&quot;;mark_code=&quot;HBO&quot;);&#xD;&#xA;    &quot;10&quot;;&#xD;&#xA;    IFERROR(IF(RIGHT(family;3)=&quot;RAW&quot;;CEILING((ROUNDUP(length / 0.5;0)*2)+2;10);&#xD;&#xA;    IF(RIGHT(family;3)=&quot;TTT&quot;;CEILING((ROUNDUP(length / 1.45;0)*2)+2;10);&quot;&quot;));&quot;10&quot;)&#xD;&#xA;)" comment="Calculating the PLT DB array length of a section" />
  <calculated_attribute family="GEN" id="CA_PN_ext_lcc_id" used_by="CLP" expression="=IFERROR(&#xD;&#xA;    .child(AND(element_name=&quot;addressing&quot;;id=&quot;PN_ext&quot;)).lcc_id;&#xD;&#xA;    IFERROR(&#xD;&#xA;        .lcc_id;&#xD;&#xA;        .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;4)=&quot;ASi&quot;))).lcc_id&#xD;&#xA;    )&#xD;&#xA;)/* First try to find the lcc_id on &lt;addressing&gt;, if fails try to find the lcc_id on &lt;isc&gt;. If all fails, get the lcc_id from any &lt;addressing&gt; not being a ASi node */" comment="Get lcc_id value from isc level(old) or addressing level(new), or any" />
  <calculated_attribute family="GEN" id="CA_PROFINET_NetworkDeviceID" used_by="CD1" expression="=IF(&#xD;&#xA;    ISERROR(parent(integration_level=&quot;object&quot;).child(mark_code=&quot;ECL&quot;).id);&#xD;&#xA;    IF(parent.mark_code=&quot;KTP&quot;;&quot;ET-&quot;;&quot;PN-&quot;) &#xD;&#xA;        &amp; parent.CA_ID_Area &#xD;&#xA;        &amp; &quot;-&quot;&#xD;&#xA;        &amp; parent.CA_ID_Zone&#xD;&#xA;        &amp; &quot;-&quot;&#xD;&#xA;        &amp; parent.CA_ID_Section&#xD;&#xA;        &amp; &quot;-&quot;&#xD;&#xA;        &amp; parent.CA_ID_Element;&#xD;&#xA;IF(parent.mark_code=&quot;KTP&quot;;&quot;ET-&quot;;&quot;PN-&quot;) &#xD;&#xA;        &amp; parent(integration_level=&quot;object&quot;).CA_ID_Area &#xD;&#xA;        &amp; &quot;-&quot;&#xD;&#xA;        &amp; parent(integration_level=&quot;object&quot;).CA_ID_Zone&#xD;&#xA;        &amp; &quot;-&quot;&#xD;&#xA;        &amp; parent(integration_level=&quot;object&quot;).CA_ID_Section&#xD;&#xA;        &amp; &quot;-&quot;&#xD;&#xA;        &amp; MID(parent(integration_level=&quot;object&quot;).child(mark_code=&quot;ECL&quot;).id;12;3) &#xD;&#xA;        &amp; IF(ISERROR(parent.function_abbreviation);&quot;&quot;;&quot;-&quot; &amp; parent.function_abbreviation)&#xD;&#xA;)" />
  <calculated_attribute family="GEN" id="CA_PROFINET_DeviceNumber" used_by="CD1" expression="=IF(&#xD;&#xA;    ISERROR(prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(profinet_device_number)))).id);&#xD;&#xA;    CA_CFG_PN_MinDeviceNumber;&#xD;&#xA;    prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(profinet_device_number)))).profinet_device_number&#xD;&#xA;    + 1&#xD;&#xA;)" comment="Calculating the device number of profinet subscriber" />
  <calculated_attribute family="GEN" id="CA_PROFINET_PrevStartAddressEquipmentID" used_by="CD1" expression="=prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).id" comment="Get the ID of the previous equipment that has a Profinet Connection and the attribute 'start_address' available" />
  <calculated_attribute family="GEN" id="CA_profinet_routing_sequence" used_by="CD1" expression="=IF(OR(CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(CA_PROFINET_lcc_id));&#xD;&#xA;&quot;0&quot;;&#xD;&#xA;IF(OR(global_find(id=.CA_PROFINET_lcc_id).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=.CA_PROFINET_lcc_id).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;1&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;2&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;3&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;4&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;5&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;6&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;7&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;8&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;9&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;10&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;11&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;12&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;13&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;14&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;15&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;16&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;17&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;18&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;19&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;20&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;21&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;22&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;23&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;24&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;25&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;26&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;27&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;28&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;29&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;30&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;31&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;32&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;33&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;34&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;35&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;36&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;37&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;38&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;39&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;40&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;41&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;42&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;43&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;44&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;45&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;46&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;47&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;48&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;49&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;50&quot;;&#xD;&#xA;&quot;51&quot;)))))))))))))))))))))))))))))))))))))))))))))))))))" comment="Number of ProfiNET components till master cabinet is reached." />
  <calculated_attribute family="GEN" id="CA_PROFINET_SlaveNotPresent" used_by="CLP" expression="=&quot;&quot;&quot;DB_Diagnose_PN&quot;&quot;.PNIO_System_&quot; &amp; .child(element_name=&quot;addressing&quot;).profinet_io_system_id &amp; &quot;.Device_Not_Present[&quot;&#xD;&#xA;&amp; IFERROR(&#xD;&#xA;    IFERROR( /* First try to find the FBM module */&#xD;&#xA;        global_find(id=.child(element_name=&quot;addressing&quot;).lcc_id).child(mark_code=&quot;FBM&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number &amp;&quot;]&quot;;&#xD;&#xA;    	global_find(id=.lcc_id).child(mark_code=&quot;FBM&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number &amp;&quot;]&quot;);&#xD;&#xA;    IFERROR( /* If fails any will do */&#xD;&#xA;        global_find(id=.child(element_name=&quot;addressing&quot;).lcc_id).child_find(AND(element_name=&quot;addressing&quot;;CA_CFG_profinet_device_number)).CA_CFG_profinet_device_number &amp;&quot;]&quot;;&#xD;&#xA;        global_find(id=.lcc_id).child_find(AND(element_name=&quot;addressing&quot;;CA_CFG_profinet_device_number)).CA_CFG_profinet_device_number &amp;&quot;]&quot;)&#xD;&#xA; )" comment="&quot;DB_Diagnose_PN&quot;.PNIO_System_xxx.Device_Not_Present[nn]" />
  <calculated_attribute family="GEN" id="CA_PROFINET_SlaveError" used_by="CLP" expression="=&quot;&quot;&quot;DB_Diagnose_PN&quot;&quot;.PNIO_System_&quot; &amp; .child(element_name=&quot;addressing&quot;).profinet_io_system_id &amp; &quot;.Device_Error[&quot;&#xD;&#xA;&amp; IFERROR(&#xD;&#xA;    IFERROR(/* First try to find the FBM moduel */&#xD;&#xA;        global_find(id=.child(element_name=&quot;addressing&quot;).lcc_id).child(mark_code=&quot;FBM&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number &amp;&quot;]&quot;; &#xD;&#xA;        global_find(id=.lcc_id).child(mark_code=&quot;FBM&quot;).child(element_name=&quot;addressing&quot;).CA_CFG_profinet_device_number &amp;&quot;]&quot;);&#xD;&#xA;    IFERROR( /* If fails any will do */&#xD;&#xA;        global_find(id=.child(element_name=&quot;addressing&quot;).lcc_id).child_find(AND(element_name=&quot;addressing&quot;;CA_CFG_profinet_device_number)).CA_CFG_profinet_device_number &amp;&quot;]&quot;;&#xD;&#xA;        global_find(id=.lcc_id).child_find(AND(element_name=&quot;addressing&quot;;CA_CFG_profinet_device_number)).CA_CFG_profinet_device_number &amp;&quot;]&quot;)&#xD;&#xA; )" comment="&quot;DB_Diagnose_PN&quot;.PNIO_System_xxx.Device_Error[nn]" />
  <calculated_attribute family="GEN" id="CA_PROFINET_StartAddress" used_by="CD1" expression="=IF(ISERROR(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family);&#xD;&#xA;    CA_CFG_PN_StartAddress; /* If the first entry then start with the default configured offset */&#xD;&#xA;    prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).next(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).start_address +&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;CRA&quot;; /* If previous entry is from 'CRA' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_CRA; /* Get previous 'start_address' and add the offset of used IO range for the 'CRA' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;GEN&quot;; /* If previous entry is from 'GEN' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_GEN; /* Get previous 'start_address' and add the offset of used IO range for the 'GEN' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;RAW&quot;; /* If previous entry is from 'RAW' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_RAW; /* Get previous 'start_address' and add the offset of used IO range for the 'RAW' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;SAFE&quot;; /* If previous entry is from 'SAFE' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_SAFE; /* Get previous 'start_address' and add the offset of used IO range for the 'SAFE' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;SBA&quot;; /* If previous entry is from 'SBA' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_SBA; /* Get previous 'start_address' and add the offset of used IO range for the 'SBA' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;SHE&quot;; /* If previous entry is from 'SHE' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_SHE; /* Get previous 'start_address' and add the offset of used IO range for the 'SHE' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;TTT&quot;; /* If previous entry is from 'TTT' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_TTT; /* Get previous 'start_address' and add the offset of used IO range for the 'TTT' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_CRA&quot;; /* If previous entry is from 'PRJ_CRA' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_CRA; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_CRA' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_GEN&quot;; /* If previous entry is from 'PRJ_GEN' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_GEN; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_GEN' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_RAW&quot;; /* If previous entry is from 'PRJ_RAW' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_RAW; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_RAW' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_SAFE&quot;; /* If previous entry is from 'PRJ_SAFE' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_SAFE; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_SAFE' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_SBA&quot;; /* If previous entry is from 'PRJ_SBA' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_SBA; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_SBA' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_SHE&quot;; /* If previous entry is from 'PRJ_SHE' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_SHE; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_SHE' equipment */&#xD;&#xA;		IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).family=&quot;PRJ_TTT&quot;; /* If previous entry is from 'PRJ_TTT' family */&#xD;&#xA;			CA_CFG_PN_IORangesEquipment_PRJ_TTT; /* Get previous 'start_address' and add the offset of used IO range for the 'PRJ_TTT' equipment */&#xD;&#xA;			&quot;#ERROR_Family_Not_Defined&quot;)))))))))))))))" comment="Calculating the start address of profinet subscribers" />
  <calculated_attribute family="GEN" id="CA_PROFINET_SwitchPortID" used_by="CD1" expression="=IFERROR(profinet_switch_port_id_as_build; /* Check if 'as_build' information is present */&#xD;&#xA;    IF(NOT(ISERROR(IFERROR(lcc_id;parent.lcc_id))); /* Check if 'lcc_id' information is present at addressing or parent &lt;isc&gt; */&#xD;&#xA;    	IF(OR(&#xD;&#xA;        	global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;CCC01&quot;;&#xD;&#xA;        	global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;CCC02&quot;;&#xD;&#xA;        	global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;CCC16&quot;);&#xD;&#xA;    		/* Handle connected to main CCC switch_port_id */ &#xD;&#xA;    		IF(ISERROR(RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;)); /* Check if already switchport id is generated for this CCC */&#xD;&#xA;    			STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;; 2 ); /* If not, start on CCC with 2 */&#xD;&#xA;    			IF(RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;) = 1; /* Check if port 1 is occupied */ &#xD;&#xA;    				&quot;#ERROR_Max_connections_at_main_cabinet_reached&quot;; /* Maximum allowed connections to the main CCC cabinet is reached */ &#xD;&#xA;    				STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;; 1 ) /* Next connection on port 1 */&#xD;&#xA;					)&#xD;&#xA;				);&#xD;&#xA;			/* Handle Daisychain switch_port_id, or self main CCC */&#xD;&#xA;			IF(OR(&#xD;&#xA;    			NOT(global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;LCC21&quot;);&#xD;&#xA;    			NOT(global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;LCC27&quot;);&#xD;&#xA;				.parent.CA_MCFV=&quot;LCC21&quot;;&#xD;&#xA;				.parent.CA_MCFV=&quot;LCC27&quot;;&#xD;&#xA;				.parent.CA_MCFV=&quot;CCC01&quot;;&#xD;&#xA;				.parent.CA_MCFV=&quot;CCC02&quot;;&#xD;&#xA;				.parent.CA_MCFV=&quot;CCC16&quot;); /* Check if not connected to a Profinet Switch/Repeater, or self a Profinet Switch/Repeater */&#xD;&#xA;				/* Handle first connection to parent ProfiNET device or LCC21 / LCC27 */&#xD;&#xA;				IF(AND(	&#xD;&#xA;    					OR(&#xD;&#xA;        					global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;LCC21&quot;;&#xD;&#xA;        					global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).CA_MCFV=&quot;LCC27&quot;);&#xD;&#xA;        				NOT(ISERROR(prev(AND(parent.CA_PROFINET_lcc_id=.parent.CA_PROFINET_lcc_id;CA_CFG_profinet_switch_port_id=2)).id))); /* Check if there is a previous Profinet Switch/Repeater available connected to the same 'lcc_id' */&#xD;&#xA;    &#xD;&#xA;					/* connected to LCC21 / LC27 and daisychain port occupied */&#xD;&#xA;                    IF(ISERROR(RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;)); /* Already a Profinet Switch/Repeater connected, check if it is the first other connection connected to the Profinet Switch/Repeater */&#xD;&#xA;                    /* First other connection to LCC21 / LCC27 */&#xD;&#xA;                    	IF(RIGHT(global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).child(element_name=&quot;addressing&quot;).id;4)=&quot;ring&quot;;&#xD;&#xA;                        	STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;;3);&#xD;&#xA;                            STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;;CA_CFG_PN_MinSwitchNumber) /* First other connection on Profinet Switch/Repeater */&#xD;&#xA;                		);&#xD;&#xA;                    	/* Next connection to LCC21 / LCC27 */&#xD;&#xA;                        IF(RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;) + 1 &gt; CA_CFG_PN_MaxSwitchNumber;&#xD;&#xA;    						&quot;#ERROR_Max_connections_reached&quot;; /* Maximum allowed connections to theProfinet Switch/Repeater is reached */ &#xD;&#xA;    						STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;;RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;)+1)&#xD;&#xA;							)&#xD;&#xA;						);&#xD;&#xA;					/* Daisychain on ProfiNET device on port 2  */&#xD;&#xA;					2); /* Not a connection to a Profinet Switch/Repeater, therefore default '2' is used */&#xD;&#xA;                &#xD;&#xA;                /* Handle other connections to the LCC21 / LCC27 */&#xD;&#xA;				IF(ISERROR(RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;));&#xD;&#xA;					STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;;IF(RIGHT(global_find(id=IFERROR(.lcc_id;.parent.lcc_id)).child(element_name=&quot;addressing&quot;).id;4)=&quot;ring&quot;;3;CA_CFG_PN_MinSwitchNumber)); /* First connection on Profinet Switch/Repeater */&#xD;&#xA;					IF(RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;)+1&gt;CA_CFG_PN_MaxSwitchNumber;&#xD;&#xA;    					&quot;#ERROR_Max_connections_switch_reached&quot;; /*  Maximum allowed connections to theProfinet Switch/Repeater is reached  */ &#xD;&#xA;    					STORE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;;RETRIEVE(IFERROR(.lcc_id;.parent.lcc_id) &amp; &quot;profinet_switch_port_id&quot;)+1)&#xD;&#xA;						)					&#xD;&#xA;					)&#xD;&#xA;				)&#xD;&#xA;			);&#xD;&#xA;		&quot;0&quot;) /* No 'lcc_id' information present at &lt;addressing&gt; or parent &lt;isc&gt; therefore not possible to generate a value */&#xD;&#xA;	)" />
  <calculated_attribute family="GEN" id="CA_PROFINET_Hop_Cnt" used_by="CLP" expression="=IF(OR(CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(CA_PROFINET_lcc_id));&#xD;&#xA;&quot;0&quot;;&#xD;&#xA;IF(OR(global_find(id=.CA_PROFINET_lcc_id).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=.CA_PROFINET_lcc_id).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;1&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;2&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;3&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;4&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;5&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;6&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;7&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;8&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;9&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;10&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;11&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;12&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;13&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;14&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;15&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;16&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;17&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;18&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;19&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;20&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;21&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;22&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;23&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;24&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;25&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;26&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;27&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;28&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;29&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;30&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;31&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;32&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;33&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;34&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;35&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;36&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;37&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;38&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;39&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;40&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;41&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;42&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;43&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;44&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;45&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;46&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;47&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;48&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;49&quot;;&#xD;&#xA;IF(OR(global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_ID_zz_ss=&quot;00_99&quot;;ISERROR(STORE(&quot;LCC_HOP_CNT&quot;;global_find(id=RETRIEVE(&quot;LCC_HOP_CNT&quot;;&quot;LOG_NONE&quot;)).CA_PROFINET_lcc_id)));&#xD;&#xA;&quot;50&quot;;&#xD;&#xA;&quot;51&quot;)))))))))))))))))))))))))))))))))))))))))))))))))))" comment="Number of ProfiNET components till master cabinet is reached." />
  <calculated_attribute family="GEN" id="CA_PROFINET_IO_AVAILABLE" used_by="CLP" expression="=IF(OR(family=&quot;SAFE&quot;;parent(integration_level=&quot;area&quot;).family=&quot;SAFE&quot;);&#xD;&#xA;IF(RIGHT(.child(element_name=&quot;addressing&quot;).id;4)=&quot;ring&quot;;&#xD;&#xA;    /* Part of the ProfiNET Redundant loop ring topo*/ &#xD;&#xA;    /* Redundant loop only on area objects */ &#xD;&#xA;&quot;      A(    ; &#xD;&#xA;      A     &quot;&quot;DB_System_Control&quot;&quot;.&quot; &amp; IFERROR(global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id).mark_code) &amp; &quot;_&quot; &amp; global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id).CA_ID_aa_zz_oo &amp; &quot;.IO_Available; &#xD;&#xA;      AN    &quot; &amp; RETRIEVE(&quot;IO_Avail_&quot; &amp; .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id &amp; &quot;_PN_NotPrsnt&quot;) &amp; &quot;; &#xD;&#xA;      O     ; &#xD;&#xA;      A     &quot;&quot;DB_System_Control&quot;&quot;.&quot; &amp; IFERROR(global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id).mark_code) &amp; &quot;_&quot; &amp; global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id).CA_ID_aa_zz_oo &amp; &quot;.IO_Available; &#xD;&#xA;      AN    &quot; &amp; RETRIEVE(&quot;IO_Avail_&quot; &amp; .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id &amp; &quot;_PN_NotPrsnt&quot;) &amp; &quot;; &#xD;&#xA;      )      ; &quot;&#xD;&#xA;;&#xD;&#xA;	/* Part of the line / start topo of ProfiNET */&#xD;&#xA;    /* Can be connected to zone section or objects */&#xD;&#xA;    &quot;      A     &quot;&quot;DB_System_Control&quot;&quot;.&quot; &amp; IFERROR(global_find(id=.CA_PROFINET_lcc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;global_find(id=.CA_PROFINET_lcc_id).mark_code) &amp; &quot;_&quot; &amp; global_find(id=.CA_PROFINET_lcc_id).CA_ID_aa_zz_oo &amp; &quot;.IO_Available; &#xD;&#xA;      AN    &quot; &amp; RETRIEVE(&quot;IO_Avail_&quot; &amp; .CA_PROFINET_lcc_id &amp; &quot;_PN_NotPrsnt&quot;) &amp; &quot;; &quot; &#xD;&#xA;  );&#xD;&#xA;IF(RIGHT(.child(element_name=&quot;addressing&quot;).id;4)=&quot;ring&quot;;&#xD;&#xA;    /* Part of the ProfiNET Redundant loop ring topo*/ &#xD;&#xA;    /* Redundant loop only on area objects */ &#xD;&#xA;&quot;      A(    ; &#xD;&#xA;      A     &quot;&quot;DB_System_Control&quot;&quot;.&quot; &amp; IFERROR(global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id).mark_code) &amp; &quot;_&quot; &amp; global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id).CA_ID_zz_ss &amp; &quot;.IO_Available; &#xD;&#xA;      AN    &quot; &amp; RETRIEVE(&quot;IO_Avail_&quot; &amp; .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[0].lcc_id &amp; &quot;_PN_NotPrsnt&quot;) &amp; &quot;; &#xD;&#xA;      O     ; &#xD;&#xA;      A     &quot;&quot;DB_System_Control&quot;&quot;.&quot; &amp; IFERROR(global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id).mark_code) &amp; &quot;_&quot; &amp; global_find(id=.child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id).CA_ID_zz_ss &amp; &quot;.IO_Available; &#xD;&#xA;      AN    &quot; &amp; RETRIEVE(&quot;IO_Avail_&quot; &amp; .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;asi&quot;)))[1].lcc_id &amp; &quot;_PN_NotPrsnt&quot;) &amp; &quot;; &#xD;&#xA;      )      ; &quot;&#xD;&#xA;;&#xD;&#xA;	/* Part of the line / start topo of ProfiNET */&#xD;&#xA;    /* Can be connected to zone section or objects */&#xD;&#xA;    &quot;      A     &quot;&quot;DB_System_Control&quot;&quot;.&quot; &amp; IFERROR(global_find(id=.CA_PROFINET_lcc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation;global_find(id=.CA_PROFINET_lcc_id).mark_code) &amp; &quot;_&quot; &amp; global_find(id=.CA_PROFINET_lcc_id).CA_ID_zz_ss &amp; &quot;.IO_Available; &#xD;&#xA;      AN    &quot; &amp; RETRIEVE(&quot;IO_Avail_&quot; &amp; .CA_PROFINET_lcc_id &amp; &quot;_PN_NotPrsnt&quot;) &amp; &quot;; &quot; &#xD;&#xA;  ))" comment="Generate code for IO_Available of parent node. Also take in account the redundant loop of ProfiNET" />
  <calculated_attribute family="GEN" id="CA_PROFINET_lcc_id" used_by="CLP" expression="=IFERROR(&#xD;&#xA;    .child(AND(element_name=&quot;addressing&quot;;LEFT(id;5)=&quot;PN_P1&quot;))[0].lcc_id;&#xD;&#xA;    IFERROR(&#xD;&#xA;        .lcc_id;&#xD;&#xA;        .child(AND(element_name=&quot;addressing&quot;;NOT(LEFT(id;3)=&quot;ASi&quot;)))[0].lcc_id&#xD;&#xA;    )&#xD;&#xA;)/* First try to find the lcc_id on &lt;addressing&gt;, if fails try to find the lcc_id on &lt;isc&gt;. If all fails, get the lcc_id from any &lt;addressing&gt; not being a ASi node */" comment="Get lcc_id value from isc level(old) or addressing level(new), or return #ERROR" />
  <calculated_attribute family="GEN" id="CA_SET_DefaultPecOffset" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_DefaultPecOffset_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_DefaultOpenWindow" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_DefaultOpenWindow_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_DefaultCloseWindow" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_DefaultCloseWindow_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_BasicMinimumGap" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumGap_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_BasicAddGapStop" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicAddGapStop_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_BasicMinimumH2H" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicMinimumH2H_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_BasicAddH2HStop" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_BasicAddH2HStop_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SET_BasicMinimumGap_GEN" used_by="CLP" expression="=30" />
  <calculated_attribute family="GEN" id="CA_SET_BasicAddGapStop_GEN" used_by="CLP" expression="=0" />
  <calculated_attribute family="GEN" id="CA_SET_BasicMinimumH2H_GEN" used_by="CLP" expression="=0" />
  <calculated_attribute family="GEN" id="CA_SET_BasicAddH2HStop_GEN" used_by="CLP" expression="=0" />
  <calculated_attribute family="GEN" id="CA_SET_PEC_Blockage_Length" used_by="CLP" expression="=IFERROR(&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;CRA&quot;; /*Entry is of &quot;CRA&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_CRA; /*Use CA from &quot;CRA&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;GEN&quot;; /*Entry is of &quot;GEN&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_GEN; /*Use CA from &quot;GEN&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;RAW&quot;; /*Entry is of &quot;RAW&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_RAW; /*Use CA from &quot;RAW&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;SAFE&quot;; /*Entry is of &quot;SAFE&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_SAFE; /*Use CA from &quot;SAFE&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;SBA&quot;; /*Entry is of &quot;SBA&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_SBA; /*Use CA from &quot;SBA&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;SHE&quot;; /*Entry is of &quot;SHE&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_SHE; /*Use CA from &quot;SHE&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;TTT&quot;; /*Entry is of &quot;TTT&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_TTT; /*Use CA from &quot;TTT&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_CRA&quot;; /*Entry is of &quot;PRJ_CRA&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_CRA; /*Use CA from &quot;PRJ_CRA&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_GEN&quot;; /*Entry is of &quot;PRJ_GEN&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_GEN; /*Use CA from &quot;PRJ_GEN&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_RAW&quot;; /*Entry is of &quot;PRJ_RAW&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_RAW; /*Use CA from &quot;PRJ_RAW&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_SAFE&quot;; /*Entry is of &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_SAFE; /*Use CA from &quot;PRJ_SAFE&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_SBA&quot;; /*Entry is of &quot;PRJ_SBA&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_SBA; /*Use CA from &quot;PRJ_SBA&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_SHE&quot;; /*Entry is of &quot;PRJ_SHE&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_SHE; /*Use CA from &quot;PRJ_SHE&quot; family*/&#xD;&#xA;	IF(.parent(integration_level=&quot;zone&quot;).family=&quot;PRJ_TTT&quot;; /*Entry is of &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		CA_SET_PEC_Blockage_Length_PRJ_TTT; /*Use CA from &quot;PRJ_TTT&quot; family*/&#xD;&#xA;		))))))))))))));&quot;#ERROR_Family_Not_Defined&quot;)" />
  <calculated_attribute family="GEN" id="CA_SNIPPET_GROUP_SAFETY" used_by="CLP" expression="=12 + (0*(COUNTIF(parent(integration_level=&quot;area&quot;).child(AND(mark_code=&quot;CCC&quot;;OR(function=&quot;01&quot;;function=&quot;02&quot;;function=&quot;03&quot;;function=&quot;16&quot;))).;TRUE)*200)) /* Offset calculation for determining next 'NETWORK' */&#xD;&#xA;	+ (IFERROR( /* Offset calculation for determining next 'CCC' */&#xD;&#xA;    			IF(AND(mark_code=&quot;CCC&quot;;OR(function=&quot;01&quot;;function=&quot;02&quot;;function=&quot;03&quot;;function=&quot;16&quot;));&#xD;&#xA;				COUNTIF(prev(AND(mark_code=&quot;CCC&quot;;OR(function=&quot;01&quot;;function=&quot;02&quot;;function=&quot;03&quot;;function=&quot;16&quot;))).;TRUE)+1;&#xD;&#xA;				COUNTIF(prev(AND(mark_code=&quot;CCC&quot;;OR(function=&quot;01&quot;;function=&quot;02&quot;;function=&quot;03&quot;;function=&quot;16&quot;))).;TRUE));&#xD;&#xA;			1) * 200)&#xD;&#xA;&#xD;&#xA;/* Offset calculation for networks based on number of main/slave controls cabinets absed on following formula:&#xD;&#xA;	&lt;OFFSET&gt; + (&lt;NETWORK&gt; * (Total number of 'CCC' * &lt;CCC&gt;)) + ('CCC' index number * &lt;CCC&gt;)&#xD;&#xA;	&#xD;&#xA;	&lt;OFFSET&gt;	= Offset to next entry Eg. 1=Comment/Header, 2=Entry/Item, 3=S7 Code/Footer&#xD;&#xA;	&lt;NETWORK&gt;	= Offset to next 'NETWORK' Offset=0 is first network 'BA:...', Offset=1 is second network 'CA:...'&#xD;&#xA;	&lt;CCC&gt;		= Offset to next 'CCC' &#xD;&#xA;*/&#xD;&#xA;" comment="Snippet group safety OK" />
  <calculated_attribute family="GEN" id="CA_START_STOP_GROUP_IDENTIFIER" used_by="CLP" expression="=child(UF_DelimitedData(id;&quot;.&quot;;3)=&quot;01&quot;).child(element_name=&quot;controls&quot;).start_stop_group" comment="This CA us used to identify the start_stop_group of the first section of any zone be it RAWor TTT" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_AddressOffset" used_by="CD1" expression="=IF(&#xD;&#xA;    AND(NOT(ISERROR(parent(integration_level=&quot;object&quot;).id));parent(integration_level=&quot;object&quot;).mark_code=&quot;GCO&quot;;parent(integration_level=&quot;object&quot;).function=&quot;01&quot;);&#xD;&#xA;    IF(&#xD;&#xA;        parent.mark_code=&quot;APU&quot;;&#xD;&#xA;        0.2; /* fix address_offset for APU */&#xD;&#xA;        IF(&#xD;&#xA;            parent.mark_code=&quot;PEC&quot;;&#xD;&#xA;            IF(&#xD;&#xA;                ISERROR(prev(AND(CA_SYMBOL_StartAddress=.CA_SYMBOL_StartAddress;prefix=.prefix;parent.mark_code=&quot;PEC&quot;)).address);&#xD;&#xA;                &quot;0.0&quot;; /* address offset 0.0 for first PEC of APU */&#xD;&#xA;                0.1 /* address offset 0.1 for second PEC of APU */&#xD;&#xA;            );&#xD;&#xA;            0.3 /* address offset 0.3 for spare input of APU */&#xD;&#xA;        )&#xD;&#xA;    );&#xD;&#xA;    IF(&#xD;&#xA;        ISERROR(prev(AND(&#xD;&#xA;            				element_name=&quot;symbol&quot;;  /* looking for previous element 'symbol' */&#xD;&#xA;            				prefix=.prefix; /* with the same prefix */&#xD;&#xA;            				LEFT(parent.id;11)=LEFT(.parent.id;11); /* and same AZS */&#xD;&#xA;            				parent.index=.parent.index /* and same index */&#xD;&#xA;						)).address);&#xD;&#xA;        &quot;0.0&quot;; /* initial value of address_offset */&#xD;&#xA;       	FIXED(prev(AND(&#xD;&#xA;           			element_name=&quot;symbol&quot;;&#xD;&#xA;       				prefix=.prefix;&#xD;&#xA;       				LEFT(parent.id;11)=LEFT(.parent.id;11);&#xD;&#xA;   					parent.index=.parent.index&#xD;&#xA;		)).address_offset + /* previous address_offset */&#xD;&#xA;		IF(&#xD;&#xA;    		RIGHT(prev(AND(&#xD;&#xA;           			element_name=&quot;symbol&quot;;&#xD;&#xA;       				prefix=.prefix;&#xD;&#xA;       				LEFT(parent.id;11)=LEFT(.parent.id;11);&#xD;&#xA;   					parent.index=.parent.index&#xD;&#xA;			)).address_offset;2)=&quot;.7&quot;; /* check if previous address_offset ends with &quot;.7&quot; */&#xD;&#xA;			0.3; /* increment address_offset by 0.3 (e.g. from 0.7 to 1.0) */&#xD;&#xA;			0.1 /* increment address_offset by 0.1 */&#xD;&#xA;		);1;TRUE)&#xD;&#xA;   )&#xD;&#xA;)" comment="Calculate address_offset for element 'symbol'" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_Address" used_by="CD1" expression="=FIXED(CA_SYMBOL_StartAddress/10 + address_offset + 0.4;1;TRUE)" comment="Calculating the symbolic address for components connected to ASi network" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_AddressFreqController" used_by="CD1" expression="=FIXED(parent(integration_level=&quot;section&quot;).child(OR(mark_code=&quot;LMS&quot;;mark_code=&quot;FMC&quot;)).child(element_name=&quot;addressing&quot;).start_address + address_offset;1;TRUE)" comment="Calculating the symbolic address for components connected to frequency controller." />
  <calculated_attribute family="GEN" id="CA_SYMBOL_Comment" used_by="CD1" expression="=IFERROR(parent.comment;IFERROR(parent.function_description;&quot;&quot;))" comment="Calculating the symbolic address for components connected to ASi network" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID" used_by="CD1" expression="=IF(ISERROR(parent.function_abbreviation); /* IF the parent doesn't have the attribute functional_abbreviation */&#xD;&#xA;	&quot;#ERROR_No_function_abbreviation_available_at_parent&quot;; /* THEN no functional abbreviation information is available and the symbol cannot be made */&#xD;&#xA;	IF(LEN(prefix &amp; CA_CFG_Delimiter_SYMBOL &amp; (parent.CA_ID_Zone &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.CA_ID_Section &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.CA_ID_Element) &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.mark_code &amp; CA_CFG_Delimiter_SYMBOL &amp; IFERROR(UF_DelimitedData(parent.function_abbreviation;CA_CFG_Delimiter_FUNCTION_ABBREVIATION;IFERROR(COUNTIF(prev(AND(element_name=&quot;symbol&quot;;parent.id=.parent.id)).;TRUE)+1;1));parent.function_abbreviation))&gt;CA_CFG_MaxLength_SYMBOL; /* IF length of the symbol is longer than the configuration */&#xD;&#xA;		&quot;#ERROR_resulting_symbolic_name_is_too_long&quot;; /* THEN the naming is too long */&#xD;&#xA;		prefix &amp; CA_CFG_Delimiter_SYMBOL &amp; (parent.CA_ID_Zone &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.CA_ID_Section &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.CA_ID_Element) &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.mark_code &amp; CA_CFG_Delimiter_SYMBOL &amp; IFERROR(UF_DelimitedData(parent.function_abbreviation;CA_CFG_Delimiter_FUNCTION_ABBREVIATION;IFERROR(COUNTIF(prev(AND(element_name=&quot;symbol&quot;;parent.id=.parent.id)).;TRUE)+1;1));parent.function_abbreviation)))" comment="Formula to construct symbolic ID in the following format: &lt;prefix&gt;_&lt;ZZ&gt;_&lt;SS/OO&gt;_&lt;EEE&gt;_&lt;mark_code&gt;_&lt;function_abbreviation&gt;" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_Prefix" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_SYMBOL;1)" comment="Prefix part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_Zone" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_SYMBOL;2)" comment="Zone part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_Section" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_SYMBOL;3)" comment="Section part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_Element" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_SYMBOL;4)" comment="Element part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_Object" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_SYMBOL;3)" comment="Object part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_Markcode" used_by="GEN" expression="=UF_DelimitedData(id;CA_CFG_Delimiter_SYMBOL;5)" comment="Markcode part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_ID_FunctionalAbbreviation" used_by="GEN" expression="=RIGHT(id;LEN(id)-UF_DelimiterPosition(id;CA_CFG_Delimiter_SYMBOL;5))" comment="Functional Abbreviation part of the id attribute from the symbol" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_IDShort" used_by="CD1" expression="=IF(ISERROR(parent.function_abbreviation); /* IF the parent doesn't have the attribute functional_abbreviation */&#xD;&#xA;	&quot;#ERROR_No_function_abbreviation_available_at_parent&quot;; /* THEN no functional abbreviation information is available and the symbol cannot be made */&#xD;&#xA;	IF(LEN(prefix &amp; CA_CFG_Delimiter_SYMBOL &amp; (parent.CA_ID_Zone &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.CA_ID_Section) &amp; CA_CFG_Delimiter_SYMBOL &amp; IFERROR(UF_DelimitedData(parent.function_abbreviation;CA_CFG_Delimiter_FUNCTION_ABBREVIATION;IFERROR(COUNTIF(prev(AND(element_name=&quot;symbol&quot;;parent.id=.parent.id)).;TRUE)+1;1));parent.function_abbreviation))&gt;CA_CFG_MaxLength_SYMBOL; /* IF length of the symbol is longer than the configuration */&#xD;&#xA;		&quot;#ERROR_resulting_symbolic_name_is_too_long&quot;; /* THEN the naming is too long */&#xD;&#xA;		prefix &amp; CA_CFG_Delimiter_SYMBOL &amp; (parent.CA_ID_Zone &amp; CA_CFG_Delimiter_SYMBOL &amp; parent.CA_ID_Section) &amp; CA_CFG_Delimiter_SYMBOL &amp; IFERROR(UF_DelimitedData(parent.function_abbreviation;CA_CFG_Delimiter_FUNCTION_ABBREVIATION;IFERROR(COUNTIF(prev(AND(element_name=&quot;symbol&quot;;parent.id=.parent.id)).;TRUE)+1;1));parent.function_abbreviation)))" comment="Formula to construct symbolic ID in the following format: &lt;prefix&gt;_&lt;ZZ&gt;_&lt;SS/OO&gt;_&lt;function_abbreviation&gt;" />
  <calculated_attribute family="GEN" id="CA_SYMBOL_StartAddress" used_by="CD1" expression="=IF(OR(ISERROR(prev(element_name=&quot;addressing&quot;).asi_channel);prev(element_name=&quot;addressing&quot;).asi_channel=&quot;&quot;;&#xD;&#xA;    NOT(IFERROR(prev(element_name=&quot;addressing&quot;).parent.child(AND(element_name=&quot;addressing&quot;;OR(LEFT(id;4)=&quot;PN_P&quot;;id=&quot;0&quot;))).profinet_device_number=&quot;&quot;;TRUE))); /* IF equipment NOT connected to ASi Gateway or ASi Repeater */&#xD;&#xA;&#xD;&#xA;	/* THEN get Profinet start_address_as_build when present otherwise start_address and multiply times 10 */&#xD;&#xA;	IF(IFERROR(OR(&#xD;&#xA;		parent(integration_level=&quot;zone&quot;).mark_code=&quot;SVD&quot;; /* IF Profinet symbol is part of SVD, MVD, VCZ or VDZ */&#xD;&#xA;        parent(integration_level=&quot;zone&quot;).mark_code=&quot;MVD&quot;;&#xD;&#xA;        parent(integration_level=&quot;zone&quot;).mark_code=&quot;VCZ&quot;;&#xD;&#xA;        parent(integration_level=&quot;zone&quot;).mark_code=&quot;VDZ&quot;);FALSE);&#xD;&#xA;		/* THEN get Profinet start_address_as_build when present otherwise Profinet start_address from local cabinet */&#xD;&#xA;		(IFERROR(parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;mark_code=&quot;FBM&quot;;function=&quot;02&quot;)).child(element_name=&quot;addressing&quot;).start_address_as_build;parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;mark_code=&quot;FBM&quot;;function=&quot;02&quot;)).child(element_name=&quot;addressing&quot;).start_address) * 10)-4;&#xD;&#xA;		/* ELSE get previous Profinet start_address_as_build when present otherwise previous Profinet start_address */&#xD;&#xA;		(IFERROR(prev(AND(element_name=&quot;addressing&quot;;NOT(ISERROR(start_address)))).start_address_as_build;prev(AND(element_name=&quot;addressing&quot;;NOT(ISERROR(start_address)))).start_address) * 10)-4);&#xD;&#xA;&#xD;&#xA;	/* ELSE get ASi start_address_as_build when present otherwise ASi start_address */&#xD;&#xA;    IF(IFERROR(parent(integration_level=&quot;zone&quot;).mark_code=&quot;CIZ&quot;;FALSE); /* IF ASi symbol is part of CIZ */&#xD;&#xA;    	/* THEN calculate ASi symbol address and use ASi start_address_as_build when present otherwise ASi start_address from ASi element with identical index */&#xD;&#xA;    	(IFERROR(parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).start_address_as_build;parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).start_address) * 10) &#xD;&#xA;		+ ((parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_channel - 1) * 160) &#xD;&#xA;		+ (FLOOR((IFERROR(parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address;parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address) / 2);1) * 10) &#xD;&#xA;		+ (((IFERROR(parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address;parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address) - (FLOOR((IFERROR(parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address_as_build;parent(integration_level=&quot;zone&quot;).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address) / 2);1)*2))*-1)*4);&#xD;&#xA;		/* ELSE calculate ASi symbol address and use ASi start_address_as_build when present otherwise ASi start_address from ASi element with identical index */&#xD;&#xA;		(IFERROR(parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).start_address_as_build;parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).start_address) * 10) &#xD;&#xA;		+ ((parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_channel - 1) * 160) &#xD;&#xA;		+ (FLOOR((IFERROR(parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address;parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address) / 2);1) * 10) &#xD;&#xA;		+ (((IFERROR(parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address;parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address) - (FLOOR((IFERROR(parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address_as_build;parent(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;)).child_find(AND(index=.parent.index;OR(mark_code=&quot;ASI&quot;;mark_code=&quot;LMS&quot;;mark_code=&quot;APU&quot;;mark_code=&quot;ACM&quot;))).child(element_name=&quot;addressing&quot;).asi_slave_address) / 2);1)*2))*-1)*4)))&#xD;&#xA;" />
  <user_function family="GEN" id="UF_ConvertDegreeToRadians" used_by="GEN" function_type="user_function" expression="=PA_Attribute * (3.141592654/180) /* 180 degrees equals PI radians */" comment="DESCRIPTION: &#xD;&#xA;Convert the supplied attribute or value from degrees to radians which can be used for the (A)SIN, (A)COS and (A)TAN expression functions &#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;Attribute is present and contains an angle in degrees&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Returns the converted value in radians with an accurracy of up to 9 digits &#xD;&#xA;&#xD;&#xA;EXAMPLE: angle2=&quot;90&quot;&#xD;&#xA;   UF_ConvertDegreeToRadians(&quot;180&quot;)=3.141592654&#xD;&#xA;   UF_ConvertDegreeToRadians(angle2)=1.570796327">
    <parameter id="PA_Attribute" comment="Attribute to be converted" />
  </user_function>
  <user_function family="GEN" id="UF_DB_TEP_TOP" used_by="CLP" function_type="user_function" expression="=IF(PA_CFG_Downstream=&quot;TRUE&quot;; /* Check if the downstream connection is required */&#xD;&#xA;	IF(mark_code=&quot;HOO&quot;; /* Check if the component is a HOO */&#xD;&#xA;		IF(NOT(ISERROR(next(id=.child(element_name=&quot;cif&quot;).isc_id).id)); /* Check if it is the receiving side */&#xD;&#xA;			IF(RIGHT(global_find(id=.child(element_name=&quot;cif&quot;).isc_id).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; global_find(id=.child(element_name=&quot;cif&quot;).isc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; global_find(id=.child(element_name=&quot;cif&quot;).isc_id).CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension; /* Receiving side, connect to the downstream transport section */&#xD;&#xA;			&quot;&quot;); /* Sending side, no action required */&#xD;&#xA;		IF(ISERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).id); /* Check if there is a handover to an downstream area */&#xD;&#xA;			IF(NOT(ISERROR(global_find(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).id)); /* Check if there is a HOO available which communicates with the downstream area */&#xD;&#xA;				IF(RIGHT(family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; global_find(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; global_find(AND(mark_code=&quot;HOO&quot;;child(element_name=&quot;cif&quot;).isc_id=.id)).CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension; /* Connect to the HOO */&#xD;&#xA;				&quot;0&quot;); /* No HOO present, connect default value */&#xD;&#xA;			IF(NOT(ISERROR(route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;05&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).id)); /* Check if there is a downstream transport section with  'advance dieback TEP TOP Manager' */&#xD;&#xA;				IF(integration_level=&quot;zone&quot;;&quot;&quot;&quot;DB_Int_Prog_Zone&quot;&quot;.&quot;&amp; mark_code &amp; &quot;_&quot; &amp; CA_ID_zz_ss &amp;&quot;.TEP_Downstream&quot;; /* connect DB_Int_Prog_Zone.XXX_ZZ_SS.TEP_Downstream where XXX is de mark code of the zone */ &#xD;&#xA;				IF(integration_level=&quot;section&quot;;&quot;&quot;&quot;DB_Int_Prog_Zone&quot;&quot;.&quot;&amp; parent(integration_level=&quot;zone&quot;).mark_code &amp; &quot;_&quot; &amp;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss &amp;&quot;.TEP_Downstream&quot;;&quot;0&quot;)); /* connect DB_Int_Prog_Zone.XXX_ZZ_SS.TEP_Downstream where XXX is de mark code of the zone */&#xD;&#xA;				IF(NOT(ISERROR(.child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;03&quot;)).id)); /* Check if there is an 'advanced dieback sort node' available */&#xD;&#xA;					IF(RIGHT(family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; RIGHT(.child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;03&quot;)).mark_code;3) &amp; &quot;_&quot; &amp; .child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;03&quot;)).CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension; /* Connect to advanced dieback sort node */&#xD;&#xA;					IF(NOT(ISERROR(route_find(AND(integration_level=&quot;section&quot;;OR(NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id));NOT(ISERROR(child(OR(mark_code=&quot;SW_TT&quot;;mark_code=&quot;SW_EOC&quot;)).id))));&quot;downstream&quot;;&quot;end_or_single&quot;).id)); /* Check if there is a downstream transport section with TEP/TOP or 'advanced dieback merge node' */&#xD;&#xA;						IF(NOT(ISERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).child(OR(mark_code=&quot;SW_TT&quot;;mark_code=&quot;SW_EOC&quot;)).id)); /* Check if there is a downstream transport section with TEP/TOP */&#xD;&#xA;							IF(NOT(ISERROR(global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;01&quot;)).id)); /* Check if there is a 'advanced dieback detection node' available on the downstream transport section */&#xD;&#xA;								IF(RIGHT(global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; RIGHT(.global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;01&quot;)).mark_code;3) &amp; &quot;_&quot; &amp; .global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;01&quot;)).CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension; /* Connect to the 'advanced dieback detection node' on the downstream transport section */&#xD;&#xA;								IF(RIGHT(global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; global_find(id=.child(AND(element_name=&quot;fif&quot;;LEFT(id;10)=&quot;downstream&quot;;position=&quot;100&quot;)).isc_id).CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension); /* Connect to the downstream transport section */&#xD;&#xA;							IF(NOT(ISERROR(route_find(AND(integration_level=&quot;section&quot;;OR(NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id));NOT(ISERROR(child(OR(mark_code=&quot;SW_TT&quot;;mark_code=&quot;SW_EOC&quot;)).id))));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)); /* Check if it concerns an 'advanced dieback merge node' */&#xD;&#xA;								IF(NOT(ISERROR(global_find(AND(parent(integration_level=&quot;zone&quot;).mark_code=&quot;MGZ&quot;;element_name=&quot;fif&quot;;isc_id=.route_find(AND(integration_level=&quot;section&quot;;CA_FIF_DownstreamZoneMarkcode=&quot;MGZ&quot;);&quot;downstream&quot;;&quot;end_or_single&quot;).id)).position));&#xD;&#xA;									IF(global_find(AND(parent(integration_level=&quot;zone&quot;).mark_code=&quot;MGZ&quot;;element_name=&quot;fif&quot;;isc_id=.route_find(AND(integration_level=&quot;section&quot;;CA_FIF_DownstreamZoneMarkcode=&quot;MGZ&quot;);&quot;downstream&quot;;&quot;end_or_single&quot;).id)).position&gt;5;&#xD;&#xA;										IF(RIGHT(route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; RIGHT(.route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).mark_code;3) &amp; &quot;_&quot; &amp; .route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).CA_ID_zz_ss &amp; &quot;_Dir2.&quot; &amp; PA_Extension;&#xD;&#xA;										IF(RIGHT(route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; RIGHT(.route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).mark_code;3) &amp; &quot;_&quot; &amp; .route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).CA_ID_zz_ss &amp; &quot;_Dir1.&quot; &amp; PA_Extension);&#xD;&#xA;									IF(global_find(AND(parent(integration_level=&quot;zone&quot;).mark_code=&quot;MGZ&quot;;element_name=&quot;fif&quot;;isc_id=.id)).position&gt;5;&#xD;&#xA;										IF(RIGHT(route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; RIGHT(.route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).mark_code;3) &amp; &quot;_&quot; &amp; .route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).CA_ID_zz_ss &amp; &quot;_Dir2.&quot; &amp; PA_Extension;&#xD;&#xA;										IF(RIGHT(route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; RIGHT(.route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).mark_code;3) &amp; &quot;_&quot; &amp; .route_find(AND(integration_level=&quot;section&quot;;NOT(ISERROR(child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).id)));&quot;downstream&quot;;&quot;end_or_single&quot;).child(AND(mark_code=&quot;SW_ADN&quot;;function=&quot;02&quot;)).CA_ID_zz_ss &amp; &quot;_Dir1.&quot; &amp; PA_Extension)); /* Connect to advanced dieback merge node */&#xD;&#xA;								&quot;0&quot;)); /* First transport section with TEP/TOP, connect default value */&#xD;&#xA;					&quot;0&quot;))))); /* First transport section with TEP/TOP, connect default value */&#xD;&#xA;	IF(mark_code=&quot;HOO&quot;; /* Check if the component is a HOO */&#xD;&#xA;		IF(RIGHT(global_find(id=.child(element_name=&quot;cif&quot;).isc_id).family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension; /* Use the family of the transport section for generation */&#xD;&#xA;		IF(RIGHT(family;3)=&quot;TTT&quot;;&quot;&quot;&quot;DB_TEP_TOP_T&quot;&quot;.&quot;;&quot;&quot;&quot;DB_TEP_TOP&quot;&quot;.&quot;) &amp; .child(mark_code=&quot;SW_EQP&quot;).function_abbreviation &amp; &quot;_&quot; &amp; CA_ID_zz_ss &amp; &quot;.&quot; &amp; PA_Extension)) /* Use own family for generation */" comment="DESCRIPTION: &#xD;&#xA;Generates the software block interface for 'DB_TEP_TOP(_T)' based on subsystem_type&#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;The config and extension parameters are available&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Complete string that should be coupled to the software block interface&#xD;&#xA;&#xD;&#xA;EXAMPLE: &#xD;&#xA;   UF_DB_TEP_TOP(TRUE;&quot;TEP&quot;)=&quot;DB_TEP_TOP(_T)&quot;.TRS_zz_ss+1.TEP&#xD;&#xA;   UF_DB_TEP_TOP(TRUE;&quot;TOP&quot;)=&quot;DB_TEP_TOP(_T)&quot;.TRS_zz_ss+1.TOP&#xD;&#xA;   UF_DB_TEP_TOP(FALSE;&quot;TEP&quot;)=&quot;DB_TEP_TOP(_T)&quot;.TRS_zz_ss.TEP&#xD;&#xA;   UF_DB_TEP_TOP(FALSE;&quot;TOP&quot;)=&quot;DB_TEP_TOP(_T)&quot;.TRS_zz_ss.TOP&#xD;&#xA;&#xD;&#xA;">
    <parameter id="PA_CFG_Downstream" comment="Configuration: TRUE=Downstream" />
    <parameter id="PA_Extension" comment="Extension to be added eg. TEP or TOP part of DB" />
  </user_function>
  <user_function family="GEN" id="UF_DecimalToCharacter" used_by="CLP" function_type="user_function" expression="=IF(PA_Number&lt;=32;&quot; &quot;;IF(PA_Number=33;&quot;!&quot;;IF(PA_Number=34;&quot;&quot;&quot;&quot;;IF(PA_Number=35;&quot;#&quot;;IF(PA_Number=36;&quot;$&quot;;&#xD;&#xA;	IF(PA_Number=37;&quot;%&quot;;IF(PA_Number=38;&quot;&amp;&quot;;IF(PA_Number=39;&quot;'&quot;;IF(PA_Number=40;&quot;(&quot;;IF(PA_Number=41;&quot;)&quot;;&#xD;&#xA;	IF(PA_Number=42;&quot;*&quot;;IF(PA_Number=43;&quot;+&quot;;IF(PA_Number=44;&quot;,&quot;;IF(PA_Number=45;&quot;-&quot;;IF(PA_Number=46;&quot;.&quot;;&#xD;&#xA;	IF(PA_Number=47;&quot;/&quot;;IF(PA_Number=48;&quot;0&quot;;IF(PA_Number=49;&quot;1&quot;;IF(PA_Number=50;&quot;2&quot;;IF(PA_Number=51;&quot;3&quot;;&#xD;&#xA;	IF(PA_Number=52;&quot;4&quot;;IF(PA_Number=53;&quot;5&quot;;IF(PA_Number=54;&quot;6&quot;;IF(PA_Number=55;&quot;7&quot;;IF(PA_Number=56;&quot;8&quot;;&#xD;&#xA;	IF(PA_Number=57;&quot;9&quot;;IF(PA_Number=58;&quot;:&quot;;IF(PA_Number=59;&quot;;&quot;;IF(PA_Number=60;&quot;&lt;&quot;;IF(PA_Number=61;&quot;=&quot;;&#xD;&#xA;	IF(PA_Number=62;&quot;&gt;&quot;;IF(PA_Number=63;&quot;?&quot;;IF(PA_Number=64;&quot;@&quot;;IF(PA_Number=65;&quot;A&quot;;IF(PA_Number=66;&quot;B&quot;;&#xD;&#xA;	IF(PA_Number=67;&quot;C&quot;;IF(PA_Number=68;&quot;D&quot;;IF(PA_Number=69;&quot;E&quot;;IF(PA_Number=70;&quot;F&quot;;IF(PA_Number=71;&quot;G&quot;;&#xD;&#xA;	IF(PA_Number=72;&quot;H&quot;;IF(PA_Number=73;&quot;I&quot;;IF(PA_Number=74;&quot;J&quot;;IF(PA_Number=75;&quot;K&quot;;IF(PA_Number=76;&quot;L&quot;;&#xD;&#xA;	IF(PA_Number=77;&quot;M&quot;;IF(PA_Number=78;&quot;N&quot;;IF(PA_Number=79;&quot;O&quot;;IF(PA_Number=80;&quot;P&quot;;IF(PA_Number=81;&quot;Q&quot;;&#xD;&#xA;	IF(PA_Number=82;&quot;R&quot;;IF(PA_Number=83;&quot;S&quot;;IF(PA_Number=84;&quot;T&quot;;IF(PA_Number=85;&quot;U&quot;;IF(PA_Number=86;&quot;V&quot;;&#xD;&#xA;	IF(PA_Number=87;&quot;W&quot;;IF(PA_Number=88;&quot;X&quot;;IF(PA_Number=89;&quot;Y&quot;;IF(PA_Number=90;&quot;Z&quot;;IF(PA_Number=91;&quot;[&quot;;&#xD;&#xA;	IF(PA_Number=92;&quot;\&quot;;IF(PA_Number=93;&quot;]&quot;;IF(PA_Number=94;&quot;^&quot;;IF(PA_Number=95;&quot;_&quot;;IF(PA_Number=96;&quot;`&quot;;&#xD;&#xA;	IF(PA_Number=97;&quot;a&quot;;IF(PA_Number=98;&quot;b&quot;;IF(PA_Number=99;&quot;c&quot;;IF(PA_Number=100;&quot;d&quot;;IF(PA_Number=101;&quot;e&quot;;&#xD;&#xA;	IF(PA_Number=102;&quot;f&quot;;IF(PA_Number=103;&quot;g&quot;;IF(PA_Number=104;&quot;h&quot;;IF(PA_Number=105;&quot;i&quot;;IF(PA_Number=106;&quot;j&quot;;&#xD;&#xA;	IF(PA_Number=107;&quot;k&quot;;IF(PA_Number=108;&quot;l&quot;;IF(PA_Number=109;&quot;m&quot;;IF(PA_Number=110;&quot;n&quot;;IF(PA_Number=111;&quot;o&quot;;&#xD;&#xA;	IF(PA_Number=112;&quot;p&quot;;IF(PA_Number=113;&quot;q&quot;;IF(PA_Number=114;&quot;r&quot;;IF(PA_Number=115;&quot;s&quot;;IF(PA_Number=116;&quot;t&quot;;&#xD;&#xA;	IF(PA_Number=117;&quot;u&quot;;IF(PA_Number=118;&quot;v&quot;;IF(PA_Number=119;&quot;w&quot;;IF(PA_Number=120;&quot;x&quot;;IF(PA_Number=121;&quot;y&quot;;&#xD;&#xA;	IF(PA_Number=122;&quot;z&quot;;IF(PA_Number=123;&quot;{|&quot;;IF(PA_Number=124;&quot;|&quot;;IF(PA_Number=125;&quot;}&quot;;IF(PA_Number=126;&quot;~&quot;;&quot; &quot;&#xD;&#xA;	)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))" comment="DESCRIPTION: &#xD;&#xA;Convert the decimal value to ASCII characters (keyboard characters only)&#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;Decimal value between 0 and 127&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Returns ASCII character for value's from 32 to 127. In other cases returns&#xD;&#xA;'Space' character&#xD;&#xA;&#xD;&#xA;EXAMPLE: &#xD;&#xA;	UF_DecimalToCharacter(25)=' '&#xD;&#xA;	UF_DecimalToCharacter(35)='#'&#xD;&#xA;	UF_DecimalToCharacter(51)='3'&#xD;&#xA;	UF_DecimalToCharacter(65)='A'&#xD;&#xA;	UF_DecimalToCharacter(106)='j'&#xD;&#xA;	UF_DecimalToCharacter(122)='z'&#xD;&#xA;	UF_DecimalToCharacter(127)=' '">
    <parameter id="PA_Number" comment="Number to be converted into ASCII character" />
  </user_function>
  <user_function family="GEN" id="UF_DecisionPointConstraint" used_by="CLP" function_type="user_function" expression="=IF(AND(NOT(ISERROR(integration_level));integration_level&lt;&gt;&quot;area&quot;);&#xD;&#xA;	IF(integration_level=&quot;zone&quot;;&#xD;&#xA;		IF(AND(NOT(ISERROR(global_find(AND(element_name=&quot;decision_point&quot;;CA_ID_zz_ss=.CA_ID_zz_ss)).child(id=PA_ParameterID).value));global_find(AND(element_name=&quot;decision_point&quot;;CA_ID_zz_ss=.CA_ID_zz_ss)).child(id=PA_ParameterID).value&lt;&gt;&quot;N/A&quot;);&#xD;&#xA;			IFERROR(global_find(AND(element_name=&quot;decision_point&quot;;CA_ID_zz_ss=.CA_ID_zz_ss)).child(id=PA_ParameterID).value*1;UPPER(global_find(AND(element_name=&quot;decision_point&quot;;CA_ID_zz_ss=.CA_ID_zz_ss)).child(id=PA_ParameterID).value));&#xD;&#xA;			&quot;0&quot;);&#xD;&#xA;		IF(AND(NOT(ISERROR(global_find(AND(element_name=&quot;decision_point&quot;;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).child(id=PA_ParameterID).value));global_find(AND(element_name=&quot;decision_point&quot;;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).child(id=PA_ParameterID).value&lt;&gt;&quot;N/A&quot;);&#xD;&#xA;			IFERROR(global_find(AND(element_name=&quot;decision_point&quot;;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).child(id=PA_ParameterID).value*1;UPPER(global_find(AND(element_name=&quot;decision_point&quot;;parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss=.parent(integration_level=&quot;zone&quot;).CA_ID_zz_ss)).child(id=PA_ParameterID).value));&#xD;&#xA;			&quot;0&quot;));	&#xD;&#xA;	&quot;&quot;)">
    <parameter id="PA_ParameterID" comment="DESCRIPTION: &#xD;&#xA;Get the 'value' of the DTD element &lt;parameter&gt; with the requested ID, from the DTD element &lt;decision_point&gt; &#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;None&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Returns the value from attribute 'value' of the requested DTD element &lt;parameter&gt; with the requested ID, &#xD;&#xA;from the DTD element &lt;decision_point&gt; in case it is NOT equal to 'N/A'. Returns an empty string in all other cases.&#xD;&#xA;&#xD;&#xA;EXAMPLE: &#xD;&#xA;   &lt;isc id=&quot;AAAA.ZZ.SS.000&quot;&gt;&#xD;&#xA;      &lt;decision_point id=&quot;AAAA.ZZ.SS.DP&quot;&gt;&#xD;&#xA;         &lt;parameter id=&quot;i_CFG_DP_Position&quot; value=&quot;200&quot;&gt;&#xD;&#xA;         &lt;parameter id=&quot;i_CFG_DP_UnSec_Not_Allow&quot; value=&quot;0&quot;&gt;&#xD;&#xA;         &lt;parameter id=&quot;i_CFG_DP_SBT_Not_Allow&quot; value=&quot;N/A&quot;&gt;&#xD;&#xA;   &lt;isc id=&quot;AAAA.ZZ.SS.000&quot;&gt;&#xD;&#xA;         &#xD;&#xA;   UF_DecisionPointConstraint(&quot;i_CFG_DP_Position&quot;)=200     [Value from parameter]&#xD;&#xA;   UF_DecisionPointConstraint(&quot;i_CFG_DP_SBT_Not_Allow&quot;)=   [Empty string due to 'N/A' value]&#xD;&#xA;   UF_DecisionPointConstraint(&quot;i_CFG_DP_NotAllow&quot;)=        [Empty string due to not available ID]" />
  </user_function>
  <user_function family="GEN" id="UF_DelimiterPosition" used_by="GEN" function_type="user_function" expression="=IF(OR((PA_Number*1)&lt;1;ISERROR(FIND(PA_Delimiter;PA_Attribute;1))); /* IF the requested position of the delimiter is lower than the first delimiter OR the delimiter is NOT available at all */ &#xD;&#xA;	0; /* THEN the returned position will be equal to zero */&#xD;&#xA;	IFERROR(FIND(&quot;¢&quot;;SUBSTITUTE(PA_Attribute;PA_Delimiter;&quot;¢&quot;;PA_Number);1);LEN(PA_Attribute))) /* ELSE the returned position will be equal to the found position or the string length when the exeding the max delimiter */" comment="REMARK:&#xD;&#xA;This user_function has to be above UF_DelimitedData because UF_DelimitedData uses this user_function.&#xD;&#xA;&#xD;&#xA;DESCRIPTION: &#xD;&#xA;Get the postion of the requested delimiter from the supplied attribute&#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;Attribute is present and only 1 delimiter is used excluding the ASCII Table 248 character&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Returns 0 if no delimiter is requested or delimiter is not found, the position of the requested delimiter, &#xD;&#xA;or the max string length if requested delimiter is not available&#xD;&#xA;&#xD;&#xA;EXAMPLE: id=&quot;AAAA.ZZ.SS.EEE&quot;&#xD;&#xA;   UF_DelimiterPosition(id;&quot;.&quot;;0)=0&#xD;&#xA;   UF_DelimiterPosition(id;&quot;.&quot;;1)=5&#xD;&#xA;   UF_DelimiterPosition(id;&quot;.&quot;;3)=11&#xD;&#xA;   UF_DelimiterPosition(id;&quot;.&quot;;8)=14">
    <parameter id="PA_Attribute" comment="Attribute to be investigated" />
    <parameter id="PA_Delimiter" comment="Delimiter to search for" />
    <parameter id="PA_Number" comment="Number or required delimiter" />
  </user_function>
  <user_function family="GEN" id="UF_DelimitedData" used_by="GEN" function_type="user_function" expression="=IF(PA_Number=0; /* IF equal to zero */&#xD;&#xA;	ERROR_Number_needs_to_be_highter_than_zero; /* THEN no data is requested &lt;SemanticError&gt; */&#xD;&#xA;	IF(UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number)=0; /* IF the returned postion is equal to zero */&#xD;&#xA;		ERROR_Delimiter_or_attribute_is_not_present; /* THEN the delimiter or the attribute is not available &lt;SemanticError&gt; */&#xD;&#xA;		IF(UF_DelimiterPosition(PA_Attribute;PA_Delimiter;(PA_Number-1))=LEN(PA_Attribute); /* IF the returned position of the previous delimiter is equal to the maximum string length */&#xD;&#xA;			ERROR_Requested_data_is_not_available; /* THEN the requested data is not available &lt;SemanticError&gt; */&#xD;&#xA;			IF(UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number)=LEN(PA_Attribute); /* IF the returned position of the delimiter is equal to the maximum string length */&#xD;&#xA;				MID(PA_Attribute;UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number-1)+1;(UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number*1)-UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number-1))); /* THEN no delimiter correction required for the return length */&#xD;&#xA;				MID(PA_Attribute;UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number-1)+1;(UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number*1)-UF_DelimiterPosition(PA_Attribute;PA_Delimiter;PA_Number-1))-1))))) /* ELSE correct the delimiter for the return length */" comment="DESCRIPTION: &#xD;&#xA;Get the data between 2 delimiters, with the requested offset, from the supplied attribute&#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;Attribute is present and only 1 delimiter is used excluding the ASCII Table 248 character&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;All data between 2 delimiters&#xD;&#xA;&#xD;&#xA;EXAMPLE: id=&quot;AAAA.ZZ.SS.EEE&quot; ==&gt; &quot;&lt;Data 1&gt;.&lt;Data 2&gt;.&lt;Data 3&gt;.&lt;Data n&gt;.&lt;Data n+1&gt;&quot;&#xD;&#xA;   UF_DelimitedData(id;&quot;.&quot;;0)=&lt;SemanticError&gt;&#xD;&#xA;   UF_DelimitedData(id;&quot;.&quot;;1)=AAAA&#xD;&#xA;   UF_DelimitedData(id;&quot;.&quot;;3)=SS&#xD;&#xA;   UF_DelimitedData(id;&quot;.&quot;;4)=EEE&#xD;&#xA;   UF_DelimitedData(id;&quot;.&quot;;8)=&lt;SemanticError&gt;&#xD;&#xA;&#xD;&#xA;NOTE:&#xD;&#xA;   The keyword 'ERROR' will trigger a &lt;SemanticError&gt; which can be used in the standard ISERROR() function">
    <parameter id="PA_Attribute" comment="Attribute to be investigated" />
    <parameter id="PA_Delimiter" comment="Delimiter to search for" />
    <parameter id="PA_Number" comment="Number or required delimited data" />
  </user_function>
  <user_function family="GEN" id="UF_ELP_SymbolicAddress" used_by="ELP" function_type="user_function" expression="=parent.child(index=PA_Index).next(AND(prefix=PA_Prefix;address_offset=PA_Offset)).address" comment="Retrieve the address of a symbol based on the index and address offset">
    <parameter id="PA_Prefix" comment="Prefix (I or Q)" />
    <parameter id="PA_Index" comment="Index" />
    <parameter id="PA_Offset" comment="Address offset" />
  </user_function>
  <user_function family="GEN" id="UF_ELP_SymbolicID" used_by="ELP" function_type="user_function" expression="=parent.child(index=PA_Index).next(AND(prefix=PA_Prefix;address_offset=PA_Offset)).id" comment="Retrieve the ID of a symbol based on the index and address offset">
    <parameter id="PA_Prefix" comment="Prefix (I or Q)" />
    <parameter id="PA_Index" comment="Index" />
    <parameter id="PA_Offset" comment="Address offset" />
  </user_function>
  <user_function family="GEN" id="UF_MappingKey" used_by="CLP" function_type="user_function" expression="=IF(PA_integration_level=&quot;element&quot;; /* IF the requested integration_level equals 'element' then the formula needs to check from the 'section' or 'object' level due too limitations of the tool */&#xD;&#xA;	NOT(ISERROR(child(AND(mark_code=PA_markcode;function=PA_function)).id)); /* Check if requested 'element' is available beneath the 'section' or 'object' */&#xD;&#xA;	IF(ISERROR(integration_level); /* ELSE IF no integration level [E.g. 'controls', 'addressing'] */&#xD;&#xA;		IF(NOT(ISERROR(parent(integration_level=PA_integration_level).id)); /* AND IF a child from the requested integration_level */&#xD;&#xA;			AND(parent(integration_level=PA_integration_level).mark_code=PA_markcode;OR(parent(integration_level=PA_integration_level).function=PA_function)); /* Return TRUE if a child from the requested mapping */&#xD;&#xA;			&quot;FALSE&quot;); /* ELSE return FALSE mapping does not match */&#xD;&#xA;		IF(NOT(ISERROR(parent(integration_level=PA_integration_level).id)); /* AND IF a child from the requested integration_level */&#xD;&#xA;			AND(parent(integration_level=PA_integration_level).mark_code=PA_markcode;OR(parent(integration_level=PA_integration_level).function=PA_function)); /* Return TRUE if a child from the requested mapping */&#xD;&#xA;			AND(mark_code=PA_markcode;function=PA_function)))) /* Return TRUE if the requested mapping */" comment="REMARK:&#xD;&#xA;None.&#xD;&#xA;&#xD;&#xA;DESCRIPTION: &#xD;&#xA;Create the 'key' for the main mapping and all items below&#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;Attributes: 'integration_level', 'mark_code' and 'function' are known&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Returns 'FALSE' in case in the wrong nesting height and 'TRUE' for the equal integration_level and below&#xD;&#xA;&#xD;&#xA;EXAMPLE: &#xD;&#xA;   key=UF_MappingKey(&quot;section&quot;;&quot;TB&quot;;&quot;01&quot;)&#xD;&#xA;   &#xD;&#xA;   SOZ11		[FALSE]&#xD;&#xA;    |- TB01		[TRUE]&#xD;&#xA;    |   |- PEC01	[TRUE]&#xD;&#xA;    |   |- LMS01	[TRUE]&#xD;&#xA;    |- TB02		[FALSE]&#xD;&#xA;    |   |- PEC01	[FALSE]&#xD;&#xA;    |   |- LMS01	[FALSE]">
    <parameter id="PA_integration_level" comment="Integration level of main mapping" />
    <parameter id="PA_markcode" comment="Markcode of the main mapping" />
    <parameter id="PA_function" comment="Function variant of the main mapping" />
  </user_function>
  <user_function family="GEN" id="UF_MOD" used_by="GEN" function_type="user_function" expression="=PA_Number - (PA_Divisor * FLOOR(PA_Number/PA_Divisor;1))" comment="Returns the remainder after number is divided by divisor. The result has the same sign as divisor.">
    <parameter id="PA_Number" comment="The number for which you want to find the remainder" />
    <parameter id="PA_Divisor" comment="The number by which you want to divide number." />
  </user_function>
  <user_function family="GEN" id="UF_NETWORK_ID" used_by="CLP" function_type="user_function" expression="=UF_DecimalToCharacter(ROUNDDOWN(PA_Number/26;0)+65) &amp; UF_DecimalToCharacter((PA_Number-(ROUNDDOWN(PA_Number/26;0)*26)+65))">
    <parameter id="PA_Number" comment="Number to be converted into jump label" />
  </user_function>
  <user_function family="GEN" id="UF_SNIPPET_GROUP" used_by="CLP" function_type="user_function" expression="=IF(NOT(ISERROR(integration_level));&#xD;&#xA;	IF(OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;;integration_level=&quot;software&quot;);&#xD;&#xA;		IF(ISERROR(COUNTIF(prev(AND(parent(integration_level=&quot;zone&quot;).id=.parent(integration_level=&quot;zone&quot;).id;OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;;integration_level=&quot;software&quot;))).;TRUE));&#xD;&#xA;			PA_Position_Offset + (1*CA_CFG_Range_Snippet);&#xD;&#xA;			PA_Position_Offset + ((COUNTIF(prev(AND(parent(integration_level=&quot;zone&quot;).id=.parent(integration_level=&quot;zone&quot;).id;OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;;integration_level=&quot;software&quot;))).;TRUE)+1)*CA_CFG_Range_Snippet));&#xD;&#xA;		PA_Position_Offset + ((COUNTIF(prev(AND(parent(integration_level=&quot;zone&quot;).id=.parent(integration_level=&quot;zone&quot;).id;OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;;integration_level=&quot;software&quot;))).;TRUE)+0)*CA_CFG_Range_Snippet));&#xD;&#xA;	IF(ISERROR(COUNTIF(prev(AND(parent(integration_level=&quot;zone&quot;).id=.parent(integration_level=&quot;zone&quot;).id;OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;;integration_level=&quot;software&quot;))).;TRUE));&#xD;&#xA;		PA_Position_Offset + (1*CA_CFG_Range_Snippet);&#xD;&#xA;		PA_Position_Offset + ((COUNTIF(prev(AND(parent(integration_level=&quot;zone&quot;).id=.parent(integration_level=&quot;zone&quot;).id;OR(integration_level=&quot;section&quot;;integration_level=&quot;object&quot;;integration_level=&quot;software&quot;))).;TRUE)+1)*CA_CFG_Range_Snippet)))" comment="This Function calculate a snippet position based on the section/object ID and a group of 100 snippet (CA_CFG_Range_Snippet)">
    <parameter id="PA_Position_Offset" comment="Offset position in the range" />
  </user_function>
  <user_function family="GEN" id="UF_SNIPPET_GROUP_AREA" used_by="CLP" function_type="user_function" expression="=IFERROR(((COUNTIF(prev(AND(parent.integration_level=&quot;area&quot;;OR(integration_level=&quot;object&quot;;integration_level=&quot;zone&quot;))).;TRUE)+1)*CA_CFG_Range_Snippet)+PA_Position_Offset;&#xD;&#xA;	PA_Position_Offset + CA_CFG_Range_Snippet)" comment="This Function calculate a snippet position based on the object/zone ID and a group of 100 snippet (CA_CFG_Range_Snippet)">
    <parameter id="PA_Position_Offset" comment="Offset position in the range" />
  </user_function>
  <user_function family="GEN" id="UF_UsedBitsSubnetMask" used_by="CD0" function_type="user_function" expression="=IF((RIGHT(ip_address;LEN(ip_address)-FIND(&quot;/&quot;;ip_address))-((PA_Position+1)*8))&gt;0; /* Check if all bits are used */&#xD;&#xA;	8; /* All bits are used */&#xD;&#xA;	IF(RIGHT(ip_address;LEN(ip_address)-FIND(&quot;/&quot;;ip_address))-(PA_Position*8)&gt;0; /* Check if any bit is used */&#xD;&#xA;		(RIGHT(ip_address;LEN(ip_address)-FIND(&quot;/&quot;;ip_address))-(PA_Position*8)); /* Number of bits used */&#xD;&#xA;		0)) /* No bits are used */" comment="DESCRIPTION: &#xD;&#xA;Get the number of used bits per position within the subnet mask&#xD;&#xA;&#xD;&#xA;PRE: &#xD;&#xA;Subnet mask indication [CIDR] is present within the 'ip_address' attribute&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;POST: &#xD;&#xA;Number of used bits for the requested position within the subnet mask which&#xD;&#xA;can be used to calculate the integer value&#xD;&#xA;&#xD;&#xA;EXAMPLE: ip_address=&quot;192.168.10.45\22&quot; ==&gt; 22 bits used for subnet&#xD;&#xA;&#xD;&#xA;IP_Addres  :    192    .    168    .    10     .    45&#xD;&#xA;              &lt;Pos 0&gt;  .  &lt;Pos 1&gt;  .  &lt;Pos 2&gt;  .  &lt;Pos 3&gt;&#xD;&#xA;&#xD;&#xA;Subnet Mask: 1111_1111 . 1111_1111 . 1111_1100 . 0000_0000&#xD;&#xA;Bits used  :     8     .     8     .     6     .     0&#xD;&#xA;&#xD;&#xA;   UF_UsedBitsSubnetMask(3)=0&#xD;&#xA;   UF_UsedBitsSubnetMask(2)=6&#xD;&#xA;   UF_UsedBitsSubnetMask(1)=8&#xD;&#xA;   UF_UsedBitsSubnetMask(0)=8">
    <parameter id="PA_Position" comment="Postion within the subnet mask" />
  </user_function>
  <calculated_attribute family="SAFE" id="CA_Addressing_PN_Ext" used_by="CLP" expression="= NOT(&#xD;&#xA;      ISERROR(&#xD;&#xA;              child_find(&#xD;&#xA;                         AND(&#xD;&#xA;                             element_name= &quot;addressing&quot;;&#xD;&#xA;                             id = &quot;PN_ext&quot;&#xD;&#xA;                            )&#xD;&#xA;                        ).lcc_id&#xD;&#xA;             )&#xD;&#xA;     )" comment="Check if attribute &quot;adressing&quot; is available" />
  <calculated_attribute family="SAFE" id="CA_Binary_PROFISAFE" used_by="ELP" expression="= DEC2BIN(profisafe_address; 10)" />
  <calculated_attribute family="SAFE" id="CA_CFG_PN_IORangesEquipment_SAFE" used_by="CD1" expression="=IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC04&quot;; &#xD;&#xA;	4; /* Number of bytes used for CCC04 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;CCC05&quot;; &#xD;&#xA;	100; /* Number of bytes used for CCC05 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC25&quot;; &#xD;&#xA;	12; /* Number of bytes used for LCC25 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC26&quot;; &#xD;&#xA;	12; /* Number of bytes used for LCC26 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC28&quot;; &#xD;&#xA;	192; /* Number of bytes used for LCC28 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;LCC48&quot;; &#xD;&#xA;	192; /* Number of bytes used for LCC28 as offset for 'start_address' calculation */&#xD;&#xA;	&quot;#ERROR_No_IO_Range_Defined_for: &quot; &amp; global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV))))))" comment="Calculating the start address of profinet subscribers" />
  <calculated_attribute family="SAFE" id="CA_CFG_Range_CCC04" used_by="CD1" expression="04" />
  <calculated_attribute family="SAFE" id="CA_CFG_Range_LCC25" used_by="CD1" expression="12" />
  <calculated_attribute family="SAFE" id="CA_CFG_Range_LCC26" used_by="CD1" expression="12" />
  <calculated_attribute family="SAFE" id="CA_CFG_Range_LCC28" used_by="CD1" expression="96" />
  <calculated_attribute family="SAFE" id="CA_DP_DP_aa_ww" used_by="CLP" expression="=LEFT(&#xD;&#xA;      IF(&#xD;&#xA;         parent.parent.CA_Addressing_PN_Ext;&#xD;&#xA;         parent.parent.child_find(&#xD;&#xA;                                  AND(&#xD;&#xA;                                      element_name= &quot;addressing&quot;;&#xD;&#xA;                                      id = &quot;PN_ext&quot;&#xD;&#xA;                                     )&#xD;&#xA;                              ).lcc_id;&#xD;&#xA;         parent.parent.child(element_name= &quot;fif&quot;).isc_id&#xD;&#xA;        );&#xD;&#xA;        4&#xD;&#xA;     ) &amp; &quot;_&quot; &amp; IF(&#xD;&#xA;                  CA_DP_DP_ID_Word &lt; 10;&#xD;&#xA;                  &quot;0&quot; &amp; CA_DP_DP_ID_Word;&#xD;&#xA;                  CA_DP_DP_ID_Word&#xD;&#xA;                 )" comment="Area and Word / Block number of the DP-DP coupler" />
  <calculated_attribute family="SAFE" id="CA_DP_DP_ID_RCV" used_by="CLP" expression="= /* Create PN/PN ID according below settings:&#xD;&#xA;&#xD;&#xA;     - Digit 1		:   2 	  		=&gt; Identifier (Span of Control)&#xD;&#xA;     - Digit 2 ...3	: 001 ... 990	=&gt; Sequence number ((Last 2 digits current SC -1) x (Max. number of SC's = 30)) + (Last 2 digits of adjacent SC)&#xD;&#xA;     - Digit 5     	:   0 ...  99	=&gt; Word number (block call per 16 bits)&#xD;&#xA;  */&#xD;&#xA;     2 &amp; ((&#xD;&#xA;           RIGHT(&#xD;&#xA;                 LEFT(&#xD;&#xA;                      parent.id;&#xD;&#xA;                      4&#xD;&#xA;                     );&#xD;&#xA;                 2&#xD;&#xA;                ) -1&#xD;&#xA;          ) * 30&#xD;&#xA;         ) + RIGHT(&#xD;&#xA;                   LEFT(&#xD;&#xA;                        IF(&#xD;&#xA;                           parent.parent.CA_Addressing_PN_Ext;&#xD;&#xA;                           parent.parent.child_find(&#xD;&#xA;                                                    AND(&#xD;&#xA;                                                        element_name= &quot;addressing&quot;;&#xD;&#xA;                                                        id = &quot;PN_ext&quot;&#xD;&#xA;                                                       )&#xD;&#xA;                                                   ).lcc_id;&#xD;&#xA;                           parent.parent.child(element_name= &quot;fif&quot;).isc_id&#xD;&#xA;                          );&#xD;&#xA;                        4&#xD;&#xA;                       );&#xD;&#xA;                   2&#xD;&#xA;                  ) &amp; CA_DP_DP_ID_Word" comment="DP-DP ID F_RCVDP is a unique number composed of a 3 digit sequence number followed by the last two digits of the area number" />
  <calculated_attribute family="SAFE" id="CA_DP_DP_ID_SND" used_by="CLP" expression="= /* Create PN/PN ID according below settings:&#xD;&#xA;&#xD;&#xA;     - Digit 1		:   2 	  	    =&gt; Identifier (Span of Control)&#xD;&#xA;     - Digit 2 ...3	: 001 ... 990	=&gt; Sequence number ((Last 2 digits adjacent SC -1) x (Max. number of SC's = 30)) + (Last 2 digits of current SC)&#xD;&#xA;     - Digit 5     	:   0 ...  99	=&gt; Word number (block call per 16 bits)&#xD;&#xA;  */&#xD;&#xA;     2 &amp; ((RIGHT(&#xD;&#xA;                 LEFT(&#xD;&#xA;                      IF(&#xD;&#xA;                         parent.parent.CA_Addressing_PN_Ext;&#xD;&#xA;                         parent.parent.child_find(&#xD;&#xA;                                                  AND(&#xD;&#xA;                                                      element_name= &quot;addressing&quot;;&#xD;&#xA;                                                      id = &quot;PN_ext&quot;&#xD;&#xA;                                                     )&#xD;&#xA;                                                 ).lcc_id;&#xD;&#xA;                         parent.parent.child(element_name= &quot;fif&quot;).isc_id&#xD;&#xA;                        );&#xD;&#xA;                      4&#xD;&#xA;                     );&#xD;&#xA;                 2&#xD;&#xA;                ) -1&#xD;&#xA;          ) * 30&#xD;&#xA;         ) + RIGHT(&#xD;&#xA;         		   LEFT(&#xD;&#xA;                        parent.id;&#xD;&#xA;                        4&#xD;&#xA;                       );&#xD;&#xA;                   2&#xD;&#xA;                  ) &amp; CA_DP_DP_ID_Word" comment="DP-DP ID F_SENDDP is a unique number composed of a 3 digit sequence number followed by the last two digits of the area number" />
  <calculated_attribute family="SAFE" id="CA_DP_DP_ID_Bit" used_by="CLP" expression="=UF_DelimitedData(index;CA_CFG_Delimiter_ID;2)" comment="Bit number of the DP-DP ID attribute" />
  <calculated_attribute family="SAFE" id="CA_DP_DP_ID_Word" used_by="PD6" expression="=UF_DelimitedData(index;CA_CFG_Delimiter_ID;1)" comment="Word / Block number of the DP-DP ID attribute" />
  <calculated_attribute family="SAFE" id="CA_ID_aa_zz_oo" used_by="CLP" expression="=CA_ID_Area &amp; &quot;_&quot; &amp; CA_ID_Zone &amp; &quot;_&quot; &amp; CA_ID_Object" comment="Return area, zone and object number with separator underscore" />
  <calculated_attribute family="SAFE" id="CA_ID_aa_oo" used_by="CLP" expression="=CA_ID_Area &amp; &quot;_&quot; &amp; CA_ID_Object" comment="Return area and object number with separator underscore" />
  <calculated_attribute family="SAFE" id="CA_ID_zz_oo" used_by="CLP" expression="=CA_ID_Zone &amp; &quot;_&quot; &amp; CA_ID_Object" comment="Zone and object part of the id attribute" />
  <calculated_attribute family="SAFE" id="CA_ISC_ID_aa_zz_ss" used_by="CLP" expression="=UF_DelimitedData(isc_id;&quot;.&quot;;1) &amp; &quot;_&quot; &amp; UF_DelimitedData(isc_id;&quot;.&quot;;2) &amp; &quot;_&quot; &amp; UF_DelimitedData(isc_id;&quot;.&quot;;3)" comment="isc_id area zone section with underscore separator" />
  <calculated_attribute family="SAFE" id="CA_ISC_ID_aa_zz_oo" used_by="CLP" expression="=UF_DelimitedData(isc_id;&quot;.&quot;;1) &amp; &quot;_&quot; &amp; UF_DelimitedData(isc_id;&quot;.&quot;;2) &amp; &quot;_&quot; &amp; UF_DelimitedData(isc_id;&quot;.&quot;;3)" comment="isc_id area zone object with underscore separator" />
  <calculated_attribute family="SAFE" id="CA_ISC_ID_aa_oo" used_by="CLP" expression="=IFERROR(&#xD;&#xA;    UF_DelimitedData(isc_id;&quot;.&quot;;1) &amp; &quot;_&quot; &amp;  UF_DelimitedData(isc_id;&quot;.&quot;;3);&#xD;&#xA;    UF_DelimitedData(child(element_name = &quot;cif&quot;).isc_id;&quot;.&quot;;1) &amp; &quot;_&quot; &amp; UF_DelimitedData(child(element_name = &quot;cif&quot;).isc_id;&quot;.&quot;;3)&#xD;&#xA;)" comment="isc_id area section/object with underscore separator" />
  <calculated_attribute family="SAFE" id="CA_LCC_ID_aa_oo" used_by="CLP" expression="= UF_DelimitedData(lcc_id;&quot;.&quot;;1) &amp; &quot;_&quot; &amp;  UF_DelimitedData(lcc_id;&quot;.&quot;;3)" comment="lcc_id area section/object with underscore separator" />
  <calculated_attribute family="SAFE" id="CA_LCC_ID_Area" used_by="CLP" expression="=UF_DelimitedData(lcc_id;CA_CFG_Delimiter_ID;1)" comment="Area part of the lcc_id attribute" />
  <calculated_attribute family="SAFE" id="CA_PROFISAFE_address" used_by="CD1" expression="=IF(&#xD;&#xA;    ISERROR(&#xD;&#xA;        prev(&#xD;&#xA;            AND(&#xD;&#xA;                (profisafe_address*1)&gt;(CA_PROFISAFE_address_min-1);&#xD;&#xA;                (profisafe_address*1)&lt;(CA_PROFISAFE_address_max+1)&#xD;&#xA;               )&#xD;&#xA;        ).profisafe_address&#xD;&#xA;           );&#xD;&#xA;    CA_PROFISAFE_address_max;&#xD;&#xA;    MIN(&#xD;&#xA;		prev(&#xD;&#xA;    		AND(&#xD;&#xA;        		(profisafe_address*1)&gt;(CA_PROFISAFE_address_min-1);&#xD;&#xA;        	    (profisafe_address*1)&lt;(CA_PROFISAFE_address_max+1)&#xD;&#xA;            )&#xD;&#xA;        ).;&#xD;&#xA;        profisafe_address&#xD;&#xA;    )&#xD;&#xA;    -1&#xD;&#xA;)&#xD;&#xA;" comment="Definition is backwards (from 200 downwards)" />
  <calculated_attribute family="SAFE" id="CA_PROFISAFE_address_max" used_by="CD1" expression="200" comment="Definition is backwards (from 200 downwards)" />
  <calculated_attribute family="SAFE" id="CA_PROFISAFE_address_min" used_by="CD1" expression="1" comment="Definition is backwards (from 200 downwards)" />
  <calculated_attribute family="SAFE" id="CA_PROFINET_IP_Address" used_by="CLP" expression="=IF(&#xD;&#xA;    NOT(ISERROR(prev(RIGHT(ip_address; 1) = &quot;.&quot;).ip_address));&#xD;&#xA;    prev(RIGHT(ip_address; 1) = &quot;.&quot;).ip_address &amp; CA_PROFINET_IP_StartAddress;&#xD;&#xA;    UF_DelimitedData(ip_address;&quot;.&quot;;4) * 1 + 1&#xD;&#xA;)" />
  <calculated_attribute family="SAFE" id="CA_PROFINET_IP_StartAddress" used_by="CLP" expression="10" />
  <calculated_attribute family="SAFE" id="CA_PROFINET_StartAddressSAFE" used_by="CD1" expression="=IF(&#xD;&#xA;    AND(prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).mark_code=&quot;CCC&quot;;prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).function=&quot;04&quot;);&#xD;&#xA;    CA_CFG_Range_CCC04;&#xD;&#xA;    IF(&#xD;&#xA;        AND(prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).mark_code=&quot;CCC&quot;;prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).function=&quot;05&quot;);&#xD;&#xA;        CA_CFG_Range_CCC05;&#xD;&#xA;        IF(&#xD;&#xA;            AND(prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).mark_code=&quot;LCC&quot;;prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).function=&quot;25&quot;);&#xD;&#xA;            CA_CFG_Range_LCC25;&#xD;&#xA;            IF(&#xD;&#xA;                AND(prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).mark_code=&quot;LCC&quot;;prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).function=&quot;26&quot;);&#xD;&#xA;                CA_CFG_Range_LCC26;&#xD;&#xA;                IF(&#xD;&#xA;                    AND(prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).mark_code=&quot;LCC&quot;;prev(AND(NOT(ISERROR(network_device_id));NOT(ISERROR(start_address)))).parent(integration_level=&quot;object&quot;).function=&quot;28&quot;);&#xD;&#xA;                    CA_CFG_Range_LCC28;&#xD;&#xA;                    0/*&quot;#ERROR NO RANGE DEFINED&quot;*/&#xD;&#xA;                )&#xD;&#xA;            )&#xD;&#xA;        )&#xD;&#xA;    )&#xD;&#xA;)" comment="Calculating the start address of profinet subscribers" />
  <calculated_attribute family="SAFE" id="CA_PROFINET_SwitchPortID_SAFE" used_by="CD1" expression="=	IF(&#xD;&#xA;    	ISERROR(parent(integration_level=&quot;object&quot;).lcc_id); /* if lcc_id is not filled in */&#xD;&#xA;    	&quot;&quot;;&#xD;&#xA;&#xD;&#xA;		IF(&#xD;&#xA;    		AND(parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).lcc_id).mark_code=&quot;CCC&quot;;parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).lcc_id).function=&quot;04&quot;);&#xD;&#xA;    		/* if lcc_id is master cabinet */&#xD;&#xA;    &#xD;&#xA;    		IF(&#xD;&#xA;        		ISERROR(parent(integration_level=&quot;object&quot;).prev(AND(lcc_id=.parent(integration_level=&quot;object&quot;).lcc_id;integration_level&lt;&gt;&quot;element&quot;)).id); /* if it is the first object */&#xD;&#xA;        		1;&#xD;&#xA;        		2&#xD;&#xA;    	  	  );&#xD;&#xA;&#xD;&#xA;    		IF(&#xD;&#xA;        		AND(parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).lcc_id).mark_code=&quot;LCC&quot;;parent(integration_level=&quot;area&quot;).next(id=.parent(integration_level=&quot;object&quot;).lcc_id).function=&quot;27&quot;); /* if lcc_id is PN-Switch */&#xD;&#xA;&#xD;&#xA;        		IF(&#xD;&#xA;            		OR(&#xD;&#xA;                		AND(parent(integration_level=&quot;object&quot;).mark_code=&quot;CCC&quot;;parent(integration_level=&quot;object&quot;).function=&quot;04&quot;); /* if current object is master cabinet */&#xD;&#xA;                        AND(parent(integration_level=&quot;object&quot;).mark_code=&quot;LCC&quot;;parent(integration_level=&quot;object&quot;).function=&quot;27&quot;);&#xD;&#xA;	                	AND(parent(integration_level=&quot;object&quot;).mark_code=&quot;LCC&quot;;parent(integration_level=&quot;object&quot;).function=&quot;27&quot;;ISERROR(parent(integration_level=&quot;object&quot;).next(AND(mark_code=&quot;LCC&quot;;function=&quot;27&quot;;lcc_id=.parent(integration_level=&quot;object&quot;).lcc_id)).id)) /* or it is the last PN-Switch - PN-Switch connection */&#xD;&#xA;            	  	  ); &#xD;&#xA;            			2; /* profinet_switch_port_id is always 2 */&#xD;&#xA;              &#xD;&#xA;            			IF(&#xD;&#xA;                			ISERROR(parent.prev(AND(lcc_id=.parent.lcc_id;integration_level&lt;&gt;&quot;element&quot;)).id);&#xD;&#xA;                			/* if there is no previous object/section with the same lcc_id */&#xD;&#xA;&#xD;&#xA;                			IF(&#xD;&#xA;                    			ISERROR(parent(integration_level=&quot;object&quot;).next(AND(lcc_id=.parent(integration_level=&quot;object&quot;).lcc_id;integration_level&lt;&gt;&quot;element&quot;)).id); /* if there is no next object/section with the same lcc_id in other words, it is ring/backbone with devices */&#xD;&#xA;                    			2; /* profinet_switch_port_id is always 2 */&#xD;&#xA;                    			CA_CFG_PN_MinSwitchNumber&#xD;&#xA;                		  	  );&#xD;&#xA;                			/* Object/section connected to PN-Switch port */&#xD;&#xA;                &#xD;&#xA;                			IF(&#xD;&#xA;                    			parent(integration_level=&quot;object&quot;).prev(AND(lcc_id=.parent(integration_level=&quot;object&quot;).lcc_id;integration_level&lt;&gt;&quot;element&quot;)).child(element_name=&quot;addressing&quot;).profinet_switch_port_id = CA_CFG_PN_MaxSwitchNumber; /* if max profinet_switch_port_id is reached */&#xD;&#xA;                    			&quot;#ERROR_MAX_PORT_REACHED&quot;;&#xD;&#xA;                    			parent(integration_level=&quot;object&quot;).prev(AND(lcc_id=.parent(integration_level=&quot;object&quot;).lcc_id;integration_level&lt;&gt;&quot;element&quot;)).child(element_name=&quot;addressing&quot;).profinet_switch_port_id + 1 /* previous profinet_switch_port_id + 1 */&#xD;&#xA;			  				  )&#xD;&#xA;            	   	  	  )			&#xD;&#xA;        	   	  );&#xD;&#xA;        		  2 /* if lcc_id is NOT master cabinet NOR PN-Switch, profinet_switch_id is always 2 */&#xD;&#xA;    		  )&#xD;&#xA;		  )&#xD;&#xA;	  )" />
  <calculated_attribute family="SAFE" id="CA_SE_SOC" used_by="CLP" expression="=AND(parent.parent.mark_code=&quot;LCC&quot;; parent.mark_code=&quot;FBM&quot;; parent.function=&quot;04&quot;; mark_code=&quot;ESO&quot;)" comment="isc_id area, zone and object with underscore separator&#xD;&#xA;TRUE   : Area ID Safety Event is equal to area Safety Controller&#xD;&#xA;FALSE  : Area ID Safety Event is NOT equal to area Safety Controller" />
  <calculated_attribute family="SAFE" id="CA_SE_SOC_RCV" used_by="CLP" expression="=IF(&#xD;&#xA;    AND(&#xD;&#xA;        LEFT(isc_id; 4) = LEFT(&#xD;&#xA;      		                   IF(&#xD;&#xA;                                  parent.parent.CA_Addressing_PN_Ext;&#xD;&#xA;                                  parent.parent.child_find(&#xD;&#xA;                                                           AND(&#xD;&#xA;                                                               element_name= &quot;addressing&quot;;&#xD;&#xA;                                                               id = &quot;PN_ext&quot;&#xD;&#xA;                                                              )&#xD;&#xA;                                                          ).lcc_id;&#xD;&#xA;                                  parent.parent.child(element_name= &quot;fif&quot;).isc_id&#xD;&#xA;                                 );&#xD;&#xA;                               4&#xD;&#xA;                              );&#xD;&#xA;        parent.mark_code=&quot;FBM&quot;;&#xD;&#xA;        parent.function=&quot;04&quot;;&#xD;&#xA;        OR(&#xD;&#xA;           mark_code=&quot;ESO&quot;;&#xD;&#xA;           mark_code=&quot;ESS&quot;&#xD;&#xA;          )&#xD;&#xA;      );&#xD;&#xA;       TRUE;&#xD;&#xA;       FALSE&#xD;&#xA;   )" comment="Safety Event (SE) to / from adjacent Safety Controller (SC) defined as Span Of Control (SOC)&#xD;&#xA;FALSE  : Area ID Safety Event is equal to area ID of this Safety Controller =&gt; SOC to adjacent SC&#xD;&#xA;TRUE   : Area ID Safety Event is NOT equal to area ID of this Safety Controller =&gt; SOC from adjacent SC" />
  <calculated_attribute family="SAFE" id="CA_SE_SOC_SND" used_by="CLP" expression="= IF(&#xD;&#xA;     AND(&#xD;&#xA;         LEFT(isc_id; 4) &lt;&gt; LEFT(&#xD;&#xA;      		                     IF(&#xD;&#xA;                                    parent.parent.CA_Addressing_PN_Ext;&#xD;&#xA;                                    parent.parent.child_find(&#xD;&#xA;                                                             AND(&#xD;&#xA;                                                                 element_name= &quot;addressing&quot;;&#xD;&#xA;                                                                 id = &quot;PN_ext&quot;&#xD;&#xA;                                                                )&#xD;&#xA;                                                            ).lcc_id;&#xD;&#xA;                                    parent.parent.child(element_name= &quot;fif&quot;).isc_id&#xD;&#xA;                                   );&#xD;&#xA;                                 4&#xD;&#xA;                                );&#xD;&#xA;         parent.mark_code=&quot;FBM&quot;;&#xD;&#xA;         parent.function=&quot;04&quot;;&#xD;&#xA;         OR(&#xD;&#xA;            mark_code=&quot;ESO&quot;;&#xD;&#xA;            mark_code=&quot;ESS&quot;&#xD;&#xA;           )&#xD;&#xA;        );&#xD;&#xA;         TRUE;&#xD;&#xA;         FALSE&#xD;&#xA;    )&#xD;&#xA;" comment="Safety Event (SE) to / from adjacent Safety Controller (SC) defined as Span Of Control (SOC)&#xD;&#xA;TRUE   : Area ID Safety Event is equal to area ID of this Safety Controller =&gt; SOC to adjacent SC&#xD;&#xA;FALSE  : Area ID Safety Event is NOT equal to area ID of this Safety Controller =&gt; SOC from adjacent SC" />
  <calculated_attribute family="SAFE" id="CA_SYMBOL_Address_SAFE" used_by="CD1" expression="=IF(&#xD;&#xA;     /* Check if 'as_build' information is available */&#xD;&#xA;    ISERROR(parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; OR(function = &quot;25&quot;; function = &quot;26&quot;))).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address_as_build);&#xD;&#xA;&#xD;&#xA;    /* 'as_build' information not available */&#xD;&#xA;    IFERROR(&#xD;&#xA;            FIXED(&#xD;&#xA;                  parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; function = &quot;25&quot;)).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address + address_offset;&#xD;&#xA;                  1;&#xD;&#xA;                  TRUE&#xD;&#xA;	             );&#xD;&#xA;            FIXED(&#xD;&#xA;                  parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; function = &quot;26&quot;)).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address + address_offset;&#xD;&#xA;                  1;&#xD;&#xA;                  TRUE&#xD;&#xA;	             )&#xD;&#xA;           );&#xD;&#xA;&#xD;&#xA;   /* 'as_build' information available */&#xD;&#xA;   IF(&#xD;&#xA;      /* IF 'as build' attribute is empty */&#xD;&#xA;      parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; OR(function = &quot;25&quot;; function = &quot;26&quot;))).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address_as_build = &quot;&quot;;&#xD;&#xA;       &#xD;&#xA;      /* THEN return the 'calculated' information */&#xD;&#xA;      IFERROR(&#xD;&#xA;              FIXED(&#xD;&#xA;                    parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; function = &quot;25&quot;)).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address + address_offset;&#xD;&#xA;                    1;&#xD;&#xA;                    TRUE&#xD;&#xA;	                );&#xD;&#xA;              FIXED(&#xD;&#xA;                    parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; function = &quot;26&quot;)).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address + address_offset;&#xD;&#xA;                    1;&#xD;&#xA;                    TRUE&#xD;&#xA;	               )&#xD;&#xA;            );&#xD;&#xA;            &#xD;&#xA;      /* ELSE return the 'as build' information */&#xD;&#xA;      IFERROR(&#xD;&#xA;              FIXED(&#xD;&#xA;                    parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; function = &quot;25&quot;)).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address_as_build + address_offset;&#xD;&#xA;                    1;&#xD;&#xA;                    TRUE&#xD;&#xA;	                );&#xD;&#xA;              FIXED(&#xD;&#xA;                    parent(integration_level=&quot;zone&quot;).child(AND(mark_code=&quot;LCC&quot;; function = &quot;26&quot;)).child(mark_code=&quot;FBM&quot;).child(element_name = &quot;addressing&quot;).start_address_as_build + address_offset;&#xD;&#xA;                    1;&#xD;&#xA;                    TRUE&#xD;&#xA;	               )&#xD;&#xA;             )&#xD;&#xA;     )&#xD;&#xA;)&#xD;&#xA;" comment="Calculating the symbolic address for components connected to LCC 25 or LCC 26" />
  <calculated_attribute family="SAFE" id="CA_SYMBOL_AddressOffset_SAFE" used_by="CD1" expression="= IF(&#xD;&#xA;     /* Calculate address offset for mark code:&#xD;&#xA;          ES xx	(Input address)&#xD;&#xA;          FRE 01	(Input address)&#xD;&#xA;          FRE 02	(Output address)&#xD;&#xA;          IFC 04	(Input address)&#xD;&#xA;          IFC 05	(Input address)&#xD;&#xA;     */&#xD;&#xA;     OR(&#xD;&#xA;        AND(&#xD;&#xA;            parent.mark_code = &quot;ES&quot;;&#xD;&#xA;            RIGHT(id; 2) = &quot;ES&quot;;&#xD;&#xA;            prefix = &quot;I&quot;&#xD;&#xA;           );&#xD;&#xA;        AND(&#xD;&#xA;            parent.mark_code = &quot;FRE&quot;;&#xD;&#xA;            parent.function = &quot;01&quot;;&#xD;&#xA;            RIGHT(id; 5) = &quot;Spare&quot;;&#xD;&#xA;            prefix = &quot;I&quot;&#xD;&#xA;        );&#xD;&#xA;        AND(&#xD;&#xA;            parent.mark_code = &quot;FRE&quot;;&#xD;&#xA;            parent.function = &quot;02&quot;;&#xD;&#xA;            RIGHT(id; 5) = &quot;Spare&quot;;&#xD;&#xA;            prefix = &quot;Q&quot;;&#xD;&#xA;        );&#xD;&#xA;        AND(&#xD;&#xA;            parent.mark_code = &quot;IFC&quot;;&#xD;&#xA;            OR(&#xD;&#xA;               parent.function = &quot;04&quot;;&#xD;&#xA;               parent.function = &quot;05&quot;;&#xD;&#xA;              );&#xD;&#xA;            RIGHT(id; 3) = &quot;IFC&quot;;&#xD;&#xA;            prefix = &quot;I&quot;&#xD;&#xA;           );&#xD;&#xA;       );&#xD;&#xA;     IF(&#xD;&#xA;        parent.CA_ID_Section&lt;=8;&#xD;&#xA;        FIXED(((parent.CA_ID_Section-1)/10);1);&#xD;&#xA;        FIXED(((parent.CA_ID_Section-9)/10)+6;1)&#xD;&#xA;       );&#xD;&#xA;     /* Calculate address offset for mark code FRE 02 ... K_FBK */&#xD;&#xA;	 IF(&#xD;&#xA;        AND(&#xD;&#xA; 		    parent.mark_code = &quot;FRE&quot;;&#xD;&#xA;	 	    parent.function = &quot;02&quot;;&#xD;&#xA;	 	    prefix = &quot;I&quot;&#xD;&#xA;	 	   ); &#xD;&#xA;	    IF(&#xD;&#xA;     	   parent.CA_ID_Section&lt;=8;&#xD;&#xA;          FIXED(((parent.CA_ID_Section-1)*2/10)+11;1);&#xD;&#xA;          FIXED(((parent.CA_ID_Section-9)*2/10)+11;1)&#xD;&#xA;	      );&#xD;&#xA;        /* Calculate address offset for mark code FRE 02 ... Spare */&#xD;&#xA;        IF(&#xD;&#xA;	       AND(&#xD;&#xA;	           parent.mark_code = &quot;FRE&quot;;&#xD;&#xA;	           parent.function = &quot;02&quot;;&#xD;&#xA;               RIGHT(id; 5) = &quot;Spare&quot;;&#xD;&#xA;	        prefix = &quot;Q&quot;&#xD;&#xA;	     	    ); &#xD;&#xA;	       IF(&#xD;&#xA;              parent.CA_ID_Section&lt;=8;&#xD;&#xA;              FIXED(((parent.CA_ID_Section-1)/10);1);&#xD;&#xA;              FIXED(((parent.CA_ID_Section-9)/10)+6;1)&#xD;&#xA;	         );&#xD;&#xA;           /* Calculate address offset for mark code IFC 04 and 05 */&#xD;&#xA;   	       IF(&#xD;&#xA;    	      AND(&#xD;&#xA;                  parent.mark_code = &quot;IFC&quot;;&#xD;&#xA;                  RIGHT(id; 3) = &quot;IFC&quot;;&#xD;&#xA;                  OR(&#xD;&#xA;                     parent.function = &quot;04&quot;;&#xD;&#xA;                     parent.function = &quot;05&quot;&#xD;&#xA;                    );&#xD;&#xA;    	          prefix = &quot;Q&quot;&#xD;&#xA;		         );&#xD;&#xA;	  	      IF(&#xD;&#xA;         	     parent.CA_ID_Section&lt;=8;&#xD;&#xA;    	         FIXED(((parent.CA_ID_Section-1)/10)+6;1);&#xD;&#xA;    		     FIXED(((parent.CA_ID_Section-9)/10)+6;1)&#xD;&#xA;	            );&#xD;&#xA;              /* Calculate address offset for mark code IFC 04 and 05 ... K_FBK */&#xD;&#xA;    		  IF(&#xD;&#xA;     		     AND(&#xD;&#xA;                     parent.mark_code = &quot;IFC&quot;;&#xD;&#xA;                     OR(&#xD;&#xA;                        parent.function = &quot;04&quot;;&#xD;&#xA;                        parent.function = &quot;05&quot;;&#xD;&#xA;                       );&#xD;&#xA;                     RIGHT(id; 5) = &quot;K_FBK&quot;;&#xD;&#xA;                     prefix = &quot;I&quot;&#xD;&#xA;		           );&#xD;&#xA;    	         IF(&#xD;&#xA;                    parent.CA_ID_Section&lt;=8;&#xD;&#xA;                    FIXED(((parent.CA_ID_Section-1)*2/10)+11;1);&#xD;&#xA;                    FIXED(((parent.CA_ID_Section-9)*2/10)+11+6;1)&#xD;&#xA;	               );&#xD;&#xA;                 /* Calculate address offset for mark code IFC 05 ... RST */&#xD;&#xA;     	        IF(&#xD;&#xA;    	           AND(&#xD;&#xA;                        parent.mark_code = &quot;IFC&quot;;&#xD;&#xA;                        parent.function = &quot;05&quot;;&#xD;&#xA;                        RIGHT(id; 3) = &quot;RST&quot;;&#xD;&#xA;                        prefix = &quot;Q&quot;&#xD;&#xA;		               );&#xD;&#xA;	                IF(&#xD;&#xA;                       parent.CA_ID_Section&lt;=8;&#xD;&#xA;                       FIXED(((parent.CA_ID_Section)/10)+6;1);&#xD;&#xA;                       FIXED(((parent.CA_ID_Section-9)/10)+6;1)&#xD;&#xA;	                  );&#xD;&#xA;                    /* Calculate address offset for mark code IFC 05 ... RST_FBK */&#xD;&#xA;                    IF(&#xD;&#xA;    		           AND(&#xD;&#xA;                           parent.mark_code = &quot;IFC&quot;;&#xD;&#xA;                           parent.function = &quot;05&quot;;&#xD;&#xA;                           RIGHT(id; 7) = &quot;RST_FBK&quot;;&#xD;&#xA;                           prefix = &quot;I&quot;&#xD;&#xA;                          );&#xD;&#xA;	                   IF(&#xD;&#xA;                          parent.CA_ID_Section&lt;=8;&#xD;&#xA;                          FIXED(((parent.CA_ID_Section)*2/10)+11;1);&#xD;&#xA;                          FIXED(((parent.CA_ID_Section-9)*2/10)+11+6;1)&#xD;&#xA;	                     );&#xD;&#xA;                       &quot;#ERROR: Address offset could not be calculated for &quot; &amp; parent.mark_code &amp; &quot;_&quot; &amp; parent.function&#xD;&#xA;                      )&#xD;&#xA;                   )&#xD;&#xA;                )&#xD;&#xA;             )&#xD;&#xA;          )&#xD;&#xA;       )&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;" comment="Calculate address_offset for element 'symbol'" />
  <user_function family="SAFE" id="UF_GetSymbol" used_by="CLP" function_type="user_function" expression="=IF(Formule_number=1;&#xD;&#xA;    		UF_GetSymbol1(Section_index;Element_index;Entry_index);&#xD;&#xA;			IF(Formule_number=2;&#xD;&#xA;    			UF_GetSymbol2(Section_index;Entry_index);&#xD;&#xA;				IF(Formule_number=3;&#xD;&#xA;    				UF_GetSymbol3(Section_index;Element_index;Entry_index);&#xD;&#xA;					IF(Formule_number=4;&#xD;&#xA;    					UF_GetSymbol4(Entry_index);&#xD;&#xA;    					IF(Formule_number=5;&#xD;&#xA;        					UF_GetSymbol5(Element_index;Entry_index);&#xD;&#xA;    						FALSE)))))" comment="Main function to retrieve the symbol name of an element">
    <parameter id="Formule_number" />
    <parameter id="Section_index" />
    <parameter id="Element_index" />
    <parameter id="Entry_index" />
  </user_function>
  <user_function family="SAFE" id="UF_GetSymbol1" used_by="CLP" function_type="user_function" expression="=IFERROR(&quot;&quot;&quot;&quot; &amp; child(index=Section_index).child(AND(mark_code=Element_index; NOT(ISERROR(child(index=Entry_index).id)))).child(index=Entry_index).id &amp; &quot;&quot;&quot;&quot;; FALSE)" comment="Get the symbol name of an element when the element is located under a section (Zone/Section/Element)">
    <parameter id="Section_index" />
    <parameter id="Element_index" />
    <parameter id="Entry_index" />
  </user_function>
  <user_function family="SAFE" id="UF_GetSymbol2" used_by="CLP" function_type="user_function" expression="=IFERROR(&quot;&quot;&quot;&quot; &amp; child(index=Section_index).child(AND(index=Entry_index; parent.parent.id=.id)).id &amp; &quot;&quot;&quot;&quot;; FALSE)" comment="Get the symbol name of an element when the element is located under a Zone (Zone/Element) ">
    <parameter id="Section_index" />
    <parameter id="Entry_index" />
  </user_function>
  <user_function family="SAFE" id="UF_GetSymbol3" used_by="CLP" function_type="user_function" expression="=IFERROR(&quot;&quot;&quot;&quot; &amp; child(index=Section_index).child(AND(index=Element_index; NOT(ISERROR(child(index=Entry_index).id)))).child(index=Entry_index).id &amp; &quot;&quot;&quot;&quot;; FALSE)" comment="Get the symbol name of an element when the element mark_code is not unique under the Section (Zone/Section/Element) ">
    <parameter id="Section_index" />
    <parameter id="Element_index" />
    <parameter id="Entry_index" />
  </user_function>
  <user_function family="SAFE" id="UF_GetSymbol4" used_by="CLP" function_type="user_function" expression="=IFERROR(&quot;&quot;&quot;&quot; &amp; child(AND(index=Entry_index; parent.id=.id)).id &amp; &quot;&quot;&quot;&quot;; FALSE)" comment="Get the symbol name when located under a Zone without Element">
    <parameter id="Entry_index" />
  </user_function>
  <user_function family="SAFE" id="UF_GetSymbol5" used_by="CLP" function_type="user_function" expression="=IFERROR(&quot;&quot;&quot;&quot; &amp; child(mark_code=Element_index).child(AND(index=Entry_index; parent.parent.id=.id)).id &amp; &quot;&quot;&quot;&quot;; FALSE)" comment="Get the symbol name of an element when the element is located under a Zone (Zone/Element) ">
    <parameter id="Element_index" />
    <parameter id="Entry_index" />
  </user_function>
  <calculated_attribute family="RAW" id="CA_CFG_PN_IORangesEquipment_RAW" used_by="CD1" expression="=IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;SWS03&quot;; &#xD;&#xA;	6; /* Number of bytes used for SWS03 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;SWS05&quot;; &#xD;&#xA;	6; /* Number of bytes used for SWS05 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;SWS06&quot;; &#xD;&#xA;	6; /* Number of bytes used for SWS06 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;VCC76&quot;; &#xD;&#xA;	6; /* Number of bytes used for VCC76 as offset for 'start_address' calculation */&#xD;&#xA;IF(global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV=&quot;VCC77&quot;; &#xD;&#xA;	6; /* Number of bytes used for VCC77 as offset for 'start_address' calculation */&#xD;&#xA;	&quot;#ERROR_No_IO_Range_Defined_for: &quot; &amp; global_find(id=.CA_PROFINET_PrevStartAddressEquipmentID).CA_MCFV)))))" comment="Calculating the start address of profinet subscribers of family RAW" />
  <calculated_attribute family="RAW" id="CA_CFG_Gap_FWD_RAW" used_by="CLP" expression="=ROUND(( &#xD;&#xA;IF(NOT(ISERROR(child(AND(element_name=&quot;gap&quot;;id=&quot;front0&quot;)).length));&#xD;&#xA;  IF(child(AND(element_name=&quot;gap&quot;;id=&quot;front0&quot;)).length&lt;=0.075; /* 0.075--&gt; 75 mm is the maximum gap allowed for family RAW*/&#xD;&#xA;  	child(AND(element_name=&quot;gap&quot;;id=&quot;front0&quot;)).length;);&quot;0&quot;)&#xD;&#xA;)*100;0)" comment="Calculation of the ECS-P length of the section (gap front0)" />
  <calculated_attribute family="RAW" id="CA_CFG_Gap_REV_RAW" used_by="CLP" expression="=ROUND(( &#xD;&#xA;    IF(NOT(ISERROR(child(AND(element_name=&quot;gap&quot;;id=&quot;back0&quot;)).length));&#xD;&#xA;    IF(child(AND(element_name=&quot;gap&quot;;id=&quot;back0&quot;)).length&lt;=0.075; /* 0.075--&gt; 75 mm is the maximum gap allowed for family RAW*/&#xD;&#xA;    	child(AND(element_name=&quot;gap&quot;;id=&quot;back0&quot;)).length;);&quot;0&quot;)&#xD;&#xA;)*100;0)" comment="Calculation of the ECS-P length of the section (gap back0)" />
  <calculated_attribute family="RAW" id="CA_CFG_LengthSection_FWD_RAW" used_by="CLP" expression="=ROUND((length + &#xD;&#xA;IF(NOT(ISERROR(child(AND(element_name=&quot;gap&quot;;id=&quot;front0&quot;)).length));&#xD;&#xA;  IF(child(AND(element_name=&quot;gap&quot;;id=&quot;front0&quot;)).length&lt;=0.075; /* 0.075--&gt; 75 mm is the maximum gap allowed for family RAW*/&#xD;&#xA;  	child(AND(element_name=&quot;gap&quot;;id=&quot;front0&quot;)).length;);&quot;0&quot;)&#xD;&#xA;)*100;0)" comment="Calculation of the ECS-P length of the section (gap front0 + length)" />
  <calculated_attribute family="RAW" id="CA_CFG_LengthSection_REV_RAW" used_by="CLP" expression="=ROUND((length + &#xD;&#xA;    IF(NOT(ISERROR(child(AND(element_name=&quot;gap&quot;;id=&quot;back0&quot;)).length));&#xD;&#xA;    IF(child(AND(element_name=&quot;gap&quot;;id=&quot;back0&quot;)).length&lt;=0.075; /* 0.075--&gt; 75 mm is the maximum gap allowed for family RAW*/&#xD;&#xA;    	child(AND(element_name=&quot;gap&quot;;id=&quot;back0&quot;)).length;);&quot;0&quot;)&#xD;&#xA;)*100;0)" comment="Calculation of the ECS-P length of the section (gap back0 + length)" />
  <calculated_attribute family="RAW" id="CA_FIRST_SECTION" used_by="CLP" expression="=&#xD;&#xA;IFERROR(&#xD;&#xA;AND(&#xD;&#xA;    parent.child( AND( integration_level=&quot;section&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xD;&#xA;  IFERROR( prev( integration_level=&quot;section&quot;).parent.id &lt;&gt; .parent.id; TRUE )&#xD;&#xA;);&#xD;&#xA;FALSE&#xD;&#xA;)" />
  <calculated_attribute family="RAW" id="CA_LAST_SECTION" used_by="CLP" expression="=&#xD;&#xA;IFERROR(&#xD;&#xA;AND(&#xD;&#xA;    parent.child( AND( integration_level=&quot;section&quot;; id = .id ) ).id &lt;&gt; &quot;&quot;;&#xD;&#xA;    IFERROR( next( integration_level=&quot;section&quot;).parent.id &lt;&gt; .parent.id; TRUE )&#xD;&#xA;);&#xD;&#xA;FALSE&#xD;&#xA;)" />
  <calculated_attribute family="RAW" id="CA_MCFV_Request_Halt_TRS_RAW" used_by="CLP" expression="=AND(element_name=&quot;cif&quot;;&#xD;&#xA;    OR(child.value=&quot;HOO01&quot;;/*GEN*/&#xD;&#xA;    child.value=&quot;HOO02&quot;;&#xD;&#xA;    child.value=&quot;HOO03&quot;;&#xD;&#xA;    child.value=&quot;HOO04&quot;;&#xD;&#xA;    child.value=&quot;SHO02&quot;;&#xD;&#xA;    child.value=&quot;SHO03&quot;;&#xD;&#xA;    child.value=&quot;SHO04&quot;;&#xD;&#xA;    child.value=&quot;SHO04&quot;;&#xD;&#xA;    child.value=&quot;SHO05&quot;;&#xD;&#xA;    child.value=&quot;SHO06&quot;;&#xD;&#xA;    child.value=&quot;SHO07&quot;;&#xD;&#xA;    child.value=&quot;SHO08&quot;;&#xD;&#xA;    child.value=&quot;SHO09&quot;;&#xD;&#xA;    child.value=&quot;SHO15&quot;;&#xD;&#xA;    child.value=&quot;SHO16&quot;;&#xD;&#xA;    child.value=&quot;SHO80&quot;;&#xD;&#xA;    child.value=&quot;SHO81&quot;;    &#xD;&#xA;    child.value=&quot;SHO82&quot;;&#xD;&#xA;    child.value=&quot;WE03&quot;;&#xD;&#xA;    child.value=&quot;WE04&quot;;&#xD;&#xA;    child.value=&quot;BSO01&quot;;/*RAW*/&#xD;&#xA;    child.value=&quot;CHO10&quot;;&#xD;&#xA;    child.value=&quot;CHO20&quot;;&#xD;&#xA;    child.value=&quot;CIO01&quot;&#xD;&#xA; ))" comment="RAW object able to request a section to halt." />
  <calculated_attribute family="RAW" id="CA_TRS_SECTION" used_by="CLP" expression="=OR( mark_code=&quot;BC&quot;;/*RAW*/&#xD;&#xA;    mark_code=&quot;BF&quot;;&#xD;&#xA;	mark_code=&quot;BJ&quot;;&#xD;&#xA;	mark_code=&quot;CI&quot;;&#xD;&#xA;	mark_code=&quot;TF&quot;;&#xD;&#xA;	mark_code=&quot;TT&quot;;&#xD;&#xA;	mark_code=&quot;VBS&quot;;&#xD;&#xA;	mark_code=&quot;VDS&quot;;&#xD;&#xA;	mark_code=&quot;CH&quot;;&#xD;&#xA;	mark_code=&quot;LRJ&quot;;/*TTT*/&#xD;&#xA;    mark_code=&quot;LWC&quot;;&#xD;&#xA;    mark_code=&quot;PTS&quot;;&#xD;&#xA;    mark_code=&quot;TB&quot;;&#xD;&#xA;    mark_code=&quot;TTS&quot;;&#xD;&#xA;    mark_code=&quot;UTS&quot;;&#xD;&#xA;    mark_code=&quot;VTS&quot;&#xD;&#xA;	)" comment="The section is a RAW transport section " />
  <calculated_attribute family="RAW" id="CA_SET_BasicMinimumGap_RAW" used_by="CLP" expression="=30" />
  <calculated_attribute family="RAW" id="CA_SET_BasicAddGapStop_RAW" used_by="CLP" expression="=0" />
  <calculated_attribute family="RAW" id="CA_SET_BasicMinimumH2H_RAW" used_by="CLP" expression="=0" />
  <calculated_attribute family="RAW" id="CA_SET_BasicAddH2HStop_RAW" used_by="CLP" expression="=0" />
  <calculated_attribute family="RAW" id="CA_SET_DefaultPecOffset_RAW" used_by="CLP" expression="=60 /* Default RAW PEC Offset */" />
  <calculated_attribute family="RAW" id="CA_SET_DefaultOpenWindow_RAW" used_by="CLP" expression="=25" />
  <calculated_attribute family="RAW" id="CA_SET_DefaultCloseWindow_RAW" used_by="CLP" expression="=50" />
  <calculated_attribute family="RAW" id="CA_SET_PEC_Blockage_Length_RAW" used_by="CLP" expression="=&quot;&quot;&quot;DB_Setting&quot;&quot;.common&quot;&amp;&quot;.PEC_Blockage_Length&quot;" />
</calculated_attributes>