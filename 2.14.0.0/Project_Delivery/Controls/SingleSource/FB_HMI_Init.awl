FUNCTION_BLOCK "FB_HMI_Init"
TITLE =%version: 0.06 % CN: 30
//Function:
//HMI Init
//
//History:
//This version  %created_by:  nlhdl %
//              %date_created:  maandag 7 december 2015 16:00:48 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.06
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.06
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.06
//15797: Keyword release added                          nlwwij   26-09-13   0.06
//14609: Modify comments DB_Status_Index (HMI_index)    nlHdL    01-08-13   0.05
//WP12624 update family name to General                 nlHdL    24-01-13   0.04
//WP12624 update family name to General                 nlHdL    24-01-13   0.03
//PR5815 Change DB_HMI_Index into DB_Status_Index       nlMRe    21-10-10   0.02
//Initial version                                       insmahi  10-06-10   0.01
//
//Description:
//The functions 
//- Calculate the No of component.
//- Calculate component TYPE DB length 
//- Calculate the start address for component and Store the start address   
//  location in DB_Status_Index
//- Calculate the Lengh of the Type DB and store in HMI index DB.
//These functions are done only in the event of "Frist cycle". 
//
//DB_Status_Index
//Component 
//----------------------------
//Component ID               :
//---------------------------
//Component TYPE DB          :
//----------------------------
//Start Address in status DB :
//----------------------------
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_ANY_Record_Start : ANY ;	//Record in DB_Status_Index where to start from
  i_ANY_Record_End : ANY ;	//Record in DB_Status_Index where to end 
END_VAR
VAR
  s_Total_Num_Recs : INT ;	//Total number of Records
  s_Index_Actual_Rec : INT ;	//Index to actual record number. 
  s_Comp_DB_No : INT ;	//Component Type DB number
  s_Rec_Pointer : DWORD ;	//Pointer to a ANY pointer in DB_Status_Index
  s_Comp_Status_Length : DWORD ;	//Component status length in bytes (Current)
  s_Comp_Status_Lng_Prev : DWORD ;	//Component status length in bytes (Previous)
  s_Done : BOOL ;	
END_VAR
VAR_TEMP
  t_AR2_Mask : DWORD ;	//'relative address'-mask
  t_AR2_Store_Restore : DWORD ;	//Backup addres register AR2
  t_Record_Start_Pnt : DWORD ;	//Start adress first record in DB_Record_Handling to scan records from 
  t_Record_End_Pntr : DWORD ;	//Start adress last record in DB_Record_Handling to scan records from 
  t_Record_Length_Pointer : DWORD ;	//Length of Record index in pointer format
  t_Off_ANY_Comp_DB_No : DWORD ;	//Offset from Record index to position of ""Component TYPE DB Number"
  t_Off_ANY_Comp_Start_Adr : DWORD ;	//Offset from Record index to position of "Component start address "
  t_Off_ANY_Comp_Bytes : DWORD ;	//Offset from Record index to position of "Component number of bytes"(ANY)
  t_Length_status_Bit_Def : INT ;	//Lenght of status bit defination (Bytes)
  t_length_of_CS : INT ;	//Length of collected status (Bytes)
  t_Comp_DB_No : WORD ;	
END_VAR
BEGIN
NETWORK
TITLE =AA: AR2 mask
//Get relative addres out of AR2
//Address register:      10000ZZZ 00000yyy yyyyyyyy yyyyyxxx
//                 Z=Operand area      y=Byte address    x=Bit address
//Mask Byte and Bit address only
      TAR2  ; // Load 'base address register'
      T     #t_AR2_Store_Restore; // Store AR2
      AD    DW#16#FFFFFF; // Mask 'address only' out of area-internal-pointer
      T     #t_AR2_Mask; // 'relative address'-mask
NETWORK
TITLE =BA :Initialise pointers , Offsets

      L     P#20.0; // Offset of record Index
      T     #t_Record_Length_Pointer; 

      L     P#12.0; // Offset for the status pointer in Index
      T     #t_Off_ANY_Comp_DB_No; 

      L     P#14.0; // Offset for the status pointer in Index
      T     #t_Off_ANY_Comp_Start_Adr; 

      L     P#18.0; // Offset for the status pointer in Index
      T     #t_Off_ANY_Comp_Bytes; 

      L     4; // Length of status bit defination
      T     #t_Length_status_Bit_Def; 

      L     0; // Length of collected status
      T     #t_length_of_CS; 
NETWORK
TITLE =CA: Get the num.of records to scan out of i_ANY_Record_ pointers

      L     P##i_ANY_Record_Start; // Pointer to first record in DB_Record_Handling to scan
      L     #t_AR2_Mask; 
      +D    ; 
      LAR1  ; // 'absolute address' Source
      L     D [AR1,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address 
      AD    DW#16#FFFFFF; // Filter last 3 bytes
      T     #t_Record_Start_Pnt; // start adress first record in DB_Record_Handling

      L     P##i_ANY_Record_End; // Pointer to last record in DB_Record_Handling to scan
      L     #t_AR2_Mask; 
      +D    ; 
      LAR1  ; // 'absolute address' Source
      L     D [AR1,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address 
      AD    DW#16#FFFFFF; // Filter last 3 bytes
      T     #t_Record_End_Pntr; // start adress last record in DB_Record_Handling

      L     #t_Record_End_Pntr; 
      L     #t_Record_Start_Pnt; 
      -D    ; 
      L     #t_Record_Length_Pointer; // lenght of one record in DB_Status_Index
      /D    ; 
      L     1; 
      +I    ; // increment 1 to compensate for last record 
      T     #s_Total_Num_Recs; // Total number of compnents to scan      
NETWORK
TITLE =DA: Initialise First record and previous length

      L     #t_Record_Start_Pnt; // Pointer to first record
      T     #s_Rec_Pointer; // Init the Record Pointer to first record

      L     0; // Initialise the previous status length
      T     #s_Comp_Status_Lng_Prev; 
NETWORK
TITLE =EA: Get Component Type DB number and length for records
//The component type DB defined is read and length is calculated. The data is 
//stored in DB_Status_Index. Type DB lenght of pervious component is added stored 
//as start address for the current component.  
      L     1; // Load the number of records
EA01: T     #s_Index_Actual_Rec; 

      OPN   "DB_Status_Index"; 
      L     #s_Rec_Pointer; // Pointer to actual record in DB_Status_Index
      L     #t_Off_ANY_Comp_DB_No; 
      +D    ; 
      LAR1  ; // Pointer to "Status.ANY_Instance" of actual record
      L     DBW [AR1,P#0.0]; // Load Pointer
      T     #s_Comp_DB_No; // Component Type DB number
      T     #t_Comp_DB_No; 

      OPN   DB [#t_Comp_DB_No]; // Open the componet TYPE DB
      L     DBLG; // Get the length of the TYPE DB
      L     #t_Length_status_Bit_Def; // Lengh in Bit
      /D    ; 
      L     8; // Divide by 8 to get in bytes
      /D    ; 
      T     #s_Comp_Status_Length; // Component status lentgh


      OPN   "DB_Status_Index"; 
      L     #s_Rec_Pointer; // Pointer to actual record in DB_Status_Index
      L     #t_Off_ANY_Comp_Start_Adr; 
      +D    ; 
      LAR1  ; 

      L     #s_Comp_Status_Lng_Prev; // Previous status length
      T     DBD [AR1,P#0.0]; // Trasfer to status length to current component  

      L     #s_Comp_Status_Length; // Component status length (Current)
      L     #s_Comp_Status_Lng_Prev; // Previous status length
      +D    ; 
      T     #s_Comp_Status_Lng_Prev; 


      L     #s_Rec_Pointer; // Pointer to actual record in DB_Status_Index
      L     #t_Off_ANY_Comp_Bytes; // Offset of the NO of bytes in the record
      +D    ; 
      LAR1  ; 

      L     #s_Comp_Status_Length; // Status length 
      T     DBW [AR1,P#0.0]; 


      L     #s_Index_Actual_Rec; // Load the Index number
      L     #s_Total_Num_Recs; // compare with record present
      <I    ; // Jump if it is equal to end 
      JCN   EA99; 

      L     #s_Rec_Pointer; //Increment Pointer to next record
      L     #t_Record_Length_Pointer; //With length of record
      +D    ; 
      T     #s_Rec_Pointer; // Update the rec pointer 

      L     #s_Index_Actual_Rec; // Increment the index of the record 
      L     1; //   By one
      +I    ; // .
      T     #s_Index_Actual_Rec; // Update the index record

      JU    EA01; // Jump to loop

EA99: NOP   0; 

      L     #s_Total_Num_Recs; // Total No Of records to DB_Status_Index
      T     DBW    0; 

END_FUNCTION_BLOCK

