FUNCTION_BLOCK "FB_HW_MTR_2DIR_MS"
TITLE =%version: 0.16 % CN: 40
//Function:
//Hardware driver for Motor 2 directions without LMS.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:11:44 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.16
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.16
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.16
//17258: Switch time added for manual mode              nlHdL    17-12-13   0.16
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.15
//PR13607: Add Started_Time statistical to HW           nlHdL    19-04-13   0.14
//13433: 2-dir hardware doesn't run in manual mode      nlHdL    09-04-13   0.13
//CR11547 Mofified init value Avaiable_IO & Safety_OK   nlHdL    01-11-12  0.12
//CR8095 Comments input CFG changed                     nlple    06-01-12  0.11
//CR8255 Added event 3902 HW: Motor Stopped             nlcsu    11-11-11  0.10
//PR6080 Added Statisticals ID                          nlHdL    07-12-10  0.09
//Updated sequence                                      nljbax   24-09-10  0.08
//Changed INC 1 into L 1                                nljbax   24-09-10  0.07
//Changed position i_Event_DB                           nljbax   24-09-10  0.06
//Changed according Coding Conventions                  nljbax   24-09-10  0.05
//Modified Input & output name & removed unused VAR     inPNa    15-09-10  0.04
//Correct block history                                 nllvdg   19-07-10  0.03
//Check-Out Check-In without any changes                inpna    05-07-10  0.02
//Initial version                                       nllvdg   21-06-10  0.01
//
//
//Description:
//Genrating Thermal Overload.                                
//Generating the Detailed status.
//Genrating Hardware Error.
//Genrating output to motor in Automatic & Manual mode.
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_CMD_Send_Stat : BOOL ;	//CMD: Send Statistical
  i_Event_DB : BLOCK_DB ;	//Data Structure: Event DataBlock 
  i_CFG_Motor_Switch_Time : INT  := 300;	//CFG: [ms] Time before the motor is switched from direction
  i_Available_IO : BOOL  := TRUE;	//Signal for indication IO is OK (no Fieldbus or IO error)
  i_IO_MS_Automatic_Mode : BOOL  := TRUE;	//HW: Maintenance Switch of motor in 'ON' position (ON=TRUE)
  i_IO_NOT_THO : BOOL  := TRUE;	//HW: Thermal overload signal (No Thermal overload=TRUE)
  i_CMD_Reset : BOOL ;	//CMD: Reset command
  i_CMD_Req_Motor_Run : BOOL ;	//CMD: Run motor
  i_CMD_Req_Motor_Reverse : BOOL ;	//CMD: Run motor Reverse Direction
  i_CMD_Manual_Mode : BOOL ;	//CMD: Activate manual mode
  i_CMD_Manual_Run : BOOL ;	//CMD: Manual run request
  i_CMD_Manual_Reverse : BOOL ;	//CMD: Manual reverse request
END_VAR
VAR_OUTPUT
  o_IO_MTR_Fwd : BOOL ;	//HW: Run signal to motor forward of conveyor
  o_IO_MTR_Rev : BOOL ;	//HW: Run signal to motor reverse of conveyor  
  o_ST_MS_Not_Automatic : BOOL ;	//ST: Maintenance Switch of motor in 'OFF' position
  o_ST_Manual_mode : BOOL ;	//ST: Manual mode
  o_ST_THO : BOOL ;	//ST: Thermal overload 
  o_Req_Halt : BOOL ;	//Request halt during switch
END_VAR
VAR
  s_Switch_delay : INT ;	//Timer to count down the switch time remaining.
  s_MTR_Pre_Switch_cnt : INT ;	//Timer since the conveyor stopped running.
  s_Switch_In_Progress : BOOL ;	//Indicating that the motor is switching
  s_FP_Switch : BOOL ;	//Positive edge of switching process
  s_FN_Switch : BOOL ;	//Negative edge of switching process
  s_Motor_Run : BOOL ;	//Motor run signal
  s_Copy_FN_o_IO_MTR_XX : BOOL ;	//Flank Negative of MTR Signal
  s_Statistical : STRUCT 	//Statisticals
   Start_Stop_Cnt : INT ;	//Number of times the drive was started counter
   Started_Time : INT ;	//Number of seconds the drive was started
  END_STRUCT ;	
END_VAR
VAR_TEMP
  t_Return_Value_Int : INT ;	//Return Value
  t_DB_Event_Num : INT ;	//Number of the local event DB
  t_Motor_Reserve : BOOL ;	//Motor reverse command Auto and Manual
END_VAR
BEGIN
NETWORK
TITLE =AA: Load DB Event Nr

      OPN   #i_Event_DB; // Load local event DB
      L     DBNO; 
      T     #t_DB_Event_Num; 

NETWORK
TITLE =BA: Handle Electrical Input statuses
//Some errors and statuses are coming directly from electrical inputs.
//If the IO becomes not available, those inputs must be ignored, to avoid 
//(as consequence of) all kind of meaningless status changes, 
//which are indicated to HMI.
      NOP   0; 

      CLR   ; 
      =     #s_Switch_In_Progress; 

// Thermal Overload / Error
      O     #i_CMD_Reset; 
      ON    #i_Available_IO; 
      R     #o_ST_THO; // Reset Thermal Overload error

      AN    #i_IO_NOT_THO; 
      A     #i_Available_IO; 
      S     #o_ST_THO; // Set MS Thermal overload


// Maintenance Switch of motor in 'OFF' position 
      AN    #i_IO_MS_Automatic_Mode; // HW: Maintenance Switch of motor in 'ON' position (ON=TRUE)
      A     #i_Available_IO; // AND IO available
      AN    #o_ST_THO; // AND_NOT Thermal overload
      =     #o_ST_MS_Not_Automatic; // THEN Maintenance Switch of motor in 'OFF' position 


//  Manual Mode
      A     #i_CMD_Manual_Mode; // If Motor not in 'Automatic' mode
      A     #i_Available_IO; // AND IO available
      A     #i_IO_MS_Automatic_Mode; // AND Maintenance Switch of motor in 'ON' position (ON=TRUE)
      AN    #o_ST_THO; // AND_NOT MS Thermal overload
      =     #o_ST_Manual_mode; // THEN Motor Not in 'Manual' position      


NETWORK
TITLE =CA: MTR pre switch timer
//IF the conveyor is already standing still for a longer time than the motor 
//switch time, then there is no need for a switch time. The is the counter that 
//checks how much time is already elapsed.
      AN    #s_Motor_Run; // If the motor is running
      JCN   CA02; // Then go to label DA02

      L     #s_MTR_Pre_Switch_cnt; // If the motor was not running, then take the pre-switch counter
      L     "MW_Prev_Cycle_Time"; 
      -I    ; // .. And count down
      JPZ   CA01; 
      L     0; 
CA01: T     #s_MTR_Pre_Switch_cnt; // ..Goes not below zero

      JU    CA99; 

CA02: L     #i_CFG_Motor_Switch_Time; // If the motor is running, then load
      T     #s_MTR_Pre_Switch_cnt; // the setting time in the pre-counter

CA99: NOP   0; 

NETWORK
TITLE =DA: Motor Switch delay

      A     #i_CMD_Req_Motor_Reverse; // If the motor gets a reverse command
      AN    #i_CMD_Manual_Mode; 
      O(    ; 
      A     #i_CMD_Manual_Mode; 
      A     #i_CMD_Manual_Reverse; 
      )     ; 
      =     #t_Motor_Reserve; 

      A     #t_Motor_Reserve; 
      FP    #s_FP_Switch; 
      O(    ; 
      A     #t_Motor_Reserve; // OR a forward command
      FN    #s_FN_Switch; 
      )     ; 
      JCN   DA01; 

      L     #s_MTR_Pre_Switch_cnt; // Then load the pre-counter in the switch counter.
      T     #s_Switch_delay; 

DA01: L     #s_Switch_delay; // Count down the switch delay
      L     "MW_Prev_Cycle_Time"; 
      -I    ; 
      JPZ   DA02; 
      L     0; 
DA02: T     #s_Switch_delay; // Go not below zero.

      L     #s_Switch_delay; 
      L     0; 
      >I    ; 
      JCN   DA99; 

      SET   ; // IF the switch time is not elapsed yet,
      =     #s_Switch_In_Progress; // ..Then indicate that it is busy.

DA99: NOP   0; 
NETWORK
TITLE =EA: Motor run signal

      A     #i_CMD_Manual_Run; // If 'Motor run request' in manual mode
      A     #i_CMD_Manual_Mode; 
      O     #i_CMD_Req_Motor_Run; // If the motor should run     
      AN    #s_Switch_In_Progress; // ..AND no switch is in progress
      A     #i_Available_IO; // ..AND the IO is available
      AN    #o_ST_MS_Not_Automatic; // AND maintenance switch is in auto
      AN    #o_ST_THO; // AND no thermal overload
      =     #s_Motor_Run; // Then indicate that the motor is running

      A     #i_CMD_Manual_Run; // If 'Motor run request' in manual mode 
      A     #i_CMD_Manual_Mode; 
      AN    #i_CMD_Manual_Reverse; // ..AND in forward mode 
      O(    ; 
      A     #i_CMD_Req_Motor_Run; // If the motor should run in automatic mode
      AN    #i_CMD_Manual_Mode; 
      AN    #i_CMD_Req_Motor_Reverse; // ..AND in forward mode
      AN    #o_ST_MS_Not_Automatic; // AND maintenance switch is in auto
      )     ; 
      AN    #s_Switch_In_Progress; // ..AND no switch is in progress
      A     #i_Available_IO; // ..AND the IO is available
      AN    #o_ST_THO; // AND no thermal overload
      =     #o_IO_MTR_Fwd; // Then give the run forward command

      A     #i_CMD_Manual_Run; // If 'Motor run request' in Autmatic mode
      A     #i_CMD_Manual_Mode; 
      A     #i_CMD_Manual_Reverse; // ..AND in reverse mode
      O(    ; 
      A     #i_CMD_Req_Motor_Run; // If the motor should run 
      AN    #i_CMD_Manual_Mode; 
      A     #i_CMD_Req_Motor_Reverse; // ..AND in reverse mode
      AN    #o_ST_MS_Not_Automatic; // AND maintenance switch is in auto
      )     ; 
      AN    #s_Switch_In_Progress; // ..AND no switch is in progress
      A     #i_Available_IO; // ..AND the IO is available
      AN    #o_ST_THO; // AND no thermal overload
      =     #o_IO_MTR_Rev; // Then give the run reverse command

      A     #s_Switch_In_Progress; // If the switch is in progress
      =     #o_Req_Halt; // ..Then send halt request to equipment layer
NETWORK
TITLE =FA: BPI counter

      A     #o_IO_MTR_Fwd; 
      O     #o_IO_MTR_Rev; 
      A     "M_OS_New_Second"; 
      JCN   FA01; 

      L     #s_Statistical.Started_Time; 
      L     1; 
      +I    ; 
      T     #s_Statistical.Started_Time; 

FA01: A     #o_IO_MTR_Fwd; 
      O     #o_IO_MTR_Rev; 
      FN    #s_Copy_FN_o_IO_MTR_XX; 
      JCN   FA02; 

      L     #s_Statistical.Start_Stop_Cnt; 
      L     1; 
      +I    ; 
      T     #s_Statistical.Start_Stop_Cnt; 

      CALL "FC_Write_Event" (
           i_Message_ID             := 3902,
           i_Event_value            := 1,
           i_DB_Event_Num           := #t_DB_Event_Num,
           o_Return_Value           := #t_Return_Value_Int);

FA02: A     #i_CMD_Send_Stat; 
      JCN   FA99; 

      CALL "FC_Write_Event" (
           i_Message_ID             := 2001,
           i_Event_value            := #s_Statistical.Start_Stop_Cnt,
           i_DB_Event_Num           := #t_DB_Event_Num,
           o_Return_Value           := #t_Return_Value_Int);

      L     0; 
      T     #s_Statistical.Start_Stop_Cnt; 

      CALL "FC_Write_Event" (
           i_Message_ID             := 2002,
           i_Event_value            := #s_Statistical.Started_Time,
           i_DB_Event_Num           := #t_DB_Event_Num,
           o_Return_Value           := #t_Return_Value_Int);

      L     0; 
      T     #s_Statistical.Started_Time; 

FA99: NOP   0; 
END_FUNCTION_BLOCK

