FUNCTION_BLOCK "FB_Rcv_CapacityInstr"
TITLE =%version: 0.03 %  CN: 40
//Function:
//Handle received message 'CapacityInstruction'
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:12:22 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.03
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.03
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.03
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    09-01-15   0.03
//15799: Block consistency update IO symbols, comment   nlHdL    23-09-13   0.02
//Initial Version                                       nlLvdG   31-05-13   0.01
//
//Description:
//Handle received message 'CapacityInstruction'
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_ANY_RCV_Msg_Body : ANY ;	//Any pointer to received message body
END_VAR
VAR
  s_CapacityInstr : "UDT_Msg_CapacityInst";	//Message Destination reply
END_VAR
VAR_TEMP
  t_Base_Address : DWORD ;	//Relative address of instance-DB
  t_AR2_Store_Restore : DWORD ;	//Backup addres register AR2
  t_ANY_Rcv_Msg_Body : ANY ;	//Any pointer to received message body
  t_Ret_Val_Int : INT ;	//Return value function call (int)
  t_RET_VAL : INT ;	//Return value function call (int)
  t_AR1_Backup : DWORD ;	//Backup of AR1 content
  t_Area_Zone_Section_ID : DINT ;	//Calculating Area_Zone_Section_ID
  t_Loop_Counter : INT ;	//Number of entries in TableDB
END_VAR
BEGIN
NETWORK
TITLE =AA: Copy i_ANY_RCV_Msg_Body on temps
//ANY pointer has to be copied to use as parameter for function calls
      TAR2  ; // Load 'base address' of instance-DB   
      AD    DW#16#FFFFFF; // Filter last 3 bytes
      T     #t_Base_Address; // 'relative address'

      TAR2  #t_AR2_Store_Restore; // AR2 Store

      L     P##i_ANY_RCV_Msg_Body; // 'area-crossing pointer'
      L     #t_Base_Address; // 'relative address'-mask
      +D    ; 
      LAR1  ; // 'absolute address' Source
      LAR2  P##t_ANY_Rcv_Msg_Body; //  address Destination

      L     W [AR1,P#0.0]; // Copy ANY pointer
      T     LW [AR2,P#0.0]; // Byte0=$10 (for S7), Byte1=data type
      L     W [AR1,P#2.0]; 
      T     LW [AR2,P#2.0]; // Byte2..3=Repetition factor
      L     W [AR1,P#4.0]; 
      T     LW [AR2,P#4.0]; // Byte4..5=DB number
      L     D [AR1,P#6.0]; 
      T     LD [AR2,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address

      LAR2  #t_AR2_Store_Restore; // AR2 Restore
NETWORK
TITLE =AA: Copy Received message body

      CALL "BLKMOV" (
           SRCBLK                   := #t_ANY_Rcv_Msg_Body,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := #s_CapacityInstr.Body);

NETWORK
TITLE =Write capacity to capacity table

      NOP   0; 
// Calculate Area_Zone_Section_ID                                     
      L     #s_CapacityInstr.Body.AreaID; 
      L     L#10000; 
      *D    ; 
      T     #t_Area_Zone_Section_ID; 

      L     #s_CapacityInstr.Body.ZoneID; 
      L     100; 
      *D    ; 
      L     #t_Area_Zone_Section_ID; 
      +I    ; 
      L     #s_CapacityInstr.Body.EquipmentID; 
      +D    ; 
      T     #t_Area_Zone_Section_ID; 

// OpenTable DB and calculate the number of entries
      OPN   "DB_CapacityTable"; 

      L     DBLG; 
      L     6; //one entry is 4 bytes long
      /D    ; 
      T     #t_Loop_Counter; 

// Set a pointer to the first entry
      L     P#DBX 0.0; 
      LAR1  ; 
      JU    BA01; 

// Set the pointer to the next entry
LOOP: L     P#6.0; 
      +AR1  ; 

// Decrease the loop counter
BA01: L     #t_Loop_Counter; 
      L     1; 
      -I    ; 
      T     #t_Loop_Counter; 

// Load and compare Area_Zone_Section_ID
      L     D [AR1,P#0.0]; 
      L     #t_Area_Zone_Section_ID; 
      ==D   ; 
      JC    BA03; 

// Check loop counter
      L     #t_Loop_Counter; 
      L     0; 
      <=I   ; 
      JCN   LOOP; 
      JC    BA99; 

// Succes write data (RETVAL = 0)
BA03: L     #s_CapacityInstr.Body.Capacity; 
      T     W [AR1,P#4.0]; 

BA99: NOP   0; 

END_FUNCTION_BLOCK

