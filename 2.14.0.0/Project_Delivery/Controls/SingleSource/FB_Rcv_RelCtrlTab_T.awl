FUNCTION_BLOCK "FB_Rcv_RelCtrlTab_T"
TITLE =%version: 0.04 % CN: 31
//Function:
//Handle received message body 'ReleaseControlTableUpdate'
//                                                                        
//History:
//This version  %created_by: nlhdl %
//              %date_created: Monday, June 19, 2017 4:52:58 PM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#23460: Check DB length for Msgs with tableindex    nlHdL    19-06-17   0.04
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.03
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.03
//ra#9540: TimeInterval ReleaseControlUpdate in 0,1 sec nlHdL    24-11-15   0.03
//7632: Add TFC blocks to platform 4                    nlHdL    30-07-15   0.02
//19370: Add 2e item to Releasecontrol table update     nlHdL    19-05-14   0.02
//18060: Update messages ID's for Vibes 3.2             nlHdL    31-03-14   0.01
//Initial Revision based on version 0.05 TTC            nlHdL    26-02-14   0.01
//
//Description:
//Handle received message body 'ReleaseControlTableUpdate'
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_ANY_RCV_Msg_Body : ANY ;	//Any pointer to received message body
  i_DB_Event_Num : INT ;	//Number of the Event DB
END_VAR
VAR
  s_RelCtrlUpdate : "UDT_Msg_RelCtrlTab_T";	
END_VAR
VAR_TEMP
  t_ANY_Rcv_Msg_Body : ANY ;	//Any pointer to received message body
  t_Base_Address : DWORD ;	//Relative address of instance-DB
  t_AR2_Store_Restore : DWORD ;	//Backup addres register AR2
  t_Area_Zone_Section_ID : DINT ;	//Calculating Area_Zone_Section_ID
  t_Ret_Val_Int : INT ;	//Return value function call (int)
  t_RelCtrl_DB_number : INT ;	//Release Control table DB number
  t_Loop_Counter : INT ;	//Number of entries in TableDB
END_VAR
BEGIN
NETWORK
TITLE =AA: Copy i_ANY_RCV_Msg_Body on temps
//ANY pointer has to be copied to use as parameter for function calls
      TAR2  ; // Load 'base address' of instance-DB   
      AD    DW#16#FFFFFF; // Filter last 3 bytes
      T     #t_Base_Address; // 'relative address'

      TAR2  #t_AR2_Store_Restore; // AR2 Store

      L     P##i_ANY_RCV_Msg_Body; // 'area-crossing pointer'
      L     #t_Base_Address; // 'relative address'-mask
      +D    ; 
      LAR1  ; // 'absolute address' Source
      LAR2  P##t_ANY_Rcv_Msg_Body; //  address Destination

      L     W [AR1,P#0.0]; // Copy ANY pointer
      T     LW [AR2,P#0.0]; // Byte0=$10 (for S7), Byte1=data type
      L     W [AR1,P#2.0]; 
      T     LW [AR2,P#2.0]; // Byte2..3=Repetition factor
      L     W [AR1,P#4.0]; 
      T     LW [AR2,P#4.0]; // Byte4..5=DB number
      L     D [AR1,P#6.0]; 
      T     LD [AR2,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address

      LAR2  #t_AR2_Store_Restore; // AR2 Restore
NETWORK
TITLE =BA: Copy received message body

      CALL "BLKMOV" (
           SRCBLK                   := #t_ANY_Rcv_Msg_Body,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := #s_RelCtrlUpdate.Body);
NETWORK
TITLE =CA: Open Table

      OPN   "DB_RelCtrlTabIndex_T"; 
      L     DBLG; 
      L     6; //one entry is 6 bytes long
      /D    ; 
      T     #t_Loop_Counter; 
      L     0; 
      ==I   ; 
      BEC   ; // End if no entries present

// Calculate Area_Zone_Section_ID                                     
      L     #s_RelCtrlUpdate.Body.AreaID; 
      L     L#10000; 
      *D    ; 
      T     #t_Area_Zone_Section_ID; 

      L     #s_RelCtrlUpdate.Body.ZoneID; 
      L     100; 
      *D    ; 
      L     #t_Area_Zone_Section_ID; 
      +D    ; 
      L     #s_RelCtrlUpdate.Body.EquipmentID; 
      +D    ; 
      T     #t_Area_Zone_Section_ID; 

// Set a pointer to the first entry
      L     P#DBX 0.0; 
      LAR1  ; 
      JU    CA02; 

// Set the pointer to the next entry
CA01: L     P#6.0; 
      +AR1  ; 

// Decrease the loop counter
CA02: L     #t_Loop_Counter; 
      L     1; 
      -I    ; 
      T     #t_Loop_Counter; 

// Load and compare Area_Zone_Section_ID
      L     D [AR1,P#0.0]; 
      L     #t_Area_Zone_Section_ID; 
      ==D   ; 
      JC    CA90; 

// Check loop counter
      L     #t_Loop_Counter; 
      L     0; 
      <=I   ; 
      JCN   CA01; 

// Return no data (0) with failure (RETVAL = -1)
      L     0; 
      T     #t_RelCtrl_DB_number; 

      CALL "FC_Write_Event" (// Report event "Received Release Control Table Update rejected"(3208)
           i_Message_ID             := 3208,
           i_Event_value            := 1,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Val_Int);

      BEU   ; 

// Return data with succes (RETVAL = 0)
CA90: L     W [AR1,P#4.0]; 
      T     #t_RelCtrl_DB_number; 

NETWORK
TITLE =DA: Handle received message body

      NOP   0; 
// Copy received data to release control DB
      OPN   DB [#t_RelCtrl_DB_number]; // Open release control DB

      L     #s_RelCtrlUpdate.Body.TableEntries[1].TubType; 
      L     1; 
      ==I   ; 
      JCN   DA01; 

      L     #s_RelCtrlUpdate.Body.TableEntries[1].NumberOfTubs; // Copy number of tubs
      T     DBW    2; 

      L     #s_RelCtrlUpdate.Body.TableEntries[1].TimeInterval; // Copy time interval (capacity restriction)
      L     100; //Convert Time interval of 0,1 sec to msec
      *I    ; 
      T     DBW    4; 

      SET   ; 
      =     DBX    0.0; 

      JU    DA10; 

//OBT Tubtype
DA01: L     #s_RelCtrlUpdate.Body.TableEntries[1].TubType; 
      L     2; 
      ==I   ; 
      JCN   DA10; 

      L     #s_RelCtrlUpdate.Body.TableEntries[1].NumberOfTubs; // Copy number of tubs
      T     DBW    6; 

      L     #s_RelCtrlUpdate.Body.TableEntries[1].TimeInterval; // Copy time interval (capacity restriction)
      L     100; //Convert Time interval of 0,1 sec to msec
      *I    ; 
      T     DBW    8; 

      SET   ; 
      =     DBX    0.0; 

//Entry[2]
DA10: L     #s_RelCtrlUpdate.Body.TableEntries[2].TubType; 
      L     1; 
      ==I   ; 
      JCN   DA11; 

      L     #s_RelCtrlUpdate.Body.TableEntries[2].NumberOfTubs; // Copy number of tubs
      T     DBW    2; 

      L     #s_RelCtrlUpdate.Body.TableEntries[2].TimeInterval; // Copy time interval (capacity restriction)
      L     100; //Convert Time interval of 0,1 sec to msec
      *I    ; 
      T     DBW    4; 

      SET   ; 
      =     DBX    0.0; 

      JU    DA99; 

//OBT Tubtype
DA11: L     #s_RelCtrlUpdate.Body.TableEntries[2].TubType; 
      L     2; 
      ==I   ; 
      JCN   DA99; 

      L     #s_RelCtrlUpdate.Body.TableEntries[2].NumberOfTubs; // Copy number of tubs
      T     DBW    6; 

      L     #s_RelCtrlUpdate.Body.TableEntries[2].TimeInterval; // Copy time interval (capacity restriction)
      L     100; //Convert Time interval of 0,1 sec to msec
      *I    ; 
      T     DBW    8; 

      SET   ; 
      =     DBX    0.0; 

DA99: NOP   0; 
END_FUNCTION_BLOCK

