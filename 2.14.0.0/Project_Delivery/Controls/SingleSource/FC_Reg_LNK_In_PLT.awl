FUNCTION "FC_Reg_LNK_In_PLT" : VOID
TITLE =%version: 0.07 % CN: 33
//Function:
//This FC makes and Register a LNK with LIC or TIC into PLT DB. 
//
//History:
//This version  %created_by:  nlhdl %
//              %date_created:  Thursday, July 13, 2017 9:56:23 AM %
//              %release:  VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#23692: comment update description                  nlHdL    13-07-17   0.07
//ra#22358: Implement ECS_NO_REPORT                     nldy     21-04-17   0.06
//ra#20534: Reg and Dereg from non tracking PLT         nlHdL    15-03-17   0.05
//ra#19933: Check LIC before send register              nlHdL    23-01-17   0.04
//ra#13116: section clear LNK data when not Auto        nlHdL    12-05-16   0.03
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.02
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.02
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.02
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.02
//Initial Version based on version 1.05 ECS-P GEN       nlHHop   01-04-14   0.01
//
//Description:
//When the last enrty is an Leading edge without data, a new LNK with LIC
//or TIC is generated and assigned to the entry in the PLT DB.
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_DB_PLT_Num : INT ;	//Number of DB Position Leading Trailing Edge
  i_Default_Record : INT ;	//Number of default record to be used to create link.
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_TEMP
  t_DB_PLT : INT ;	//Number of PLT DB
  t_position : INT ;	//Position entry in PLT DB
  t_Info : INT ;	//Info entry in PLT DB
  t_Link : INT ;	//Link entry in PLT DB
  t_LNK : INT ;	//New LNK number which was generated
  t_DB_Event_Nr : INT ;	//Number of DB Event
  t_Return_Value_Int : INT ;	//Dummy return value
  t_ECS : INT ;	//ECS number of new generated LNK  
  t_LIC : INT ;	//LIC number of new generated LNK
  t_AR1_Backup : DWORD ;	//Back up AR1
  t_ECS_No_Report : BOOL ;	//No routing messages to HL
END_VAR
BEGIN
NETWORK
TITLE =AA: Read PLT Header (Record 1)

      L     #i_DB_PLT_Num; 
      T     #t_DB_PLT; // Determine PLT block DB number

      OPN   DB [#t_DB_PLT]; 

      AN    DBX   10.5; //If not operational end block
      BEC   ; 
      AN    DBX   10.6; //If not Item in Handover end block
      BEC   ; 

      L     DBW    0; 
      L     1; 
      >I    ; // Check if entry > 1
      JCN   AA01; 
      L     DBW    0; // Number of entries used in PLT DB
AA01: L     8; // 8 bytes for each entry
      *I    ; 
      L     6; 
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Pointer to last used entry in PLT DB  

      L     DBW [AR1,P#0.0]; 
      T     #t_position; 

      L     DBW [AR1,P#4.0]; 
      T     #t_Info; 

      L     DBW [AR1,P#6.0]; 
      T     #t_Link; 

      L     #i_DB_Event_Num; 
      T     #t_DB_Event_Nr; 
NETWORK
TITLE =BA: Read PLT Header (Record 2)

      L     #t_Info; 
      L     1; 
      <>I   ; 
      JCN   BA99; 

//If No Leading edge then check previous entry

      TAR1  ; // Read Entry pointer of address-register
      L     P#14.0; // 14 bytes, because the header of a PLT DB is 14 bytes long.
      -D    ; // Entry pointer = Entry pointer - P#6.0
      JMZ   BA98; // IF Entry pointer > 0 End function

      L     P#6.0; // THEN Entry pointer = -14 + 8 = -6
      +D    ; 
      LAR1  ; // Store Entry pointer in address-register 

      L     DBW [AR1,P#0.0]; 
      T     #t_position; 

      L     DBW [AR1,P#4.0]; 
      T     #t_Info; 

      L     DBW [AR1,P#6.0]; 
      T     #t_Link; 

      JU    BA99; 

BA98: BE    ; //No previous entry End block

BA99: NOP   0; 
NETWORK
TITLE =DA: Create LNK and write in PLT DB

      L     #t_Info; 
      L     1; 
      ==I   ; 
      JCN   DA99; 

      L     #t_Link; 
      L     0; 
      ==I   ; 
      JCN   DA99; 

      TAR1  #t_AR1_Backup; 

//Create new Records for default LNK record. ECS, LIC or NIR or TIC with LNK number
      CALL "FC_Gen_Default_LNK" (
           i_LNK                    := 0,
           i_Default_Record         := #i_Default_Record,
           i_DB_Event_Num           := #t_DB_Event_Nr,
           o_LNK                    := #t_LNK);

//Check if entry 1 or 2 is leading and write LNK number into PLT DB
      OPN   DB [#t_DB_PLT]; 

      LAR1  #t_AR1_Backup; 

      L     #t_LNK; 
      T     DBW [AR1,P#6.0]; 

//Write PLT number into LNK record
      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #t_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".DB_PLT_Number,
           i_DB                     := "DB_LNK_List",
           i_INT                    := #t_DB_PLT,
           i_DB_Event_Num           := #t_DB_Event_Nr);

//Write Register event
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".ECS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_Nr,
           o_INT                    := #t_ECS);

//Set expected item bit on true
      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Expected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := TRUE,
           i_DB_Event_Num           := #t_DB_Event_Nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Unexpected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #t_DB_Event_Nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Hand_Over,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #t_DB_Event_Nr);

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_Nr,
           o_INT                    := #t_LIC);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.No_Report,
           i_DB                     := "DB_ECS_List",
           i_DB_Event_Num           := #t_DB_Event_Nr,
           o_BOOL                   := #t_ECS_No_Report);

      AN    #t_ECS_No_Report; 
      A(    ; 
      L     #t_LIC; 
      L     0; 
      >I    ; 
      )     ; 
      JCN   DA99; 
//Only send register if LIC is present & reports are allowed

      CALL "FC_Write_Event" (// Report Registerpackage (1205)
           i_Message_ID             := 1205,
           i_Event_value            := #t_LNK,
           i_DB_Event_Num           := #t_DB_Event_Nr,
           o_Return_Value           := #t_Return_Value_Int);

DA99: NOP   0; 
END_FUNCTION

