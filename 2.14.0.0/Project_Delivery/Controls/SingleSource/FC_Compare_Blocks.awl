FUNCTION "FC_Compare_Blocks" : VOID
TITLE =%version: 0.06 % CN: 31
//Function:
//Compare the contents of two blocks
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:04:15 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.06
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.06
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.06
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.06
//CR19512 Update sources according S7 Manager           nlHdL    08-03-13   0.05
//CR8255 Update internal logging event value            nlcsu    11-11-11   0.04
//Update compile number CN30 -> CN 31                   nlMRe    07-09-10   0.03
//Update FC_Event to FC_Write_Event                     nlMRe    06-09-10   0.02

//
//Description:                               
//This module compare two blocks, indicated by two ANYs to be equal.
//The blocks must have the same length and both contain BYTEs or CHARs
//
//Possible retrun values:
//1: Blocks are equal
//0: Blocks are not equal
//-1: Block do have a different length
//-2: Both ANYs are or not of BYTE or CHAR type. 
//This module is called by the application when it has a message to be sent.
//This module will put the message, indicated by the ANY Message_From_Application,
//into the Mailbox-Out which is of the FIFO type.
// 
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_ANY_Block_1 : ANY ;	//ANY pointer to data for compare (same length and both contain BYTEs or CHARs)
  i_ANY_Block_2 : ANY ;	//ANY pointer to data for compare (same length and both contain BYTEs or CHARs)
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_OUTPUT
  o_RET_VAL_Compare : INT ;	//1: Equal, 0: Not Equal, -1: Different block lengths 
END_VAR
VAR_TEMP
  t_P_Block_1 : DWORD ;	//Temporary any pointer 1
  t_P_Block_2 : DWORD ;	//Temporary any pointer 2
  t_Length_Block_1 : INT ;	//Temporary Length block 1
  t_DB_Num_Block_1 : INT ;	//Temporary DB Num block 1
  t_Length_Block_2 : INT ;	//Temporary Length block 1
  t_DB_Num_Block_2 : INT ;	//DB Num block 2
  t_Num_Of_DWORDs : INT ;	//Temporary Number of words
  t_Integer : INT ;	//Temporary storage
  t_Ret_Event : INT ;	//Return value for Write Event
  t_1_BYTE : BOOL ;	//Temporary byte
  t_1_WORD : BOOL ;	//Temporary word
END_VAR
BEGIN
NETWORK
TITLE =AA: Prepare the compare

      L     P##i_ANY_Block_1; //Determine the length of both blocks
      LAR1  ; 
      L     W [AR1,P#2.0]; 
      T     #t_Length_Block_1; 

      L     P##i_ANY_Block_2; 
      LAR2  ; 
      L     W [AR2,P#2.0]; 
      T     #t_Length_Block_2; 

      L     #t_Length_Block_1; 
      L     #t_Length_Block_2; 
      <>I   ; 
      JCN   AA00; 
      -I    ; 
      T     #t_Integer; 

      L     -1; //-1: Blocks do have a different length
      T     #o_RET_VAL_Compare; 

      CALL "FC_Write_Event" (// Report event "At least 1 byte is out of range" (3117)
           i_Message_ID             := 3117,
           i_Event_value            := 1,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Event);

      BEU   ; 

AA00: NOP   0; //Check both ANYs on their type
      O(    ; 
      L     B#16#2; //On 2: BYTE 
      L     B [AR1,P#1.0]; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     B#16#3; //or on 3: CHAR
      ==I   ; 
      )     ; 
      JCN   AA01; 
      O(    ; 
      L     B#16#2; 
      L     B [AR2,P#1.0]; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     B#16#3; 
      ==I   ; 
      )     ; 
      JC    AA02; 

      L     B [AR2,P#1.0]; 
      T     #t_Integer; 
      JU    AA03; 

AA01: L     B [AR1,P#1.0]; 
      T     #t_Integer; 

AA03: CALL "FC_Write_Event" (// Report event "Incorrect data type" (3116)
           i_Message_ID             := 3116,
           i_Event_value            := #t_Integer,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Event);

      L     -2; //-2: ANY must be of type BYTE or CHAR
      T     #o_RET_VAL_Compare; 
      BEU   ; 

AA02: NOP   0; 

      L     W [AR1,P#4.0]; //Open Data Block of Block 1 as Shared DB
      T     #t_DB_Num_Block_1; 
      OPN   DB [#t_DB_Num_Block_1]; 

      L     W [AR2,P#4.0]; //Open Data Block of Block 2 as Instance DB
      T     #t_DB_Num_Block_2; 
      OPN   DI [#t_DB_Num_Block_2]; 

      L     D [AR1,P#6.0]; //Load Pointer out of ANY 1
      T     #t_P_Block_1; 

      L     D [AR2,P#6.0]; //Load Pointer out of ANY 2
      T     #t_P_Block_2; 

      L     #t_Length_Block_1; 
      SRD   1; //Shift bit 0 out
      A     <>0; 
      =     #t_1_BYTE; 
      SRD   1; //Shift bit 1 out
      A     <>0; 
      =     #t_1_WORD; 
      T     #t_Num_Of_DWORDs; //Rest: bit 3 to 15    
NETWORK
TITLE =BA: Fulfill the Compare 
//First compare in DWORDS until the rest is maller then a DWORD, continue by  
//comparing a WORD and/or a BYTE when possible.
      LAR1  #t_P_Block_1; 
      LAR2  #t_P_Block_2; 

      L     0; 
      L     #t_Num_Of_DWORDs; 
      ==I   ; 
      JC    BA07; //* 1st. compare in DWORDS
BA02: T     #t_Num_Of_DWORDs; 

      L     DBD [AR1,P#0.0]; 
      L     DID [AR2,P#0.0]; 
      <>D   ; 
      JC    BA99; 

      TAR1  ; //Increase pointers to next DWORD
      L     P#4.0; 
      +D    ; 
      LAR1  ; 
      TAR2  ; 
      L     P#4.0; 
      +D    ; 
      LAR2  ; 
      L     #t_Num_Of_DWORDs; 
      LOOP  BA02; 
BA07: A     #t_1_WORD; //* 2nd. Compare last WORD
      JCN   BA03; 

      L     DBW [AR1,P#0.0]; 
      L     DIW [AR2,P#0.0]; 
      <>I   ; 
      JC    BA99; 

      TAR1  ; //Increase pointers to next WORD
      L     P#2.0; 
      +D    ; 
      LAR1  ; 
      TAR2  ; 
      L     P#2.0; 
      +D    ; 
      LAR2  ; 
BA03: A     #t_1_BYTE; //* 3Th. compare last BYTE
      JCN   BA04; 

      L     DBB [AR1,P#0.0]; 
      L     DIB [AR2,P#0.0]; 
      <>I   ; 
      JC    BA99; 
BA04: L     1; //1: Both blocks are equal 
      T     #o_RET_VAL_Compare; 
      BEU   ; 
BA99: L     0; //0: Both blocks are not equal
      T     #o_RET_VAL_Compare; 
END_FUNCTION

