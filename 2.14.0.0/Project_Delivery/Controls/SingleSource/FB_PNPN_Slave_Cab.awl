FUNCTION_BLOCK "FB_PNPN_Slave_Cab"
TITLE =%version: 0.09 % CN: 34
//Function:
//Handle the status of the cabinet and to send and receive all messages of the coupler.
//This block also handles the lifesign request and reply messages.
//
//History:
//This version  %created_by:  nlhdl %
//              %date_created:  Monday, April 23, 2018 08:37:52 AM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ina#9916: PNPN slave change Lifesign too 30s 3 times  nlHdL    23-04-18   0.09
//Update based on SIN_T1_CONV_COMPONENT                 inajos   13-12-16   0.08
//ra#17711: Rename naming FIFO DB's HOO                 nlHdL    05-12-16   0.07
//ra#12660: Remove not used input event DB              nlJClo   08-04-16   0.06
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.05
//8673: Reset:Restart for errors via  PNPN interface    nlHdL    29-10-15   0.05
//7632: Add blocks for platform 4. PNPN Coupler         nlHdL    30-07-15   0.04
//20270:Add slave err to the o_Link_DataInterface_err   nlHdL    12-08-14   0.04
//17442: Generic block for handling Fieldbus device     nlHdL    18-04-14   0.03
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.02
//Initial Revision                                      nlHHop   17-04-13   0.01
//
//Description:
//When a cabinet with a ProfiNET to ProfiNET coupler is used this block is 
//required to handle the status of the cabinet and to send and receive all 
//messages to and from the coupler. This block also handles the lifesign request 
//and reply messages.
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_Available_IO : BOOL  := TRUE;	//Signal for indication IO is OK (no Fieldbus or IO error)
  i_CMD_Reset : BOOL ;	//CMD: Reset command
  i_Event_DB : BLOCK_DB ;	//Data Structure: Event DataBlock 
  i_ANY_Input_WR_Inf_Rec : ANY ;	//ANY pointer to the status information record of the writing PN/Fieldbus module
  i_ANY_Input_RD_Inf_Rec : ANY ;	//ANY pointer to the status information record of the reading PN/Fieldbus module
  i_ANY_Output_RD_Inf_Rec : ANY ;	//ANY pointer to update the information record of the reading PN/Fieldbus module
  i_CFG_Send_Lifesign_Req : BOOL ;	//CFG: True = send lifesign request, false = send lifesign reply
  i_CFG_Lifesign_Interval : INT  := 30;	//CFG: [sec] Interval for sending a LifeSignRequest msg (0 = send no LifeSigns)
  i_CFG_NumLifeSgnMiss_Err : INT  := 3;	//CFG: [Num] Number of Lifesign responses to be missed before an error is set
  i_CFG_Suppress_LS_Error : BOOL ;	//CFG: Suppress lifesign error if PN handover data communication is not used
  i_DB_HOO_FIFO_SND : BLOCK_DB ;	//Data Structure: TCTC DB send message FIFO for PN/PN coupler
  i_DB_Send_FIFO_Pending : BLOCK_DB ;	//Data Structure: TCTC DB send pending messages FIFO
  i_DB_Recv_FIFO_PNPN : BLOCK_DB ;	//Data Structure: TCTC DB receive message FIFO for PN/PN coupler
  i_DB_HOO_FIFO_RCV : BLOCK_DB ;	//Data Structure: TCTC DB receive Handover message FIFO
  i_FieldB_NotPrsnt : BOOL ;	//Fieldbus module is not present
  i_FieldB_Error : BOOL ;	//Fieldbus module has an error
END_VAR
VAR_OUTPUT
  o_Link_DataInterface_Err : BOOL ;	//Error in lifesign message handling of data interface
  o_ST_FieldB_NotPrsnt : BOOL ;	//ST: Fieldbus Slave not present
  o_ST_FieldB_Error : BOOL ;	//ST: Fieldbus Slave has on error
END_VAR
VAR
  s_FB_PNPN_Handle_Msgs : "FB_PNPN_Handle_Msgs";	//Block call static FB_PNPN_Handle_Msgs
  s_FB_PNPN_LifeSign_Msg : "FB_PNPN_LifeSign_Msg";	//Block call static FB_TCTC_LifeSign_Msg
  s_FB_PNPN_Snd_Rcv_Data : "FB_PNPN_Snd_Rcv_Data";	//Block call static FB_PNPN_Snd_Rcv_Data
  s_FB_PNPN_Pending_Msgs : "FB_PNPN_Pending_Msgs";	//Block call statis FB_PNPN_Pending_Msgs
  s_Rcv_LifeSign_Msgs : "UDT_PN_Msg_Lifesign";	
  s_PNPN_Received_Message : "UDT_PN_Msg_Rcv_Body";	//Structure PNPN Received message
  s_ER_Slave_Not_Prsnt : BOOL ;	//Error Slave not present
  s_ER_Slave_Error : BOOL ;	//Error Slave error
  s_Lifesign_Error : BOOL ;	//Lifesign error to the parent
  s_New_Message_Received : BOOL ;	//New Pending message received
END_VAR
VAR_TEMP
  t_ANY_Input_WR_Inf_Rec : ANY ;	//Copy of input any pointer
  t_ANY_Input_RD_Inf_Rec : ANY ;	//Copy of input any pointer
  t_ANY_Output_RD_Inf_Rec : ANY ;	//Copy of input any pointer
  t_Base_Address : DWORD ;	
  t_AR2_Store_Restore : DWORD ;	//Backup addres register AR2
  t_Restart_Request_FIFO : BOOL ;	//Restart request from FIFO (PNPN_Send or PNPN Receive)
END_VAR
BEGIN
NETWORK
TITLE =AA: Get offset from instance DB
//The 'base address' is used to get the absolute address of the intances-DB's 
//out of the 'central' DB (e.g. DB_Setting).
//During a 'call' of a FB, the start-address of the pointer to the instance-DB 
//can be read out of the last 3 bytes of AR2 (Address Register). A 'Mask' byte is 
//used to filter the last 3 bytes out of AR2.
//
//AR2:         10000ZZZ 00000yyy yyyyyyyy yyyyyxxx
//Mask:        00000000 11111111 11111111 11111111
//             ----------------------------------- +
//t_AR2_Mask:  00000000 00000yyy yyyyyyyy yyyyyxxx
// 
//   Z=Operand area      y=Byte address    x=Bit address
//
      NOP   0; 
// Determine base address
      TAR2  ; // Load 'base address' of instance-DB   
      AD    DW#16#FFFFFF; // Filter last 3 bytes
      T     #t_Base_Address; // 'relative address'

NETWORK
TITLE =BA: Reset and detect errors
//Manage detailed statuses
      SET   ; 
      R     #t_Restart_Request_FIFO; 

      OPN   #i_DB_HOO_FIFO_SND; 
      L     DBNO; 
      L     1; 
      >I    ; 
      JCN   BA01; 

      A     DBX    1.0; 
      S     #t_Restart_Request_FIFO; 
      R     DBX    1.0; 

BA01: OPN   #i_DB_HOO_FIFO_RCV; 
      L     DBNO; 
      L     1; 
      >I    ; 
      JCN   BA02; 

      A     DBX    1.0; 
      S     #t_Restart_Request_FIFO; 
      R     DBX    1.0; 

BA02: O     #i_CMD_Reset; 
      O     #t_Restart_Request_FIFO; 
      ON    #i_Available_IO; 
      R     #s_ER_Slave_Not_Prsnt; 
      R     #s_ER_Slave_Error; 

      A     #i_FieldB_NotPrsnt; 
      A     #i_Available_IO; 
      S     #s_ER_Slave_Not_Prsnt; 

      A     #i_FieldB_Error; 
      A     #i_Available_IO; 
      S     #s_ER_Slave_Error; 

NETWORK
TITLE =CA: Handle incoming messages from PN/PN coupler
//This network handles the incoming messages from the PN/PN coupler. The messages
//are checked and split-up into handover messages and lifesign messages. The 
//handover messages will then be copied to the handover FIFO DB and the lifesign 
//messages will be copied to the lifesign FIFO DB.
      CALL #s_FB_PNPN_Handle_Msgs (
           i_DB_Recv_FIFO_PNPN      := #i_DB_Recv_FIFO_PNPN,
           i_DB_Recv_HandOver_FIFO  := #i_DB_HOO_FIFO_RCV,
           i_Any_Recv_LifeSign_FIFO := #s_Rcv_LifeSign_Msgs,
           o_PNPN_Received_Message  := #s_PNPN_Received_Message,
           o_New_Message_Received   := #s_New_Message_Received);

NETWORK
TITLE =DA: Handle lifesign request and lifesign reply message
//This network handles the lifesign messages to check if the message 
//communication is working. Input "i_CFG_Send_Lifesign_Req" can be used to 
//configure if this side of the PN/PN coupler will be used as server (send 
//lifesign requests) or as client (respond to lifesign requests with a lifesign 
//response).
      CALL #s_FB_PNPN_LifeSign_Msg (
           i_ID                     := #i_ID,
           i_DB_Send_FIFO           := #i_DB_HOO_FIFO_SND,
           i_Any_Recv_LifeSign_FIFO := #s_Rcv_LifeSign_Msgs,
           i_CFG_Send_Lifesign_Req  := #i_CFG_Send_Lifesign_Req,
           i_CFG_Lifesign_Interval  := #i_CFG_Lifesign_Interval,
           i_CFG_NumLifeSgnMiss_Err := #i_CFG_NumLifeSgnMiss_Err,
           i_CFG_Suppress_LS_Error  := #i_CFG_Suppress_LS_Error,
           o_LifeSign_Err           := #s_Lifesign_Error);

NETWORK
TITLE =DB: Handle Pending messages
//THis network handles the pending messages used for handling screened items 
//which 
//are pending for a final decision.
      CALL #s_FB_PNPN_Pending_Msgs (
           i_ID                     := #i_ID,
           i_DB_Event               := #i_Event_DB,
           i_PNPN_Received_Message  := #s_PNPN_Received_Message,
           i_New_Message_Received   := #s_New_Message_Received,
           i_DB_FIFO_Snd_Pending    := #i_DB_Send_FIFO_Pending);

NETWORK
TITLE =EA: Copy ANY pointer to use as parameter for function calls

      NOP   0; 
// Store content of AR2
      TAR2  #t_AR2_Store_Restore; // AR2 Store

//Copy ANY pointer of i_ANY_Input_WR_Inf_Rec to use as parameter for function calls
      L     P##i_ANY_Input_WR_Inf_Rec; // 'area-crossing pointer'
      L     #t_Base_Address; // 'relative address'-mask
      +D    ; 
      LAR1  ; // 'absolute address' Source
      LAR2  P##t_ANY_Input_WR_Inf_Rec; //  address Destination

      L     W [AR1,P#0.0]; // Copy ANY pointer
      T     LW [AR2,P#0.0]; // Byte0=$10 (for S7), Byte1=data type
      L     W [AR1,P#2.0]; 
      T     LW [AR2,P#2.0]; // Byte2..3=Repetition factor
      L     W [AR1,P#4.0]; 
      T     LW [AR2,P#4.0]; // Byte4..5=DB number
      L     D [AR1,P#6.0]; 
      T     LD [AR2,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address

//Copy ANY pointer of i_ANY_Input_RD_Inf_Rec to use as parameter for function calls
      L     P##i_ANY_Input_RD_Inf_Rec; // 'area-crossing pointer'
      L     #t_Base_Address; // 'relative address'-mask
      +D    ; 
      LAR1  ; // 'absolute address' Source
      LAR2  P##t_ANY_Input_RD_Inf_Rec; //  address Destination

      L     W [AR1,P#0.0]; // Copy ANY pointer
      T     LW [AR2,P#0.0]; // Byte0=$10 (for S7), Byte1=data type
      L     W [AR1,P#2.0]; 
      T     LW [AR2,P#2.0]; // Byte2..3=Repetition factor
      L     W [AR1,P#4.0]; 
      T     LW [AR2,P#4.0]; // Byte4..5=DB number
      L     D [AR1,P#6.0]; 
      T     LD [AR2,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address

//Copy ANY pointer of i_ANY_Output_RD_Inf_Rec to use as parameter for function calls
      L     P##i_ANY_Output_RD_Inf_Rec; // 'area-crossing pointer'
      L     #t_Base_Address; // 'relative address'-mask
      +D    ; 
      LAR1  ; // 'absolute address' Source
      LAR2  P##t_ANY_Output_RD_Inf_Rec; //  address Destination

      L     W [AR1,P#0.0]; // Copy ANY pointer
      T     LW [AR2,P#0.0]; // Byte0=$10 (for S7), Byte1=data type
      L     W [AR1,P#2.0]; 
      T     LW [AR2,P#2.0]; // Byte2..3=Repetition factor
      L     W [AR1,P#4.0]; 
      T     LW [AR2,P#4.0]; // Byte4..5=DB number
      L     D [AR1,P#6.0]; 
      T     LD [AR2,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address

// Restore content of AR2
      LAR2  #t_AR2_Store_Restore; // AR2 Restore

NETWORK
TITLE =FA: Send and receive data via acyclic part of PN/PN coupler
//This network sends and receives the messages from and to the transport 
//controller connected to the other side of the PN/PN coupler.
      NOP   0; 
// Send and receive data from and to the LifeSign message FIFO DB's
      CALL #s_FB_PNPN_Snd_Rcv_Data (
           i_Available_IO           := #i_Available_IO,
           i_ANY_Input_WR_Inf_Rec   := #t_ANY_Input_WR_Inf_Rec,
           i_ANY_Input_RD_Inf_Rec   := #t_ANY_Input_RD_Inf_Rec,
           i_ANY_Output_RD_Inf_Rec  := #t_ANY_Output_RD_Inf_Rec,
           i_DB_Send_FIFO           := #i_DB_HOO_FIFO_SND,
           i_DB_Send_Pending_FIFO   := #i_DB_Send_FIFO_Pending,
           i_DB_Recv_FIFO           := #i_DB_Recv_FIFO_PNPN);

NETWORK
TITLE =GA: Write to output

      A     #s_ER_Slave_Not_Prsnt; 
      O     #s_ER_Slave_Error; 
      O     #s_Lifesign_Error; 
      =     #o_Link_DataInterface_Err; 

      OPN   #i_DB_HOO_FIFO_SND; 
      L     DBNO; 
      L     1; 
      >I    ; 
      JCN   GA01; 

      A     #o_Link_DataInterface_Err; 
      =     DBX    1.2; 

GA01: OPN   #i_DB_HOO_FIFO_RCV; 
      L     DBNO; 
      L     1; 
      >I    ; 
      JCN   GA02; 

      A     #o_Link_DataInterface_Err; 
      =     DBX    1.2; 

GA02: NOP   0; 
      A     #s_ER_Slave_Not_Prsnt; 
      =     #o_ST_FieldB_NotPrsnt; 

      A     #s_ER_Slave_Error; 
      =     #o_ST_FieldB_Error; 
END_FUNCTION_BLOCK

