FUNCTION_BLOCK "FB_CIZ01_F"
TITLE =%version: 1.13 % CN: 55 
//Function:
//Control a Check-In Zone which consists of two 1-directional conveyors
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Thursday, April 19, 2018 8:36:33 AM %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#28161: Disable EOS PEC of TRS2 if no dispatch      nlHdL    19-04-18   1.13
//bhs_plf#5140: CIZ Unexpected item detection Restart   nlHdL    22-01-18   1.12
//ra#24263: Signal light blink on error and desk off    nlHdL    09-10-17   1.11
//ina#6140: CIZ error suppression on ASI error HW       nlHdL    06-09-17   1.10
//ra#24634: Update DAT Layer                            nlHdL    01-09-17   1.09
//ina#6140: CIZ02 section status stopped                nlHdL    11-07-17   1.08
//bhs_plf#1740: Add desk active informational           nlSdW    31-05-17   1.07
//ra#47812: Flow control configuration                  nlJClo   24-01-17   1.06
//ra#18817: Clear PLT function Update                   inajos   07-12-16   1.05
//ra#18500: output ST Not Automatic rename too not auto nlHdL    01-12-16   1.04
//ra#13668: Reset PEC blockage SCADA HMI for CIZ        nlHdL    13-10-16   1.03
//ra#17174:Removed not used inputs                      nlJClo   19-09-16   1.02
//ra#38710:Initial version (based on FB_CIZ01 v. 0.20)  nlJClo   01-06-16   1.01
//
//Description:
//TRS1 and TRS3 have one EOS PEC. 
//
//View from above (conveyors):
//                                                          
//                               |                                        | 
//+------------------------------+---+ +----------------------------------+---+
//|                              |   | |                                  |   |
//|  TRS 01 ---- Forward ---->   |   | | TRS03  ---- Forward ---->        |   |
//|                              |   | |                                  |   |  
//+------------------------------+---+ +----------------------------------+---+
//                               |                                        | 
//                               ^                                        ^
//                     PEC downstream                           PEC downstream
//
FAMILY : RAW
VERSION : 0.0


VAR_INPUT
  i_Request_Induct : BOOL  := TRUE;	//Request to induct bag in window
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_CMD_Enable : BOOL ;	//CMD: Enable command
  i_CMD_Start : BOOL ;	//CMD: Start command
  i_CMD_Reset : BOOL ;	//CMD: Reset command
  i_CMD_Send_Stat : BOOL ;	//CMD: Send Statistical
  i_Safety_OK : BOOL  := TRUE;	//Safety is OK signal
  i_Available_IO : BOOL  := TRUE;	//Signal for indication IO is OK (no Fieldbus or IO error)
  i_PBB_ASI_NotPrsnt : BOOL ;	//ASI is Not Present
  i_PBB_ASI_Error : BOOL ;	//ASI has an Error
  i_TRS1_ASI_NotPrsnt : BOOL ;	//ASI is Not Present
  i_TRS1_ASI_Error : BOOL ;	//ASI has an Error
  i_TRS3_ASI_NotPrsnt : BOOL ;	//ASI is Not Present
  i_TRS3_ASI_Error : BOOL ;	//ASI has an Error
  i_LCC_ASI_NotPrsnt : BOOL ;	//ASI is Not Present
  i_LCC_ASI_Error : BOOL ;	//ASI has an Error
  i_KS_IO_Desk_On : BOOL ;	//HW: Key-Switch check-in desk switched on
  i_PB_IO_Label : BOOL ;	//HW: Push Button Label
  i_PB_IO_Dispatch : BOOL ;	//HW: Push Button Dispatch
  i_KS_IO_Automatic_Mode : BOOL ;	//HW: Cabinet key switch automatic mode
  i_Ind_DB_PLT : BLOCK_DB ;	//Data Structure: Induct Position DataBlock (Dummy for induct)
  i_Ind_DB_PLT_Merge : BLOCK_DB ;	//Data Structure: Induct Position DataBlock (Dummy for induct)
  i_TRS1_Setting : "UDT_TRS_Bas1dir_Sett";	//Data Structure: Setting Record TRS1
  i_TRS1_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_TRS1_DB_PLT : BLOCK_DB ;	//Data Structure: Position DataBlock TRS1
  i_TRS1_CFG_Conv_Speed : INT ;	//CFG: [mm/sec] Conveyor Speed
  i_TRS1_CFG_Run_Out_Dist : INT ;	//CFG: [cm] Run out distance for the section
  i_TRS1_IO_NOT_PEC : BOOL ;	//HW: Fail safe signal of Photo Electric Cell (TRUE=No product detected)
  i_TRS1_IO_CON_OK : BOOL ;	//HW: Fail safe signal Maintenance Switch on (TRUE=Motor switched on)
  i_TRS1_IO_NOT_THO : BOOL ;	//HW: Thermal overload signal (No Thermal overload=TRUE)  
  i_TRS3_Setting : "UDT_TRS_Bas1dir_Sett";	//Data Structure: Setting Record TRS03
  i_TRS3_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_TRS3_DB_PLT : BLOCK_DB ;	//Data Structure: Position DataBlock TRS03
  i_TRS3_CFG_Conv_Speed : INT ;	//CFG: [mm/sec] Conveyor Speed
  i_TRS3_CFG_Run_Out_Dist : INT ;	//CFG: [cm] Run out distance for the section
  i_TRS3_IO_NOT_PEC : BOOL ;	//HW: Fail safe signal of Photo Electric Cell (TRUE=No product detected)
  i_TRS3_IO_CON_OK : BOOL ;	//HW: Fail safe signal Maintenance Switch on (TRUE=Motor swiched on)
  i_TRS3_IO_NOT_THO : BOOL ;	//HW: Thermal overload signal (No Thermal overload=TRUE)  
END_VAR
VAR_OUTPUT
  o_Ready_To_Restart : BOOL ;	//Ready To Restart to system control
  o_Die_Forward : BOOL ;	//CIZ request CLZ to die forward
  o_ST_PBB_ASI_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_PBB_ASI_Error : BOOL ;	//ST: ASI slave has an error
  o_ST_TRS1_ASI_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_TRS1_ASI_Error : BOOL ;	//ST: ASI slave has an error
  o_ST_TRS3_ASI_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_TRS3_ASI_Error : BOOL ;	//ST: ASI slave has an error
  o_ST_LCC_ASI_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_LCC_ASI_Error : BOOL ;	//ST: ASI slave has an error
  o_ST_Unexp_Detection : BOOL ;	//ST: Child detection error
  o_ST_Desk_Disabled : BOOL ;	//ST: Key switch in automatic mode
  o_ST_Desk_Active : BOOL ;	//ST: Key switch in on mode
  o_IO_SL_Desk_On : BOOL ;	//HW: Signal light Check-in desk switched on (lit) or check-in has error (blinkin
  o_IO_SL_Dispatch_Button : BOOL ;	//HW: Signal light dispatch button
  o_TRS1_IO_MTR : BOOL ;	//HW: Run signal to motor of conveyor
  o_TRS1_ST_Items : BOOL ;	//ST: Items present on section
  o_TRS1_ST_Running : BOOL ;	//ST: Section is running
  o_TRS1_ST_Started : BOOL ;	//ST: Started
  o_TRS1_ST_Req_Halt : BOOL ;	//ST: Request Halt
  o_TRS1_ST_Req_Stop : BOOL ;	//ST: Request Stop
  o_TRS1_ST_External_Stop : BOOL ;	//ST: External_Stop
  o_TRS1_ST_Not_Auto : BOOL ;	//ST: The motor is reporting not Automatic
  o_TRS1_ST_THO : BOOL ;	//ST: Thermal overload
  o_TRS1_ST_PEC_Blk : BOOL ;	//ST: PEC Blockage
  o_TRS1_EXT_Outputs : "UDT_External_Outputs";	//External Outputs
  o_TRS3_IO_MTR : BOOL ;	//HW: Run signal to motor of conveyor
  o_TRS3_ST_Items : BOOL ;	//ST: Items present on section
  o_TRS3_ST_Running : BOOL ;	//ST: Section is running
  o_TRS3_ST_Started : BOOL ;	//ST: Started
  o_TRS3_ST_Req_Halt : BOOL ;	//ST: Request Halt
  o_TRS3_ST_Req_Stop : BOOL ;	//ST: Request Stop
  o_TRS3_ST_External_Stop : BOOL ;	//ST: External_Stop
  o_TRS3_ST_Not_Auto : BOOL ;	//ST  The motor is reporting not automatic
  o_TRS3_ST_THO : BOOL ;	//ST: Thermal overload
  o_TRS3_ST_PEC_Blk : BOOL ;	//ST: PEC Blockage
  o_TRS3_EXT_Outputs : "UDT_External_Outputs";	//External Outputs
END_VAR
VAR
  s_FB_CIZ_Control : "FB_CIZ_Control";	//Block call static FB_CIZ_Control
  s_CIZ_FB_DAT : "FB_DAT";	//Block call static FB_DAT_SAC
  s_TRS1_FB_PEC_EOS : "FB_EQP_PEC";	//Block call statis FB_EQP_PEC_2Dir
  s_TRS1_FB_EQP_Lean : "FB_EQP_Lean";	//Block call static FB_EQP_Lean
  s_TRS1_HW_MTR : "FB_HW_MTR_MS";	//Block call static FB_HW_MTR
  s_TRS1_FB_DAT : "FB_DAT";	//Block call static FB_DAT_SAC
  s_TRS3_FB_EQP_EOS : "FB_EQP_PEC";	//Block call static FB_EQP_PEC
  s_TRS3_FB_EQP_Lean : "FB_EQP_Lean";	//Block call static FB_EQP_Lean
  s_TRS3_HW_MTR : "FB_HW_MTR_MS";	//Block call static FB_HW_MTR
  s_TRS3_FB_DAT : "FB_DAT";	//Block call static FB_DAT_SAC
  s_Tl_Offset_01 : INT ;	//Position of the physical PEC
  s_Tl_Offset_02 : INT ;	//Position of the physical PEC
  s_MTR_Counter_value : INT ;	//Counter value of motor not running counter
  s_TRS1_Req_MTR_Run : BOOL ;	//CIZ control Request motor run
  s_TRS1_MTR_Run : BOOL ;	//Request motor run
  s_TRS1_HW_Req_Halt : BOOL ;	//HW request halt
  s_TRS1_Ext_Req_Halt : BOOL ;	//Internal request halt
  s_TRS1_Ready_To_Restart : BOOL ;	//Ready to restart to system control
  s_TRS1_Not_Automatic : BOOL ;	//Not automatic status report from hardware layer
  s_TRS3_Req_MTR_Run : BOOL ;	//CIZ control Request motor reverse
  s_TRS3_MTR_Run : BOOL ;	//Request motor reverse
  s_TRS3_HW_Req_Halt : BOOL ;	//HW request halt
  s_TRS3_Ext_Req_Halt : BOOL ;	//Internal resquest halt
  s_TRS3_Ready_To_Restart : BOOL ;	//Ready to restart to system control
  s_TRS3_Not_Automatic : BOOL ;	//Not automatic status report from hardware layer
  s_CIZ_Active : BOOL ;	//CIZ Activated
  s_CIZ_Inactive : BOOL ;	//CIZ Deactivated
  s_CIZ_Error : BOOL ;	//Error active in CIZ
  s_TRS1_Error : BOOL ;	//Error active TRS1
  s_TRS3_Error : BOOL ;	//Error active TRS3
  s_TRS1_HandOver_Busy : BOOL ;	//TRS1 Handover is busy
  s_TRS3_Dispatch_Busy : BOOL ;	//TRS3 Dispatch action is busy
  s_TRS3_Ready_To_Induct : BOOL ;	//TRS3 is ready to induct
  s_Unexp_Detection_Set : BOOL ;	//Child detection error is set
  s_Reset_PEC_Blockage : BOOL ;	//Reset command for PEC error when key switch is of
  s_PEC_Blockage_PEC1 : BOOL ;	//PEC blockage error from PEC equipment block
  s_PEC_Defect_PEC2 : BOOL ;	//PEC defect/blockage after child detection
  s_TRS1_PEC_Latch_PEC : BOOL ;	//PEC Latch signal from PLT DB
  s_TRS3_PEC_Latch_PEC : BOOL ;	//PEC Latch signal from PLT DB
  s_ST_Child_Detect : BOOL ;	//Status  Child detection error
  s_TRS3_MTR_Not_Run : BOOL ;	//Motor TRS3 not running
  s_MTR_Not_Run_1sec : BOOL ;	//Motor TRS3 not running for more than 1 second
  s_Init_Sequencer : BOOL ;	//Initialize sequencer
  s_FN_KS_IO_Desk_On : BOOL ;	//Flank negative of i_KS_IO_Desk_On
  s_FP_KS_IO_Desk_On : BOOL ;	//Flank positive of i_KS_IO_Desk_On
END_VAR
VAR_TEMP
  t_Preset_PEC_Latch : BOOL ;	//Preset the PEC latch signal
  t_Available_IO : BOOL ;	//Signal for indication IO is OK (no Fieldbus or IO error)
  t_TRS3_IO_NOT_PEC : BOOL ;	//PEC downstream TRS3
  t_TRS_Start_Up_Dist : INT ;	//Calculated start-up distance = run-out / 2
  t_TRS1_Automatic : BOOL ;	//Temp automatic status report from hardware layer
  t_TRS3_Automatic : BOOL ;	//Temp automatic status report from hardware layer
  t_Merge_Operational : BOOL ;	//Merge section is operational
  t_OS_KS_IO_Desk_On : BOOL ;	//One shot desk on
  t_Available_HW : BOOL ;	//Signal for indication IO is OK (no Fieldbus or IO error)
END_VAR
BEGIN
NETWORK
TITLE =AA: Determine PLT DB's
//Determine when merge section is operational
      OPN   #i_Ind_DB_PLT_Merge; 

      A     DBX   10.5; // Retrieve section operational signal
      =     #t_Merge_Operational; 

      OPN   #i_TRS3_DB_PLT; 
      AN    DBX   10.7; 
      =     #s_TRS3_PEC_Latch_PEC; // Retrieve PEC latch signal

      A     #i_Available_IO; 
      A     #i_TRS1_IO_CON_OK; 
      A     #i_TRS3_IO_CON_OK; 
      AN    #i_PBB_ASI_NotPrsnt; 
      AN    #i_PBB_ASI_Error; 
      AN    #i_TRS1_ASI_NotPrsnt; 
      AN    #i_TRS1_ASI_Error; 
      AN    #i_TRS3_ASI_NotPrsnt; 
      AN    #i_TRS3_ASI_Error; 
      AN    #i_LCC_ASI_NotPrsnt; 
      AN    #i_LCC_ASI_Error; 
      =     #t_Available_IO; 
NETWORK
TITLE =BA: Handle electrical input statuses
//Some errors and statuses are coming directly from electrical inputs.
//If the IO becomes not available, those inputs must be ignored, to avoid 
//(as consequence of) all kind of meaningless status changes, which are indicated 
//to HMI.
      O     #i_CMD_Reset; // Reset ASI errors
      ON    #i_Available_IO; 
      R     #o_ST_PBB_ASI_NotPrsnt; 
      R     #o_ST_PBB_ASI_Error; 
      R     #o_ST_TRS1_ASI_NotPrsnt; 
      R     #o_ST_TRS1_ASI_Error; 
      R     #o_ST_TRS3_ASI_NotPrsnt; 
      R     #o_ST_TRS3_ASI_Error; 
      R     #o_ST_LCC_ASI_NotPrsnt; 
      R     #o_ST_LCC_ASI_Error; 

      A     #i_PBB_ASI_NotPrsnt; // Set ASI PBB errors
      A     #i_Available_IO; 
      S     #o_ST_PBB_ASI_NotPrsnt; 

      A     #i_PBB_ASI_Error; 
      A     #i_Available_IO; 
      S     #o_ST_PBB_ASI_Error; 

      A     #i_TRS1_ASI_NotPrsnt; 
      A     #i_Available_IO; 
      S     #o_ST_TRS1_ASI_NotPrsnt; 

      A     #i_TRS1_ASI_Error; 
      A     #i_Available_IO; 
      S     #o_ST_TRS1_ASI_Error; 

      A     #i_TRS3_ASI_NotPrsnt; 
      A     #i_Available_IO; 
      S     #o_ST_TRS3_ASI_NotPrsnt; 

      A     #i_TRS3_ASI_Error; 
      A     #i_Available_IO; 
      S     #o_ST_TRS3_ASI_Error; 

      A     #i_LCC_ASI_NotPrsnt; 
      A     #i_Available_IO; 
      S     #o_ST_LCC_ASI_NotPrsnt; 

      A     #i_LCC_ASI_Error; 
      A     #i_Available_IO; 
      S     #o_ST_LCC_ASI_Error; 
NETWORK
TITLE =CA: KS automatic mode
//LAD!
//Determine when the key switch of the cabinet is in automatic mode
      AN    #i_KS_IO_Automatic_Mode; // If KS in 'Automatic' mode
      A     #t_Available_IO; // AND IO available
      AN    #o_ST_TRS1_ASI_NotPrsnt; // AND ASI PBB present
      AN    #o_ST_TRS1_ASI_Error; // AND ASI PBB not in error
      =     #o_ST_Desk_Disabled; // THEN KS in 'Automatic' position
NETWORK
TITLE =DA: CIZ active
//LAD!
//Determine when the CIZ is activated
      A     #i_KS_IO_Desk_On; 
      AN    #o_ST_Unexp_Detection; 
      FP    #s_FP_KS_IO_Desk_On; 
      =     #t_OS_KS_IO_Desk_On; 

      A(    ; 
      A     #i_CMD_Start; 
      A     #i_KS_IO_Desk_On; //Desk on & Start command
      O     #t_OS_KS_IO_Desk_On; //Or Positive flank of keyswitch
      )     ; 
      AN    #o_ST_Desk_Disabled; 
      AN    #s_CIZ_Error; 
      AN    #s_TRS1_Error; 
      AN    #s_TRS3_Error; 
      A     #t_Available_IO; 
      A     #i_Safety_OK; 
      A     #i_CMD_Enable; 
      S     #s_CIZ_Active; 
      R     #s_CIZ_Inactive; 

      A     #s_CIZ_Active; 
      =     #o_ST_Desk_Active; 
NETWORK
TITLE =EA: CIZ inactive
//LAD!
//Determine when the CIZ is deactivated
      AN    #i_KS_IO_Desk_On; 
      AN    #s_TRS3_Dispatch_Busy; 
      O     #o_ST_Desk_Disabled; 
      ON    #t_Available_IO; 
      ON    #i_Safety_OK; 
      ON    #i_CMD_Enable; 
      S     #s_CIZ_Inactive; 
      R     #s_CIZ_Active; 
NETWORK
TITLE =FA: Reset signal for PEC blockage errors

      O     #i_KS_IO_Desk_On; 
      FN    #s_FN_KS_IO_Desk_On; 
      O     #i_CMD_Reset; 
      =     #s_Reset_PEC_Blockage; 
NETWORK
TITLE =HA: Equipment calls for TRS1 belt

      NOP   0; 

//End-Of-Section PEC
      CALL #s_TRS1_FB_PEC_EOS (
           i_Setting                := #i_TRS1_Setting.PEC_1D,
           i_DB_PLT                 := #i_TRS1_DB_PLT,
           i_DB_Event               := "DB_Event_Section",
           i_Dwnstr_PLT_Pos         := 0,
           i_CFG_Blockage_Length    := 200,
           i_CFG_Delay_On_Filter    := 0,
           i_CFG_Delay_Off_Filter   := 0,
           i_CFG_Min_Product_Length := 0,
           i_CFG_Preset_PEC_Latch   := TRUE,
           i_CFG_Track_Present      := FALSE,
           i_CFG_Reset_Block_PEC_Oc := FALSE,
           i_IO_NOT_PEC             := #i_TRS1_IO_NOT_PEC,
           i_Eqp_Available_IO       := #t_Available_IO,
           i_CMD_Reset              := #s_Reset_PEC_Blockage,
           o_PEC_Position           := #s_Tl_Offset_01,
           o_ST_PEC_Blk             := #o_TRS1_ST_PEC_Blk);

//Calculated standard start-up for section
      L     #i_TRS1_CFG_Run_Out_Dist; 
      L     2; 
      /I    ; 
      T     #t_TRS_Start_Up_Dist; 

      A     #s_CIZ_Error; 
      O     #s_TRS1_Error; 
      O(    ; 
      A     #s_TRS3_Error; 
      A     #s_TRS1_HandOver_Busy; 
      )     ; 
      O     #s_TRS1_HW_Req_Halt; 
      =     #s_TRS1_Ext_Req_Halt; 

      CALL #s_TRS1_FB_EQP_Lean (
           i_ID_Section             := #i_TRS1_ID,
           i_Basic_Offset           := #i_TRS1_Setting.Basic.Offset,
           i_DB_PLT                 := #i_TRS1_DB_PLT,
           i_DB_PLT_DwnStr          := #i_TRS3_DB_PLT,
           i_DB_Event               := "DB_Event_Section",
           i_CFG_Conveyor_Speed     := #i_TRS1_CFG_Conv_Speed,
           i_CFG_Run_Out_Distance   := #i_TRS1_CFG_Run_Out_Dist,
           i_CFG_Start_Up_Distance  := #t_TRS_Start_Up_Dist,
           i_PPI_Displacement       := 0,
           i_Dwnstr_PLT_Pos         := #s_Tl_Offset_01,
           i_CFG_Del_Window_Codes   := FALSE,
           i_Available_IO           := #t_Available_IO,
           i_Safety_OK              := #i_Safety_OK,
           i_CMD_Enable             := #i_CMD_Enable,
           i_CMD_Start              := #i_CMD_Start,
           i_Ext_Req_Run            := #s_TRS1_Req_MTR_Run,
           i_Ext_Req_Halt           := #s_TRS1_Ext_Req_Halt,
           i_Clr_PLT_Data           := #s_TRS1_Not_Automatic,
           o_External               := #o_TRS1_EXT_Outputs,
           o_Motor_Run              := #s_TRS1_MTR_Run,
           o_ST_Items               := #o_TRS1_ST_Items,
           o_ST_Running             := #o_TRS1_ST_Running,
           o_ST_Started             := #o_TRS1_ST_Started,
           o_ST_Request_Halt        := #o_TRS1_ST_Req_Halt,
           o_ST_Request_Stop        := #o_TRS1_ST_Req_Stop,
           o_ST_External_Stop       := #o_TRS1_ST_External_Stop,
           o_Ready_To_Restart       := #s_TRS1_Ready_To_Restart);

      AN    #s_CIZ_Active; 
      R     #o_TRS1_ST_Started; 

      A     #i_Available_IO; 
      AN    #o_ST_TRS1_ASI_NotPrsnt; // AND ASI LMS present
      AN    #o_ST_TRS1_ASI_Error; // AND ASI LMS not in error
      =     #t_Available_HW; 

      A     #i_KS_IO_Automatic_Mode; 
      A     #i_TRS1_IO_CON_OK; 
      =     #t_TRS1_Automatic; 

      CALL #s_TRS1_HW_MTR (
           i_CMD_Send_Stat          := #i_CMD_Send_Stat,
           i_Event_DB               := "DB_Event_Section",
           i_Available_IO           := #t_Available_HW,
           i_IO_MS_Automatic_Mode   := #t_TRS1_Automatic,
           i_IO_NOT_THO             := #i_TRS1_IO_NOT_THO,
           i_CMD_Reset              := #i_CMD_Reset,
           i_CMD_Req_Motor_Forward  := #s_TRS1_MTR_Run,
           o_IO_MTR                 := #o_TRS1_IO_MTR,
           o_ST_MS_Not_Automatic    := #s_TRS1_Not_Automatic,
           o_ST_THO                 := #o_TRS1_ST_THO);

      A     #s_TRS1_Not_Automatic; 
      =     #o_TRS1_ST_Not_Auto; 

      CALL #s_TRS1_FB_DAT (
           i_ID_Section             := #i_TRS1_ID,
           i_DB_Event               := "DB_Event_Section",
           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
           i_CFG_PLC_Log_Route_Msgs := FALSE,
           i_CFG_PLC_LOG_BPI_Stat   := FALSE);

      OPN   #i_TRS1_DB_PLT; // Modified for the PEC off delay
      AN    DBX   10.7; 
      =     #s_TRS1_PEC_Latch_PEC; // Retrieve PEC latch signal
NETWORK
TITLE =IA: Equipment calls for TRS3 belt

      NOP   0; 

      AN    #s_TRS3_MTR_Run; 
      =     #s_TRS3_MTR_Not_Run; 

      CALL "FC_On_Dly_T_0.1s" (
           i_Start                  := #s_TRS3_MTR_Not_Run,
           i_Enable_Dly             := TRUE,
           i_Time_Value             := 10,
           i_Current_Value          := #s_MTR_Counter_value,
           o_Status                 := #s_MTR_Not_Run_1sec,
           o_Current_Value          := #s_MTR_Counter_value);

      A     #s_MTR_Not_Run_1sec; // If the motor of TRS3 is not running for more than 1 second
      AN    #s_TRS3_Dispatch_Busy; // And TRS3 is not dispatching
      O     #s_TRS3_Not_Automatic; //TRS 3 not Auto
      =     #t_Preset_PEC_Latch; // Preset PEC latch signal

//PEC will be discard in case of child detection (happend when CIZ is inactive)
      A     #s_CIZ_Inactive; 
      A     #t_Merge_Operational; 
      ON    #s_TRS3_Dispatch_Busy; 
      O     #i_TRS3_IO_NOT_PEC; 
      =     #t_TRS3_IO_NOT_PEC; 

//End-Of-Section PEC
      CALL #s_TRS3_FB_EQP_EOS (
           i_Setting                := #i_TRS3_Setting.PEC_1D,
           i_DB_PLT                 := #i_TRS3_DB_PLT,
           i_DB_Event               := "DB_Event_Section",
           i_Dwnstr_PLT_Pos         := 0,
           i_CFG_Blockage_Length    := 150,
           i_CFG_Delay_On_Filter    := 0,
           i_CFG_Delay_Off_Filter   := 30,
           i_CFG_Min_Product_Length := 0,
           i_CFG_Preset_PEC_Latch   := #t_Preset_PEC_Latch,
           i_CFG_Track_Present      := FALSE,
           i_CFG_Reset_Block_PEC_Oc := FALSE,
           i_IO_NOT_PEC             := #t_TRS3_IO_NOT_PEC,
           i_Eqp_Available_IO       := #t_Available_IO,
           i_CMD_Reset              := #s_Reset_PEC_Blockage,
           o_PEC_Position           := #s_Tl_Offset_02,
           o_ST_PEC_Blk             := #s_PEC_Blockage_PEC1);

//Calculated standard start-up for section
      L     #i_TRS3_CFG_Run_Out_Dist; 
      L     2; 
      /I    ; 
      T     #t_TRS_Start_Up_Dist; 

      A     #s_CIZ_Error; 
      O     #s_TRS3_Error; 
      O(    ; 
      A     #s_TRS1_Error; 
      A     #s_TRS1_HandOver_Busy; 
      )     ; 
      O     #s_TRS3_HW_Req_Halt; 
      =     #s_TRS3_Ext_Req_Halt; 

      CALL #s_TRS3_FB_EQP_Lean (
           i_ID_Section             := #i_TRS3_ID,
           i_Basic_Offset           := #i_TRS3_Setting.Basic.Offset,
           i_DB_PLT                 := #i_TRS3_DB_PLT,
           i_DB_PLT_DwnStr          := #i_Ind_DB_PLT,
           i_DB_Event               := "DB_Event_Section",
           i_CFG_Conveyor_Speed     := #i_TRS3_CFG_Conv_Speed,
           i_CFG_Run_Out_Distance   := #i_TRS3_CFG_Run_Out_Dist,
           i_CFG_Start_Up_Distance  := #t_TRS_Start_Up_Dist,
           i_PPI_Displacement       := 0,
           i_Dwnstr_PLT_Pos         := #s_Tl_Offset_02,
           i_CFG_Del_Window_Codes   := FALSE,
           i_Available_IO           := #t_Available_IO,
           i_Safety_OK              := #i_Safety_OK,
           i_CMD_Enable             := #i_CMD_Enable,
           i_CMD_Start              := #i_CMD_Start,
           i_Ext_Req_Run            := #s_TRS3_Req_MTR_Run,
           i_Ext_Req_Halt           := #s_TRS3_Ext_Req_Halt,
           i_Clr_PLT_Data           := #s_TRS3_Not_Automatic,
           o_External               := #o_TRS3_EXT_Outputs,
           o_Motor_Run              := #s_TRS3_MTR_Run,
           o_ST_Items               := #o_TRS3_ST_Items,
           o_ST_Running             := #o_TRS3_ST_Running,
           o_ST_Started             := #o_TRS3_ST_Started,
           o_ST_Request_Halt        := #o_TRS3_ST_Req_Halt,
           o_ST_Request_Stop        := #o_TRS3_ST_Req_Stop,
           o_ST_External_Stop       := #o_TRS3_ST_External_Stop,
           o_Ready_To_Restart       := #s_TRS3_Ready_To_Restart);

      AN    #s_CIZ_Active; 
      R     #o_TRS3_ST_Started; 

      A     #i_Available_IO; 
      AN    #o_ST_TRS3_ASI_NotPrsnt; // AND ASI LMS present
      AN    #o_ST_TRS3_ASI_Error; // AND ASI LMS not in error
      =     #t_Available_HW; 

      A     #i_KS_IO_Automatic_Mode; 
      A     #i_TRS3_IO_CON_OK; 
      =     #t_TRS3_Automatic; 

      CALL #s_TRS3_HW_MTR (
           i_CMD_Send_Stat          := #i_CMD_Send_Stat,
           i_Event_DB               := "DB_Event_Section",
           i_Available_IO           := #t_Available_HW,
           i_IO_MS_Automatic_Mode   := #t_TRS3_Automatic,
           i_IO_NOT_THO             := #i_TRS3_IO_NOT_THO,
           i_CMD_Reset              := #i_CMD_Reset,
           i_CMD_Req_Motor_Forward  := #s_TRS3_MTR_Run,
           o_IO_MTR                 := #o_TRS3_IO_MTR,
           o_ST_MS_Not_Automatic    := #s_TRS3_Not_Automatic,
           o_ST_THO                 := #o_TRS3_ST_THO);

      A     #s_TRS3_Not_Automatic; 
      =     #o_TRS3_ST_Not_Auto; 

      CALL #s_TRS3_FB_DAT (
           i_ID_Section             := #i_TRS3_ID,
           i_DB_Event               := "DB_Event_Section",
           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
           i_CFG_PLC_Log_Route_Msgs := FALSE,
           i_CFG_PLC_LOG_BPI_Stat   := FALSE);

NETWORK
TITLE =JA: CIZ control block call
//This block contains the manual control of the TRS1 and the dispatch sequence 
//for inducting on the CLZ.
      NOP   0; 

      O     #s_CIZ_Error; // If the CIZ has an error
      O     #s_TRS1_Error; // OR TRS1 has an error
      O     #s_TRS3_Error; // OR TRS3 has an error
      =     #s_Init_Sequencer; // Initialize the sequencer and set idle state

      CALL #s_FB_CIZ_Control (
           i_TRS1_DB_PLT            := #i_TRS1_DB_PLT,
           i_TRS3_DB_PLT            := #i_TRS3_DB_PLT,
           i_Event_DB               := "DB_Event_Zone",
           i_CIZ_Active             := #s_CIZ_Active,
           i_Request_Induct         := #i_Request_Induct,
           i_KS_IO_Desk_On          := #i_KS_IO_Desk_On,
           i_PB_IO_Label_Weight     := #i_PB_IO_Label,
           i_PB_IO_Dispatch         := #i_PB_IO_Dispatch,
           i_PB_IO_Reverse          := FALSE,
           i_TRS1_IO_NOT_PEC_Upstrm := TRUE,
           i_TRS1_NOT_PEC_Downstr   := #s_TRS1_PEC_Latch_PEC,
           i_TRS3_IO_NOT_PEC_Upstrm := TRUE,
           i_TRS3_NOT_PEC_Downstr   := #s_TRS3_PEC_Latch_PEC,
           i_Init_Sequencer         := #s_Init_Sequencer,
           i_Dispatch_Timeout       := 9000,
           o_TRS1_Req_MTR_Run       := #s_TRS1_Req_MTR_Run,
           o_TRS3_Req_MTR_Run       := #s_TRS3_Req_MTR_Run,
           o_TRS1_HandOver_Busy     := #s_TRS1_HandOver_Busy,
           o_TRS3_Dispatch_Busy     := #s_TRS3_Dispatch_Busy,
           o_TRS3_Ready_To_Induct   := #s_TRS3_Ready_To_Induct,
           o_IO_SL_Dispatch_Button  := #o_IO_SL_Dispatch_Button);

      CALL #s_CIZ_FB_DAT (
           i_ID_Section             := #i_ID,
           i_DB_Event               := "DB_Event_Zone",
           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
           i_CFG_PLC_Log_Route_Msgs := FALSE,
           i_CFG_PLC_LOG_BPI_Stat   := FALSE);

NETWORK
TITLE =KA: Child detection error
//When the section is inactive, started and the downstream PEC of the dispatch 
//belt is triggered the child detection is set. The child detection will be 
//resetted with use of the key switch.
      A     #s_CIZ_Inactive; 
      A     #t_Merge_Operational; 
      AN    #i_TRS3_IO_NOT_PEC; 
      AN    #o_TRS3_ST_PEC_Blk; 
      A     #t_Available_IO; 
      A     #i_Safety_OK; 
      S     #o_ST_Unexp_Detection; 

      A     #i_KS_IO_Desk_On; 
      ON    #t_Available_IO; 
      R     #o_ST_Unexp_Detection; 
NETWORK
TITLE =LA: PEC defect
//When a child detection is reset with use of the key switch but the PEC sensor 
//signal is still false, a PEC defect error will be generated. This prevents that 
//when the PEC is not working the collector belt stops every time because of a 
//child detection.
      A     #i_TRS3_IO_NOT_PEC; 
      R     #s_Unexp_Detection_Set; 

      A     #s_Reset_PEC_Blockage; 
      R     #s_PEC_Defect_PEC2; 

      A     #o_ST_Unexp_Detection; 
      S     #s_Unexp_Detection_Set; 

      A     #s_Unexp_Detection_Set; 
      AN    #o_ST_Unexp_Detection; 
      AN    #i_TRS3_IO_NOT_PEC; 
      A     #t_Available_IO; 
      S     #s_PEC_Defect_PEC2; 

      A     #s_PEC_Blockage_PEC1; 
      O     #s_PEC_Defect_PEC2; 
      =     #o_TRS3_ST_PEC_Blk; 
NETWORK
TITLE =MA: Desk on status indication light
//LAD!
//Indicates when the check-in desk is activated, deactivated or when the check-in 
//desk is having an error. When the check-in desk has an error the signal light 
//will indicate this by blinking.
      A     #t_Available_IO; 
      A(    ; 
      O     #i_KS_IO_Desk_On; 
      O     #s_CIZ_Active; 
      )     ; 
      A     #s_Init_Sequencer; //CIZ or TRS error
      O     #o_Die_Forward; // Needs to be shown when desk switched off
      A     "M_System_Clock_1.0_sec."; 
      O     ; 
      A     #s_CIZ_Active; 
      AN    #s_Init_Sequencer; //CIZ or TRS error
      =     #o_IO_SL_Desk_On; 
NETWORK
TITLE =OA: Status error CIZ
//LAD!
//Collected errors for the CIZ error status
      ON    #t_Available_IO; 
      O     #o_ST_PBB_ASI_NotPrsnt; 
      O     #o_ST_PBB_ASI_Error; 
      O     #o_ST_TRS1_ASI_NotPrsnt; 
      O     #o_ST_TRS1_ASI_Error; 
      O     #o_ST_TRS3_ASI_NotPrsnt; 
      O     #o_ST_TRS3_ASI_Error; 
      O     #o_ST_LCC_ASI_NotPrsnt; 
      O     #o_ST_LCC_ASI_Error; 
      O     #o_ST_Unexp_Detection; 
      =     #s_CIZ_Error; 
NETWORK
TITLE =PA: Status Error TRS1
//LAD!
      O     #o_TRS1_ST_PEC_Blk; 
      O     #o_TRS1_ST_THO; 
      O     #o_TRS1_ST_Not_Auto; 
      =     #s_TRS1_Error; 
NETWORK
TITLE =QA: Status Error TRS3
//LAD!
      O     #o_TRS3_ST_PEC_Blk; 
      O     #o_TRS3_ST_THO; 
      O     #o_TRS3_ST_Not_Auto; 
      =     #s_TRS3_Error; 
NETWORK
TITLE =RA: Die forward for collector zone
//LAD!
      A(    ; 
      O     #s_CIZ_Error; 
      O     #s_TRS3_Error; 
      )     ; 
      A(    ; 
      O     #s_TRS3_Dispatch_Busy; 
      O     #o_Die_Forward; 
      )     ; 
      O     #o_ST_Unexp_Detection; 
      A     #t_Available_IO; 
      =     #o_Die_Forward; 
NETWORK
TITLE =SA: Zone signals
//LAD!
      O     #s_TRS1_Ready_To_Restart; 
      O     #s_TRS3_Ready_To_Restart; 
      =     #o_Ready_To_Restart; 
END_FUNCTION_BLOCK

