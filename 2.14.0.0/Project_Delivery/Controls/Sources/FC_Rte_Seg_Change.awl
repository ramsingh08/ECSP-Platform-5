FUNCTION "FC_Rte_Seg_Change" : VOID
TITLE =%version: 1.01 % CN: 32
//Function:
//This function is used to generate and clear route segment DB's. It must
//be implemented at every node in a system
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Tuesday, December 06, 2016 01:29:19 PM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//Init version based on V1.02 TTT                       nlhdl    06-12-16   1.01
//
//Description:
//Clearing tub info in the upstream route segment DB and writing tub info with
//status, class and destination in the downstream route segment DB. This function 
//must be executed once for each tub which is passing.
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_DB_RS_Upstr_Num : INT ;	//DB Route Segment upstream buffer number
  i_DB_RS_Dwnstr_Num : INT ;	//DB Route Segment downstream buffer number
  i_DB_Event_Num : INT ;	//Number of DB event
  i_LNK : INT ;	//Link number of item
END_VAR
VAR_TEMP
  t_LIC : INT ;	//LIC record number
  t_TIC : INT ;	//TIC number
  t_Destination : INT ;	//Destination from BIR record
  t_Tub_Status : BYTE ;	//Tub status of TIR record
  t_Tub_Class : BYTE ;	//Tub class of TIR record
  t_Status_Empty : BOOL ;	//Tub status empty set
  t_Status_Loaded : BOOL ;	//Tub status loaded set
  t_Class_SBT : BOOL ;	//Tub class SBT set
  t_DB_RS_Upstr_Num : INT ;	//DB Route Segment upstream buffer number
  t_DB_RS_Dwnstr_Num : INT ;	//DB Route Segment downstream buffer number
  t_Number_Of_Entries : INT ;	//Number of entries in segment DB
  t_Array_Length : INT ;	//[cm] Section length
  t_Entry_Number_LNK : INT ;	//Link array number of current entry
  t_Entry_Number_Tub : INT ;	//Tub info array number of current entry
  t_Loop_Number : INT ;	//Loop number
  t_Return_Value : INT ;	//Temp Return Value of FC_Write_Event
END_VAR
BEGIN
NETWORK
TITLE =AA: Collect info from TIC and LIC records
//Collect the item information which is stored in the route segment DBs. This 
//information contains the Tub status (BYTE), class (BYTE) and destination (INT).
      L     0; 
      T     #t_Tub_Status; 
      T     #t_Tub_Class; 
      T     #t_Destination; 
// Initialize variables

      SET   ; 
      R     #t_Status_Empty; 
      R     #t_Status_Loaded; 
      R     #t_Class_SBT; 

// Read the TIC number from the link list
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".TIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_TIC);

// Check if TIC record is present
      L     #t_TIC; 
      L     0; 
      >I    ; 
      JCN   AA03; 

// Read TIC information  
      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_TIC,
           i_P_BOOL_Record          := "DB_UDT_TIC_Record".TIR.Status_Empty,
           i_DB                     := "DB_TIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_Status_Empty);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_TIC,
           i_P_BOOL_Record          := "DB_UDT_TIC_Record".TIR.Status_Loaded,
           i_DB                     := "DB_TIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_Status_Loaded);

// Set tub status
      A     #t_Status_Empty; 
      AN    #t_Status_Loaded; 
      JCN   AA01; 
      L     1; 
      T     #t_Tub_Status; 

AA01: A     #t_Status_Loaded; 
      AN    #t_Status_Empty; 
      JCN   AA02; 
      L     2; 
      T     #t_Tub_Status; 

AA02: CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_TIC,
           i_P_BOOL_Record          := "DB_UDT_TIC_Record".TIR.Class_SBT,
           i_DB                     := "DB_TIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_Class_SBT);

// Set tub class
      A     #t_Class_SBT; 
      L     1; 
      T     #t_Tub_Class; 


AA03: CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_LIC);

// Check if LIC record is present
      L     #t_LIC; 
      L     0; 
      >I    ; 
      JCN   AA99; 

// Read LIC information
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_LIC,
           i_P_INT_Record           := "DB_UDT_LIC_Record".BIR.Destination_1,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_Destination);

AA99: NOP   0; 

NETWORK
TITLE =BA: Delete LNK number from route segment DB

      L     #i_DB_RS_Upstr_Num; 
      T     #t_DB_RS_Upstr_Num; 

// End clear function when no DB connected          
      L     1; 
      >I    ; 
      JCN   BA99; 

// Open the upstream route segment DB
      OPN   DB [#t_DB_RS_Upstr_Num]; 

      L     DBLG; 
      L     2; 
      -I    ; 
      L     6; 
      /I    ; 
      T     #t_Number_Of_Entries; 

      L     4; 
      *I    ; 
      T     #t_Array_Length; 

// Transfer the number of entries used in DB
      L     DBW    0; 
      T     #t_Entry_Number_LNK; 

// End clear function when no entries to clear
      L     0; 
      >I    ; 
      JCN   BA99; 

// Start of loop: search for the link number 
BA01: L     #t_Entry_Number_LNK; 
      L     2; // 2 bytes for each entry
      *I    ; 
      L     #t_Array_Length; // Add carrier info length
      +I    ; 
      SLW   3; 
      LAR1  ; 

      L     #t_Entry_Number_LNK; 
      T     #t_Entry_Number_Tub; 

      L     DBW [AR1,P#0.0]; 
      L     #i_LNK; 
      <>I   ; 
      JCN   BA02; 

      L     #t_Entry_Number_LNK; 
      L     1; 
      -I    ; 
      T     #t_Entry_Number_LNK; 

      L     0; 
      >I    ; 
      JCN   BA99; 

// Jump to start of loop
      JU    BA01; 

// Clear Link numbers
BA02: L     0; 
      T     DBW [AR1,P#0.0]; 

      L     #t_Entry_Number_LNK; 
      L     DBW    0; 
      <I    ; 
      JCN   BA03; 

      L     #t_Entry_Number_LNK; 
      L     1; 
      +I    ; 
      T     #t_Entry_Number_LNK; 

      L     P#2.0; 
      +AR1  ; 
      JU    BA02; 

// Clear item info 
BA03: L     #t_Entry_Number_Tub; 
      L     4; // 4 bytes for each entry
      *I    ; 
      L     2; // Correct header length
      -I    ; 
      SLW   3; 
      LAR1  ; 

// Clear the entry
      L     0; 
      T     DBD [AR1,P#0.0]; 

// Decrease entry counter
      L     DBW    0; 
      L     1; 
      -I    ; 
      T     DBW    0; 

      L     #t_Entry_Number_Tub; 
      L     #t_Entry_Number_LNK; 
      <I    ; 
      JCN   BA99; 

      L     #t_Entry_Number_Tub; 
      L     1; 
      +I    ; 
      T     #t_Entry_Number_Tub; 

      L     P#4.0; 
      +AR1  ; 
      JU    BA03; 

BA99: NOP   0; 

NETWORK
TITLE =CA: Shift and create record in route segment DB

      L     #i_DB_RS_Dwnstr_Num; 
      T     #t_DB_RS_Dwnstr_Num; 

// End write function when no DB connected
      L     1; 
      >I    ; 
      JCN   CA99; 

// Open the downstream route segment DB  
      OPN   DB [#t_DB_RS_Dwnstr_Num]; 

      L     DBLG; 
      L     2; // Correct header length
      -I    ; 
      L     6; 
      /I    ; 
      T     #t_Number_Of_Entries; 

      L     4; 
      *I    ; 
      T     #t_Array_Length; 

      L     DBW    0; 
      T     #t_Loop_Number; 

// Don't shift DB when no entries present
      L     0; 
      >I    ; 
      JCN   CA02; 

// Continue when there is space in the route segment DB to shift and write
      L     #t_Loop_Number; 
      L     #t_Number_Of_Entries; 
      >=I   ; 
      JCN   CA01; 

// Report event: Segment buffer DB full (3300)
      CALL "FC_Write_Event" (
           i_Message_ID             := 3300,
           i_Event_value            := #t_DB_RS_Dwnstr_Num,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Return_Value);

// End network
      JU    CA99; 

// Start of loop: create pointer to correct entry 
CA01: L     #t_Loop_Number; 
      L     2; // 2 bytes for each entry
      *I    ; 
      L     #t_Array_Length; // Add carrier info length
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; 

// Shift entry to next entry in PLT DB 
      L     DBW [AR1,P#0.0]; 
      T     DBW [AR1,P#2.0]; 

      L     #t_Loop_Number; 
      L     4; // 4 bytes for each entry
      *I    ; 
      L     2; // Correct header length
      -I    ; 
      SLW   3; 
      LAR1  ; 

// Write current entry data to next entry
      L     DBB [AR1,P#0.0]; 
      T     DBB [AR1,P#4.0]; 
      L     DBB [AR1,P#1.0]; 
      T     DBB [AR1,P#5.0]; 
      L     DBW [AR1,P#2.0]; 
      T     DBW [AR1,P#6.0]; 

// Decrease loop number with 1
      L     #t_Loop_Number; 
      L     1; 
      -I    ; 
      T     #t_Loop_Number; 

// Jump to start of loop: when the loop number is greater then 0
      L     0; 
      <=I   ; 
      JCN   CA01; 

CA02: L     #t_Array_Length; 
      L     2; // Add 2 bytes for header
      +I    ; 
      SLW   3; 
      LAR1  ; 

      L     #i_LNK; 
      T     DBW [AR1,P#0.0]; 

      L     2; // 2 bytes for header
      SLW   3; 
      LAR1  ; 

// Write the tub status to the first entry
      L     #t_Tub_Status; 
      T     DBB [AR1,P#0.0]; 

// Write the tub class to the first entry
      L     #t_Tub_Class; 
      T     DBB [AR1,P#1.0]; 

// Write the destination to the first entry
      L     #t_Destination; 
      T     DBW [AR1,P#2.0]; 

// Increase the entry counter with 1
      L     DBW    0; 
      L     1; 
      +I    ; 
      T     DBW    0; 

CA99: NOP   0; 

END_FUNCTION

