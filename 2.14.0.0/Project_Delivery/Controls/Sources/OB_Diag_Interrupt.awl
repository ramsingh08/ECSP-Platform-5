ORGANIZATION_BLOCK "OB_Diag_Interrupt"
TITLE = %version: 0.03 % CN: 90 
//Function: 
//Module for diagnostic interrupt request by the CPU.
//The operating system then calls OB82.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:16:29 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.03
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.03
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.03
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.03
//CR5968 Added block call for FC_OB82_PN_Error          nlHHop   17-04-13   0.02
//Initial revision                                      nlMRe    22-07-10   0.01
//
//Description: 
//If a module with diagnostic capability for which you have enabled the 
//diagnostic interrupt detects a change in its diagnostic status, it 
//sends a diagnostic interrupt request to the CPU.
//The operating system then calls OB82.
//
FAMILY : General
VERSION : 0.0


VAR_TEMP
  OB82_EV_CLASS : BYTE ;	//16#39, Event class 3, Entering event state, Internal fault event
  OB82_FLT_ID : BYTE ;	//16#XX, Fault identifcation code
  OB82_PRIORITY : BYTE ;	//26/28 (Priority of 1 is lowest)
  OB82_OB_NUMBR : BYTE ;	//82 (Organization block 82, OB82)
  OB82_RESERVED_1 : BYTE ;	//Reserved for system
  OB82_IO_FLAG : BYTE ;	//Input (01010100), Output (01010101)
  OB82_MDL_ADDR : WORD ;	//Base address of module with fault
  OB82_MDL_DEFECT : BOOL ;	//Module defective
  OB82_INT_FAULT : BOOL ;	//Internal fault
  OB82_EXT_FAULT : BOOL ;	//External fault
  OB82_PNT_INFO : BOOL ;	//Point information
  OB82_EXT_VOLTAGE : BOOL ;	//External voltage low
  OB82_FLD_CONNCTR : BOOL ;	//Field wiring connector missing
  OB82_NO_CONFIG : BOOL ;	//Module has no configuration data
  OB82_CONFIG_ERR : BOOL ;	//Module has configuration error
  OB82_MDL_TYPE : BYTE ;	//Type of module
  OB82_SUB_NDL_ERR : BOOL ;	//Sub-Module is missing or has error
  OB82_COMM_FAULT : BOOL ;	//Communication fault
  OB82_MDL_STOP : BOOL ;	//Module is stopped
  OB82_WTCH_DOG_FLT : BOOL ;	//Watch dog timer stopped module
  OB82_INT_PS_FLT : BOOL ;	//Internal power supply fault
  OB82_PRIM_BATT_FLT : BOOL ;	//Primary battery is in fault
  OB82_BCKUP_BATT_FLT : BOOL ;	//Backup battery is in fault
  OB82_RESERVED_2 : BOOL ;	//Reserved for system
  OB82_RACK_FLT : BOOL ;	//Rack fault, only for bus interface module
  OB82_PROC_FLT : BOOL ;	//Processor fault
  OB82_EPROM_FLT : BOOL ;	//EPROM fault
  OB82_RAM_FLT : BOOL ;	//RAM fault
  OB82_ADU_FLT : BOOL ;	//ADU fault
  OB82_FUSE_FLT : BOOL ;	//Fuse fault
  OB82_HW_INTR_FLT : BOOL ;	//Hardware interupt input in fault
  OB82_RESERVED_3 : BOOL ;	//Reserved for system  
  OB82_DATE_TIME : DATE_AND_TIME ;	//Date and time OB82 started   
END_VAR
BEGIN
NETWORK
TITLE =AA: Call OB82 handling
//FB_OB82_HW_Error:
//Input: ANY Pointer to HW Error Bitmap (length 18 bits)
//
//FB_OB82_DP_Error (# calls = # DP master systems)
//Input: DP Master System Identification
//Input: ANY Pointer to DP Error Bitmap (length 16 bytes)
      NOP   0; 

// Detect main rack module errors
      CALL "FB_OB82_HW_Error" , "DI_OB82_HW_Error" (
           i_HW_Error_Bitmap        := "DB_Diagnose_HW".Module_Error);

// Detect Profibus DP slave errors (DP Master System ID = 1)
      CALL "FB_OB82_DP_Error" , "DI_OB82_DP_Error" (
           i_DP_Master_System_ID    := 1,
           i_DP_Error_Bitmap        := "DB_Diagnose_DP".Master_System_1.Slave_Error);

      CALL "FC_OB82_PN_Error" (
           i_PN_IO_System_ID        := 100,
           i_PN_Error_Bitmap        := "DB_Diagnose_PN".PNIO_System_100.Device_Error);

END_ORGANIZATION_BLOCK

