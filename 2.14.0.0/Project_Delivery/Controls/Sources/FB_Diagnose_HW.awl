FUNCTION_BLOCK "FB_Diagnose_HW"
TITLE =%version: 0.05 % CN: 30
//Function: 
//Module for cyclic Hardware diagnose (main rack module not present and error)
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:00:33 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.05
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.05
//14162: Update comment of variable                     nlHdL    17-06-15   0.05
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.04
//PR6187 statics renamed to temp when AR2 is used        nlHdL   03-01-11   0.03
//Updated Rev.nr.                                        nlRSwi  01-09-10   0.02
//Copied from SSS                                        nlRSwi  31-08-10   0.01
//Based on FB_Diagnose_HW version 1.3 library BH  
//
//Description: 
//With SFC51 (Read System Status List) main rack module data records are 
//retrieved. In a loop these data records (containing per module: slot number, 
//I/O status, etc) are analyzed and lists with main rack module not present and 
//error information are created. These lists are copied to the main rack module 
//not present and error bitmaps.                 
//
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_Refresh_Rate : INT ;	//[sec] Refresh rate of the cyclic HW diagnosis
  i_HW_Not_Present_Bitmap : ANY ;	//ANY pointer to HW Not Present Bitmap
  i_HW_Error_Bitmap : ANY ;	//ANY pointer to HW Error Bitmap
  i_HW_Power_Supply_Err : ANY ;	//ANY pointer to HW Power Suply Error
END_VAR
VAR
  s_Lst_Module_Not_Present : ARRAY  [1 .. 18 ] OF //Array List HW modules in main rack not present
  BOOL ;	
  s_Lst_Module_Error : ARRAY  [1 .. 18 ] OF //Array List HW modules in main rack error
  BOOL ;	
  s_SFC51_Data_Records : ARRAY  [1 .. 18 ] OF //Data records SFC51
  STRUCT 	
   Adr1 : WORD ;	//Adress1 Data Record of SFC51
   Adr2 : WORD ;	//Adress2 Data Record of SFC51
   LogAdr : WORD ;	//LogAdress Data Record of SFC51
   SollTyp : WORD ;	//Soll type Data Record of SFC51
   IstTyp : WORD ;	//IstType Data Record of SFC51
   Alarm : WORD ;	//Alarm Data Record of SFC51
   Eastat : WORD ;	//Eastat Data Record of SFC51
   Ber_bgbr : BOOL ;	//Ber bgbr Data Record of SFC51
  END_STRUCT ;	
  s_SFC51_SSL_HEADER : STRUCT 	//SSL_Header SFC51 (Struct)
   LENTHDR : WORD ;	//Length of a data recording bytes
   N_DR : WORD ;	//Number of data records
  END_STRUCT ;	
  s_Any_byte_0_3 : DWORD ;	//Used for copy ANY Pointers
  s_Status_Power_Supply : WORD ;	//Copy status from SFC51 data records
  s_timer_triggering : INT ;	//Timer triggering
  s_ret_val : INT ;	//General (not used) return value
  s_SFC51_ret_val : INT ;	//Return value SFC51
  s_SFC20_ret_val : INT ;	//Return value SFC20
  s_SFC51_busy : BOOL ;	//SFC51 is busy executing
  s_Error : BOOL ;	//Error during execution
  s_OS_Trigger : BOOL ;	//One-shot trigger diagnosis
END_VAR
VAR_TEMP
  t_HW_Not_Present_Bitmap : ANY ;	//Temp ANY Pointer to HW module Not present bitmap
  t_HW_Error_Bitmap : ANY ;	//Temp ANY Pointer to HW module Error bitmap
  t_Pointer : DWORD ;	//Temp used for copy ANY Pointers
  t_AR2_Memory : DWORD ;	//Temp AR2 contents
  t_SLOT : WORD ;	//Temp SLOT number in main rack
  t_Module_Not_Present : BOOL ;	//Temp module not present
  t_Module_Present_OK : BOOL ;	//Temp module present and OK
  t_Module_Present_Fault : BOOL ;	//Temp module present and not OK
  t_Number_Records : INT ;	//Temp number of records analyzed
  t_AR2_Mask : DWORD ;	//'relative address'-mask
  t_clear_Records_help : INT ;	//Temp help int for clearing records
  t_DB_Num : WORD ;	//Temp used for copy ANY Pointers
  t_DI_Memory : WORD ;	//Temp Instance DB number from this function block
END_VAR
BEGIN
NETWORK
TITLE =AA: Get 'relative address'-mask
//In case of a multiple instance DB, AR2 contains the pointer from the beginning 
//of the multiple instance DB to the start of the instance DB of this FB. AR2 is 
//masked and stored for further use.
      TAR2  ; 
      AD    DW#16#FFFFFF; 
      T     #t_AR2_Mask; 
NETWORK
TITLE =BA: Diagnosis triggering
//Pre-set triggering timer
      A     #s_OS_Trigger; 
      JCN   BA03; 

      L     0; // IF input refresh rate > 0:
      L     #i_Refresh_Rate; // Timer triggering = input refresh rate
      <I    ; 
      JCN   BA01; 

      JU    BA02; 

BA01: L     10; // IF input refresh rate = 0:
BA02: T     #s_timer_triggering; // Timer triggering = 10

// Reset one-shot trigger
BA03: SET   ; 
      R     #s_OS_Trigger; 

// Countdown of the triggering timer (each second)
      A     "M_OS_/1.0_sec."; 
      JCN   BA05; 

      L     #s_timer_triggering; 
      L     1; 
      -I    ; 
      JPZ   BA04; 

      L     0; // Keep on zero
BA04: T     #s_timer_triggering; 

// Evaluation of triggering timer 
BA05: L     #s_timer_triggering; // IF timer triggering <= 0 
      L     0; 
      <=I   ; 
      S     #s_OS_Trigger; // SET one-shot triggering
NETWORK
TITLE =CA: Start of function and reset global merker
//On a one shot trigger, the function is started and the Global Merker 
//M_HW_Diag_Interrupt is RESET.
      AN    #s_OS_Trigger; // IF NOT one shot trigger..
      BEC   ; // ..End function

      SET   ; 
      R     "M_HW_Diag_Interrupt"; // ELSE RESET Merker M_DP1_Diag_interrupt
NETWORK
TITLE =DA: Recover main rack module data records (SFC51)
//SFC51 (RDSYSST, read system status) is parameterized with SZL_ID = W#16#0D91 
//and INDEX = W#16#0000, which recovers the data status records of all main rack 
//modules (max. 18). The data records are stored in array s_SFC51_Data_Records. 
// Loop to clear data status records
      L     0; // Reset clear records help int
      T     #t_clear_Records_help; 

      L     P##s_SFC51_Data_Records; // Load pointer to SFC51_Data_Records
      L     #t_AR2_Mask; // Add 'relative address'-mask
      +D    ; 
      LAR1  ; 

DA01: L     DW#16#0; // Clear first 2 DWORDs
      T     D [AR1,P#0.0]; 

      L     #t_clear_Records_help; // Increment clear records help by 1
      L     1; 
      +I    ; 
      T     #t_clear_Records_help; 

      L     #t_clear_Records_help; // (All 18 records cleared -> record = 4 DWORDs)
      L     72; 
      <>I   ; 
      JCN   DA02; // End loop

      TAR1  ; // Else set pointer to next 2 DWORDs
      L     P#4.0; // And repeat loop
      +D    ; 
      LAR1  ; 

      JU    DA01; 

// Determine SSL Header
DA02: L     W#16#10; // Load 16 (Record length W#16#0D91)
      T     #s_SFC51_SSL_HEADER.LENTHDR; // Transfer to Record Length

      L     W#16#12; // Load 18 (Max. number of slots)
      T     #s_SFC51_SSL_HEADER.N_DR; // Transfer to Number of Records

// Recover module data records:
// SZL_ID = W#16#0D91 (All modules in a specified rack)
// INDEX = W#16#0 (Main rack)
// SZL_HEADER = see above 
// DR = s_data_record = array [1..18] of struct data record
      CALL "RDSYSST" (
           REQ                      := TRUE,
           SZL_ID                   := W#16#D91,
           INDEX                    := W#16#0,
           RET_VAL                  := #s_SFC51_ret_val,
           BUSY                     := #s_SFC51_busy,
           SZL_HEADER               := #s_SFC51_SSL_HEADER,
           DR                       := #s_SFC51_Data_Records);

// Error condition: SFC51 return value not 0
// ************** TODO: Error handling **************

      L     #s_SFC51_ret_val; 
      L     0; 
      <>I   ; 
      JCN   DA99; 

      S     #s_Error; 

      BEU   ; 

DA99: NOP   0; 
NETWORK
TITLE =EA: Update List Module Not present/Error 
//On the basis of the main rack module status records the List Module Not Present 
//and the List Module Error are updated. In a loop all records are analyzed and 
//flags in the arrays s_Lst_Module_Not_Present and s_Lst_Module_Error are set or 
//reset. Used information from the records are: rack, slotnr, module 
//error/exists/not exists/disabled.
// Save register AR2 contents
      L     DINO; // Save Instance DB number
      T     #t_DI_Memory; 
      TAR2  #t_AR2_Memory; // Save AR2 contents

// Clear module status lists
      L     P##s_Lst_Module_Not_Present; // Load pointer to List Module Not Present
      L     #t_AR2_Mask; // Add 'relative address'-mask
      +D    ; 
      LAR1  ; 

      L     0; // Clear 18 slot positions (DoubleWord + 2 bits)
      T     D [AR1,P#0.0]; 

      SET   ; 
      R      [AR1,P#2.0]; 
      R      [AR1,P#2.1]; 

      L     P##s_Lst_Module_Error; // Load pointer to List Module Error
      L     #t_AR2_Mask; // Add 'relative address'-mask
      +D    ; 
      LAR1  ; 

      L     0; // Clear 18 slot positions (DoubleWord + 2 bits)
      T     D [AR1,P#0.0]; 

      SET   ; 
      R      [AR1,P#2.0]; 
      R      [AR1,P#2.1]; 

// Clear temp. number of analyzed records
      L     0; 
      T     #t_Number_Records; 

// Create Pointer to data records and init loop
      L     P##s_SFC51_Data_Records; // Load pointer to Data Record
      L     #t_AR2_Mask; // Add 'relative address'-mask
      +D    ; 
      LAR1  ; // Transfer to AR1

// Start loop 
EA02: L     W [AR1,P#0.0]; // IF module is NOT in main rack (W#16#0)..
      L     W#16#0; 
      ==I   ; 
      JCN   EA03; // ..THEN goto next record

      L     W [AR1,P#2.0]; // IF module slot number is 0 (no valid slot number)..
      L     W#16#0; // (Last used data record already processed)
      <>I   ; 
      JCN   EA04; // ..THEN exit loop 

// 1) Determine module status

      O      [AR1,P#13.2]; // IF module not exists
      O      [AR1,P#13.3]; // OR module disabled
      AN     [AR1,P#13.1]; // AND NOT module exists
      AN     [AR1,P#13.0]; // AND NOT module error..
      =     #t_Module_Not_Present; // ..THEN SET module Not Present

      A      [AR1,P#13.1]; // IF module exists
      AN     [AR1,P#13.0]; // AND NOT module error
      AN     [AR1,P#13.2]; // AND NOT module not exists
      AN     [AR1,P#13.3]; // AND NOT module disabled..
      =     #t_Module_Present_OK; // ..THEN SET module Present and OK

      A      [AR1,P#13.0]; // IF module error
      O      [AR1,P#13.2]; // OR module not exists
      O      [AR1,P#13.3]; // OR module disabled..
      A      [AR1,P#13.1]; // AND module exists
      =     #t_Module_Present_Fault; // ..THEN SET module Present and Fault

// 2) Determine Position in Module Status Bitmaps
      L     W [AR1,P#2.0]; // Load slot number
      SRW   8; 
      T     #t_SLOT; // Increase slot number for correct 
      DEC   1; // positioning in List Module Not Present/Error
      T     #t_SLOT; 

// 3) Update List Module Not Present
      L     P##s_Lst_Module_Not_Present; // Load pointer to List Module Not Present
      L     #t_AR2_Mask; // Add 'relative address'-mask
      +D    ; 
      L     #t_SLOT; // And add Offset in List Module Not Present (=slot number)
      +D    ; 
      LAR2  ; 

      A     #t_Module_Not_Present; // IF module not present..
      S      [AR2,P#0.0]; // ..SET flag in List Not Present on module slot position 

      O     #t_Module_Present_Fault; // IF module present and OK
      O     #t_Module_Present_OK; // OR module present and Fault..
      R      [AR2,P#0.0]; // ..RESET flag in List Not Present on module slot position

// 4) Update List Module Error
      L     P##s_Lst_Module_Error; // Load pointer to List Module Error
      L     #t_AR2_Mask; // Add 'relative address'-mask
      +D    ; 
      L     #t_SLOT; // And add Offset in List Module Error (=slot number)
      +D    ; 
      LAR2  ; 

      A     #t_Module_Present_Fault; // IF module present and Fault..
      S      [AR2,P#0.0]; // ..SET flag in List Error on module slot position 

      O     #t_Module_Present_OK; // IF module present and OK
      O     #t_Module_Not_Present; // OR module not present..
      R      [AR2,P#0.0]; // ..RESET flag in List Error on module slot position 

// 5) Check number of analyzed records and determine next record in data record array
EA03: L     #t_Number_Records; // Increas number of analyzed records by 1
      INC   1; 
      T     #t_Number_Records; // IF number of analyzed records = 18 (All slots occupied)..
      L     18; 
      <>I   ; // ..THEN end loop
      JCN   EA04; 

      TAR1  ; // Load pointer to start of processed data record (AR1)
      L     P#16.0; // Increase the pointer by a WORD (next record)
      +D    ; 
      LAR1  ; // Transfer to AR1 and process this next record

      JU    EA02; 

// End Loop and restore register AR2 contents 
EA04: OPN   DI [#t_DI_Memory]; // Open Instance DB
      LAR2  #t_AR2_Memory; // Restore AR2      
NETWORK
TITLE =FA: Disable alarm interrupts & Check status of global merker
//Delay the Processing of Higher Priority Interrupts and Asynchronous Errors 
//(SFC41). The Global Merker M_HW_Diag_Interrupt is evaluated. If this Merker is 
//TRUE (Interrupt occured during execution of SFC51 or updating lists) the 
//information of SFC51/listst has become obsolete and is no longer valid. 
//The function ends without copy action to the bitmaps. If this Merker is FALSE 
//the copy action can be executed.
      CALL "DIS_AIRT" (
           RET_VAL                  := #s_ret_val);

NETWORK
TITLE =GA: Copy lists to HW status bitmap
//Copy s_Lst_Module_Not_Present to Module Not Present Bitmap
//Copy s_Lst_Module_Error to Module Error Bitmap
// Copy input ANY Pointer i_HW_Not_Present_Bitmap to 
// temp ANY Pointer t_HW_Not_Present_Bitmap (for blockmove) 
      AN    "M_HW_Diag_Interrupt"; 
      JCN   GA99; 

      L     P##i_HW_Not_Present_Bitmap; // Load ANY pointer to input HW Not Present bitmap
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Not Present bitmap
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Not Present bitmap in DB
      T     #t_Pointer; // Transfer to temp Pointer

      L     P##t_HW_Not_Present_Bitmap; // Load ANY Pointer to temp HW Not Present Bitmap 
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     #s_Any_byte_0_3; // Load temp Any_Byte_0_3
      T     LD [AR1,P#0.0]; // Transfer to first 4 bytes of ANY Pointer 

      L     #t_DB_Num; // Load temp DB_num
      T     LW [AR1,P#4.0]; // Transfer to DB number HW Not Present bitmap

      L     #t_Pointer; // Load temp Pointer
      T     LD [AR1,P#6.0]; // Transfer to start of HW Not Present bitmap in DB

// Copy input ANY Pointer i_HW_Error_Bitmap to 
// temp ANY Pointer t_HW_Error_Bitmap (for blockmove) 

      L     P##i_HW_Error_Bitmap; // Load ANY pointer to input HW Error bitmap
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Error bitmap
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error bitmap in DB
      T     #t_Pointer; // Transfer to temp Pointer

      L     P##t_HW_Error_Bitmap; // Load ANY Pointer to temp HW Error Bitmap 
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     #s_Any_byte_0_3; // Load temp Any_Byte_0_3
      T     LD [AR1,P#0.0]; // Transfer to first 4 bytes of ANY Pointer 

      L     #t_DB_Num; // Load temp DB_num
      T     LW [AR1,P#4.0]; // Transfer to DB number HW Error bitmap

      L     #t_Pointer; // Load temp Pointer
      T     LD [AR1,P#6.0]; // Transfer to start of HW Error bitmap in DB

// Blockmove: Copy s_Lst_Module_Not_Present to t_HW_Not_Present_Bitmap
      CALL "BLKMOV" (
           SRCBLK                   := #s_Lst_Module_Not_Present,
           RET_VAL                  := #s_SFC20_ret_val,
           DSTBLK                   := #t_HW_Not_Present_Bitmap);

// Error condition: SFC 20 return value not 0
// ************** TODO: Error handling **************
      L     #s_SFC20_ret_val; 
      L     0; 
      <>I   ; 
      S     #s_Error; 

// Blockmove: Copy s_Lst_Module_Error to t_HW_Error_Bitmap
      CALL "BLKMOV" (
           SRCBLK                   := #s_Lst_Module_Error,
           RET_VAL                  := #s_SFC20_ret_val,
           DSTBLK                   := #t_HW_Error_Bitmap);

// Error condition: SFC 20 return value not 0
// ************** TODO: Error handling **************
      L     #s_SFC20_ret_val; 
      L     0; 
      <>I   ; 
      S     #s_Error; 

GA99: NOP   0; 
NETWORK
TITLE =HA: Recover of the backup battery error (SFC51)
//SFC51 (RDSYSST, read system status) is parameterized with SZL_ID = W#16#0392 
//and INDEX = W#16#0000, which recovers the data status of the backup batteries 
//in 
//a rack/module rack of a CPU after at least one battery has failed. The data 
//records are stored in array s_SFC51_Data_Records. 
// Loop to clear data status records
      AN    "M_HW_Diag_Interrupt"; 
      JCN   HA99; 

      L     P##i_HW_Power_Supply_Err; // Load ANY pointer to input HW Power Supply
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Error 
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error in DB
      T     #t_Pointer; // Transfer to temp Pointer

      OPN   DB [#t_DB_Num]; 
      L     #t_Pointer; 
      LAR1  ; 

      A     DBX [AR1,P#0.0]; // Check if BATTF error is active
      JCN   HA99; // If no error exit network

// Determine SSL Header
      L     W#16#10; // Load 16 (Record length W#16#0392)
      T     #s_SFC51_SSL_HEADER.LENTHDR; // Transfer to Record Length

      L     W#16#12; // Load 18 (Max. number of slots)
      T     #s_SFC51_SSL_HEADER.N_DR; // Transfer to Number of Records

// Recover module data records:
// SZL_ID = W#16#0392 (Status of the backup batteries in a rack/module rack of a CPU after at least one battery has failed)
// INDEX = W#16#0 (Main rack)
// SZL_HEADER = see above 
// DR = s_data_record = array [1..18] of struct data record. The status is reported in the 1 data record
      CALL "RDSYSST" (
           REQ                      := TRUE,
           SZL_ID                   := W#16#392,
           INDEX                    := W#16#0,
           RET_VAL                  := #s_SFC51_ret_val,
           BUSY                     := #s_SFC51_busy,
           SZL_HEADER               := #s_SFC51_SSL_HEADER,
           DR                       := #s_SFC51_Data_Records);

      L     #s_SFC51_Data_Records[1].Adr1; 
      T     #s_Status_Power_Supply; // Copy status to temp

// Error condition: SFC51 return value not 0
// ************** TODO: Error handling **************

      L     #s_SFC51_ret_val; 
      L     0; 
      <>I   ; 
      JCN   HA01; 

      S     #s_Error; // Report error if SZL_ID not correct

      BEU   ; 

HA01: L     #s_Status_Power_Supply; 
      L     0; 
      ==I   ; // If Error is cleared then status returns a 0
      JCN   HA99; 

      L     P##i_HW_Power_Supply_Err; // Load ANY pointer to input HW Power Supply
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Error 
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error in DB
      T     #t_Pointer; // Transfer to temp Pointer

      OPN   DB [#t_DB_Num]; 

      L     #t_Pointer; 
      LAR1  ; 

      SET   ; 
      R     DBX [AR1,P#0.0]; // Clear then error bit

HA99: NOP   0; 
NETWORK
TITLE =IA: Recover of the overall battery backup error (SFC51)
//SFC51 (RDSYSST, read system status) is parameterized with SZL_ID = W#16#0492 
//and INDEX = W#16#0000, which recovers the data status of the backup batteries 
//in 
//a rack/module rack of a CPU after at least one battery has failed. The data 
//records are stored in array s_SFC51_Data_Records. 
// Loop to clear data status records
      L     P##i_HW_Power_Supply_Err; // Load ANY pointer to input HW Power Supply
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Error 
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error in DB
      T     #t_Pointer; // Transfer to temp Pointer

      OPN   DB [#t_DB_Num]; 
      L     #t_Pointer; 
      LAR1  ; 

      A     DBX [AR1,P#0.1]; // Check if BAF error is active
      JCN   IA99; // If no error exit network

// Determine SSL Header
      L     W#16#10; // Load 16 (Record length W#16#0492)
      T     #s_SFC51_SSL_HEADER.LENTHDR; // Transfer to Record Length

      L     W#16#12; // Load 18 (Max. number of slots)
      T     #s_SFC51_SSL_HEADER.N_DR; // Transfer to Number of Records

// Recover module data records:
// SZL_ID = W#16#0492 (Status of the backup batteries in a rack/module rack of a CPU after at least one battery has failed)
// INDEX = W#16#0 (Main rack)
// SZL_HEADER = see above 
// DR = s_data_record = array [1..18] of struct data record. The status is reported in the 1 data record 
      CALL "RDSYSST" (
           REQ                      := TRUE,
           SZL_ID                   := W#16#492,
           INDEX                    := W#16#0,
           RET_VAL                  := #s_SFC51_ret_val,
           BUSY                     := #s_SFC51_busy,
           SZL_HEADER               := #s_SFC51_SSL_HEADER,
           DR                       := #s_SFC51_Data_Records);

      L     #s_SFC51_Data_Records[1].Adr1; 
      T     #s_Status_Power_Supply; 

// Error condition: SFC51 return value not 0
// ************** TODO: Error handling **************

      L     #s_SFC51_ret_val; 
      L     0; 
      <>I   ; 
      JCN   IA01; 

      S     #s_Error; // Report error if SZL_ID not correct

      BEU   ; 

IA01: L     #s_Status_Power_Supply; 
      L     0; 
      ==I   ; // If Error is cleared then status returns a 0
      JCN   IA99; 

      L     P##i_HW_Power_Supply_Err; // Load ANY pointer to input HW Power Supply
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Error 
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error in DB
      T     #t_Pointer; // Transfer to temp Pointer

      OPN   DB [#t_DB_Num]; 
      L     #t_Pointer; 
      LAR1  ; 

      SET   ; 
      R     DBX [AR1,P#0.1]; // Clear then error bit

IA99: NOP   0; 
NETWORK
TITLE =JA: Recover 24Volt power supply error (SFC51)
//SFC51 (RDSYSST, read system status) is parameterized with SZL_ID = W#16#0592 
//and INDEX = W#16#0000, which recovers the data Status of the 24 Volt power 
//supply to all racks/module racks of a CPU=24V . 
//The data records are stored in array s_SFC51_Data_Records. 
// Loop to clear data status records
      L     P##i_HW_Power_Supply_Err; // Load ANY pointer to input HW Power Supply
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 

      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3

      L     W [AR1,P#4.0]; // Load DB number HW Error 
      T     #t_DB_Num; // Transfer to temp DB_num

      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error in DB
      T     #t_Pointer; // Transfer to temp Pointer

      OPN   DB [#t_DB_Num]; 

      L     #t_Pointer; 
      LAR1  ; 

      A     DBX [AR1,P#0.2]; // Check if 24V error is active
      JCN   JA99; // If no error exit network

// Determine SSL Header
      L     W#16#10; // Load 16 (Record length W#16#0592)
      T     #s_SFC51_SSL_HEADER.LENTHDR; // Transfer to Record Length

      L     W#16#12; // Load 18 (Max. number of slots)
      T     #s_SFC51_SSL_HEADER.N_DR; // Transfer to Number of Records

// Recover module data records:
// SZL_ID = W#16#0592 (Status of the 24 Volt power supply to all racks/module racks of a CPU=24V))
// INDEX = W#16#0 (Main rack)
// SZL_HEADER = see above 
// DR = s_data_record = array [1..18] of struct data record. The status is reported in the 1 data record
      CALL "RDSYSST" (
           REQ                      := TRUE,
           SZL_ID                   := W#16#592,
           INDEX                    := W#16#0,
           RET_VAL                  := #s_SFC51_ret_val,
           BUSY                     := #s_SFC51_busy,
           SZL_HEADER               := #s_SFC51_SSL_HEADER,
           DR                       := #s_SFC51_Data_Records);

      L     #s_SFC51_Data_Records[1].Adr1; 
      T     #s_Status_Power_Supply; // Copy the status to a temp

// Error condition: SFC51 return value not 0
// ************** TODO: Error handling **************

      L     #s_SFC51_ret_val; 
      L     0; 
      <>I   ; 
      JCN   JA01; 

      S     #s_Error; // Report error if SZL_ID not correct

      BEU   ; 

JA01: L     #s_Status_Power_Supply; 
      L     0; 
      ==I   ; // If Error is cleared then status returns a 0
      JCN   JA99; 

      L     P##i_HW_Power_Supply_Err; // Load ANY pointer to input HW Power Supply
      L     #t_AR2_Mask; // Add 'relative address'-mask to AR1
      +D    ; 
      LAR1  ; 
      L     D [AR1,P#0.0]; // Load first 4 bytes of ANY Pointer
      T     #s_Any_byte_0_3; // Transfer to temp Any_Byte_0_3
      L     W [AR1,P#4.0]; // Load DB number HW Error 
      T     #t_DB_Num; // Transfer to temp DB_num
      L     D [AR1,P#6.0]; // Load Pointer to start of HW Error in DB
      T     #t_Pointer; // Transfer to temp Pointer

      OPN   DB [#t_DB_Num]; 
      L     #t_Pointer; 
      LAR1  ; 

      SET   ; 
      R     DBX [AR1,P#0.2]; // Clear then error bit

JA99: NOP   0; 
NETWORK
TITLE =KA: Enable alarm interrupts
//Enabling the Processing of Higher Priority Interrupts and Asynchronous Errors 
//(SFC42)
      CALL "EN_AIRT" (
           RET_VAL                  := #s_ret_val);

END_FUNCTION_BLOCK

