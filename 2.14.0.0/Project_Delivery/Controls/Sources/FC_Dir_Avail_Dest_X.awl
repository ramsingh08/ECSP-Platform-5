FUNCTION "FC_Dir_Avail_Dest_X" : VOID
TITLE =%version: 0.08 % CN: 33
//Function:
//Retreive data for instance DB and then check the destination with downstream RTR
//
//History:
//This version  %created_by: inrjoi %
//              %date_created: Thursday, September 07, 2017 6:59:39 AM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#23996: PLC going to STOP when used in UNZ01        inrjoi   07-09-17   0.08
//bhs_plf#2415: Clear dir_c temps                       nlHdL    01-08-17   0.07
//ra#8938: Extra direction decision point and routing   nlHdL    23-02-16   0.06
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.05
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.05
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.05
//PR11918: Adopted Decision point update with Dir A & B nlHdL    02-04-13   0.04
//CR19512 Update sources according S7 Manager           nlHdL    08-03-13   0.03
//PR11727 Add synergy key words 'created_by' and date   nlHdL    14-11-12   0.02
//Initial Revision                                      nlHdL    28-09-11   0.01
//
//Description:
//Retreive data for instance DB and then check the destination with downstream RTR
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_Dir_A_Failure : BOOL ;	//Direction A has Failure
  i_Dir_A_Available : BOOL ;	//Direction A is Available
  i_Dir_A_Full : BOOL ;	//Direction A is Full
  i_Dir_B_Failure : BOOL ;	//Direction B has Failure
  i_Dir_B_Available : BOOL ;	//Direction B is Available
  i_Dir_B_Full : BOOL ;	//Direction B is Full
  i_Dir_C_Failure : BOOL ;	//Direction C has Failure
  i_Dir_C_Available : BOOL ;	//Direction C is Available
  i_Dir_C_Full : BOOL ;	//Direction C is Full
  i_CFG_Dir_C : BOOL ;	//Included direction C
  i_ANY_Decision_mess : ANY ;	//ANY pointer to the Decision messages
  i_DB_Event_Num : INT ;	//Number of DB event
  i_Rep_Route : INT ;	//Replay Route message for tracking report
END_VAR
VAR_TEMP
  t_Destination : INT ;	//Destination
  t_Preference_A : BYTE ;	//Preference for Direction A
  t_Preference_B : BYTE ;	//Preference for Direction B
  t_Preference_C : BYTE ;	//Preference for Direction C
  t_DecisionLvl : BYTE ;	//DecisionLevel	
  t_FailedReason_A : BYTE ;	//Failed Reason for Direction A	
  t_FailedReason_B : BYTE ;	//Failed Reason for Direction B
  t_FailedReason_C : BYTE ;	//Failed Reason for Direction C
  t_DINO : INT ;	//DB number of instance	
  t_DecisionLvl_int : INT ;	//Decision level int value
END_VAR
BEGIN
NETWORK
TITLE =AA: Retreive data of destination x from FB

      L     P##i_ANY_Decision_mess; 
      LAR1  ; 

      L     D [AR1,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     DIW [AR2,P#0.0]; 
      T     #t_Destination; 

      L     DIB [AR2,P#2.0]; 
      T     #t_Preference_A; 

      L     DIB [AR2,P#3.0]; 
      T     #t_Preference_B; 

      L     DIB [AR2,P#5.0]; 
      T     #t_DecisionLvl; 

      L     DIB [AR2,P#6.0]; 
      T     #t_FailedReason_A; 

      L     DIB [AR2,P#7.0]; 
      T     #t_FailedReason_B; 

      L     DINO; 
      T     #t_DINO; 

//Clear temps
      L     0; 
      T     #t_Preference_C; 
      T     #t_FailedReason_C; 

      A     #i_CFG_Dir_C; 
      JCN   AA99; 

      L     DIB [AR2,P#4.0]; 
      T     #t_Preference_C; 

      L     DIB [AR2,P#8.0]; 
      T     #t_FailedReason_C; 

AA99: NOP   0; 
NETWORK
TITLE =BA: Check if the direction has Failure

      L     #t_FailedReason_A; 
      L     0; 
      ==I   ; 
      JCN   BA01; 
//Check available if no current failed reason

      L     #t_Preference_A; 
      L     0; 
      >I    ; 
      A     #i_Dir_A_Failure; 
      JCN   BA01; 
//Check direction A

//Failed Reason = 10 ("TECHNICAL FAILURE")
      L     10; 
      T     #t_FailedReason_A; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 10,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

BA01: L     #t_FailedReason_B; 
      L     0; 
      ==I   ; 
      JCN   BA02; 
//Check available if no current failed reason

      L     #t_Preference_B; 
      L     0; 
      >I    ; 
      A     #i_Dir_B_Failure; 
      JCN   BA02; 
//Check direction B

//Failed Reason = 10 ("TECHNICAL FAILURE")
      L     10; 
      T     #t_FailedReason_B; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 10,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

BA02: L     #t_FailedReason_C; 
      L     0; 
      ==I   ; 
      JCN   BA99; 
//Check available if no current failed reason

      L     #t_Preference_C; 
      L     0; 
      >I    ; 
      A     #i_Dir_C_Failure; 
      JCN   BA99; 
//Check direction c

//Failed Reason = 10 ("TECHNICAL FAILURE")
      L     10; 
      T     #t_FailedReason_C; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 3,
           i_Failed_Reason          := 10,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

BA99: NOP   0; 
NETWORK
TITLE =CA: Check if the direction is available

      L     #t_FailedReason_A; 
      L     0; 
      ==I   ; 
      JCN   CA01; 
//Check available if no current failed reason

      L     #t_Preference_A; 
      L     0; 
      >I    ; 
      AN    #i_Dir_A_Available; 
      JCN   CA01; 
//Check direction A

//Failed Reason = 7 ("NOT AVAILABLE")
      L     7; 
      T     #t_FailedReason_A; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 7,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

CA01: L     #t_FailedReason_B; 
      L     0; 
      ==I   ; 
      JCN   CA02; 
//Check available if no current failed reason

      L     #t_Preference_B; 
      L     0; 
      >I    ; 
      AN    #i_Dir_B_Available; 
      JCN   CA02; 
//Check direction B

//Failed Reason = 7 ("NOT AVAILABLE")
      L     7; 
      T     #t_FailedReason_B; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 7,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

CA02: L     #t_FailedReason_C; 
      L     0; 
      ==I   ; 
      JCN   CA99; 
//Check available if no current failed reason

      L     #t_Preference_C; 
      L     0; 
      >I    ; 
      AN    #i_Dir_C_Available; 
      JCN   CA99; 
//Check direction C

//Failed Reason = 7 ("NOT AVAILABLE")
      L     7; 
      T     #t_FailedReason_C; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 3,
           i_Failed_Reason          := 7,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

CA99: NOP   0; 
NETWORK
TITLE =DA: Check if the direction is full

      L     #t_FailedReason_A; 
      L     0; 
      ==I   ; 
      JCN   DA01; 
//Check available if no current failed reason

      L     #t_Preference_A; 
      L     0; 
      >I    ; 
      A     #i_Dir_A_Full; 
      JCN   DA01; 
//Check direction A

//Failed Reason = 7 ("FULL")
      L     7; 
      T     #t_FailedReason_A; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 7,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

DA01: L     #t_FailedReason_B; 
      L     0; 
      ==I   ; 
      JCN   DA02; 
//Check available if no current failed reason

      L     #t_Preference_B; 
      L     0; 
      >I    ; 
      A     #i_Dir_B_Full; 
      JCN   DA02; 
//Check direction B

//Failed Reason = 7 ("FULL")
      L     7; 
      T     #t_FailedReason_B; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 7,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

DA02: L     #t_FailedReason_C; 
      L     0; 
      ==I   ; 
      JCN   DA99; 
//Check available if no current failed reason

      L     #t_Preference_C; 
      L     0; 
      >I    ; 
      A     #i_Dir_C_Full; 
      JCN   DA99; 
//Check direction C

//Failed Reason = 7 ("FULL")
      L     7; 
      T     #t_FailedReason_C; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 3,
           i_Failed_Reason          := 7,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

DA99: NOP   0; 
NETWORK
TITLE =EA: Write data of destination x to FB

      L     P##i_ANY_Decision_mess; 
      LAR1  ; 

      OPN   DI [#t_DINO]; 
      L     D [AR1,P#6.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     #t_Destination; 
      T     DIW [AR2,P#0.0]; 

      L     #t_Preference_A; 
      T     DIB [AR2,P#2.0]; 
      L     #t_Preference_B; 
      T     DIB [AR2,P#3.0]; 
      L     #t_DecisionLvl; 
      T     DIB [AR2,P#5.0]; 
      L     #t_FailedReason_A; 
      T     DIB [AR2,P#6.0]; 
      L     #t_FailedReason_B; 
      T     DIB [AR2,P#7.0]; 

      A     #i_CFG_Dir_C; 
      JCN   EA99; 

      L     #t_Preference_C; 
      T     DIB [AR2,P#4.0]; 
      L     #t_FailedReason_C; 
      T     DIB [AR2,P#8.0]; 

EA99: NOP   0; 
END_FUNCTION

