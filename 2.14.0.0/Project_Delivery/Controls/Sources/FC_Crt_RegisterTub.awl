FUNCTION "FC_Crt_RegisterTub" : VOID
TITLE =%version: 0.05 %  CN: 32
//Function:
//Prepare and send message 'RegisterPackage'
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:06:45 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.05
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.05
//23155: TIR in message for tubtrace                    nlHdL    24-04-15   0.05
//22403: Add check location wihtin Register             nlHdL    12-03-15   0.04
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    09-01-15   0.03
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.02
//18060: Update messages ID's for Vibes 3.2             nlHdL    01-04-14   0.01
//Initial Version based on version 0.03                 nlHdL    13-12-13   0.01
//
//Description:
//Prepare and send message 'RegisterPackage'
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_Data : INT ;	//Data needed to send the message
  i_FIFO_PLC_DB_num : INT ;	//Number of DB PLC FIFO
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_TEMP
  t_AR1_Backup : DINT ;	//Save the contents of AR1
  t_Last_Location : DINT ;	//Last location where item is seen
  t_Ret_Val_Word : WORD ;	//Return value Word, not used
  t_Ret_Val_Int : INT ;	//Return value Integer, not Used
  t_Register_Reason : INT ;	//Reason for registration (1= Expected, 2= Unexpected, 3 = Hand over)
  t_LIC_Number : INT ;	//LIC number
  t_ECS_Number : INT ;	//ECS number
  t_TIC_Number : INT ;	//TIC number
  t_Unexpected_item : BOOL ;	//Item is unexpected
END_VAR
BEGIN
NETWORK
TITLE =AA: Store AR1 and Get Date and Time

      TAR1  ; // Store AR1
      T     #t_AR1_Backup; 

      CALL "READ_CLK" (
           RET_VAL                  := #t_Ret_Val_Int,
           CDT                      := "DB_Outgoing_Msgs".Register.Body.EventTime);

NETWORK
TITLE =BA: RegisterReason

      NOP   0; 
// By default load 2 (unexpected) for the register reason
      L     2; 
      T     #t_Register_Reason; 

      SET   ; 
      =     #t_Unexpected_item; 

// Read ECS number from LNK list
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Data,
           i_P_INT_Record           := "DB_UDT_LNK_Record".ECS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_ECS_Number);

// Check if ECS number is valid
      L     #t_ECS_Number; 
      L     0; 
      >I    ; 
      JCN   BA99; 

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Unexpected_Item,
           i_DB                     := "DB_ECS_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_Unexpected_item);


      AN    #t_Unexpected_item; 
      JCN   BA01; 

      L     1; // Expected
      T     #t_Register_Reason; 

      JU    BA99; 

BA01: L     2; // Unexpected
      T     #t_Register_Reason; 

BA99: NOP   0; 
NETWORK
TITLE =CA: Write messageID

      AN    "M_Comm_Degraded"; // 
      JCN   CA01; 

      L     501; // When NOT in degraded mode
      T     "DB_Outgoing_Msgs".Register.Body.MessageID; 

      JU    CA99; 

CA01: L     1501; // When in degraded mode
      T     "DB_Outgoing_Msgs".Register.Body.MessageID; 

CA99: NOP   0; 
NETWORK
TITLE =DA: Copy AreaID, ZoneID and SectionID

      NOP   0; 
// Check if item is unexpected 
      A     #t_Unexpected_item; 
      JCN   DA02; 

//If current item is unexpected then send a register msg with the last(previous) location
// Determine last location which is required for reporting unexpected
      CALL "FC_Read_Dint_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_DINT_Record          := "DB_UDT_ECS_Record".CIR.Last_Location,
           i_DB                     := "DB_ECS_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_DINT                   := #t_Last_Location);

//Check if last location is valid, else report with own ID
      L     #t_Last_Location; 
      L     0; 
      <>D   ; 
      JCN   DA01; 

      L     #t_Last_Location; // Load ID
      L     DW#16#FFFF0000; // Filter Area number only
      AD    ; 
      SRD   16; // Slide Area nubmer to beginning AAAA0000 -> AAAA
      BTD   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.AreaID; // Transfer to outgoing messages

      L     #t_Last_Location; // Load ID
      L     DW#16#FF00; // Filter Zone number only
      AD    ; 
      SRD   8; // Slide Zone nubmer to beginning 0000ZZ00 -> 0000ZZ
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.ZoneID; // Transfer to outgoing messages

      L     #t_Last_Location; // Load ID
      L     DW#16#FF; // Filter Section number only
      AD    ; 
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.EquipmentID; // Transfer to outgoing messages

      JU    DA99; 

      L     #i_ID; // Load ID
      L     DW#16#FFFF0000; // Filter Area number only
      AD    ; 
      SRD   16; // Slide Area nubmer to beginning AAAA0000 -> AAAA
      BTD   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.AreaID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF00; // Filter Zone number only
      AD    ; 
      SRD   8; // Slide Zone nubmer to beginning 0000ZZ00 -> 0000ZZ
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.ZoneID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF; // Filter Section number only
      AD    ; 
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.EquipmentID; // Transfer to outgoing messages

      JU    DA99; 

DA01: NOP   0; 
      CALL "FC_Write_Event" (
           i_Message_ID             := 3209,//3209 Tracking Data: No valid ID for messages
           i_Event_value            := #i_Data,//LNK
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Val_Int);

DA02: NOP   0; 
      L     #i_ID; // Load ID
      L     DW#16#FFFF0000; // Filter Area number only
      AD    ; 
      SRD   16; // Slide Area nubmer to beginning AAAA0000 -> AAAA
      BTD   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.AreaID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF00; // Filter Zone number only
      AD    ; 
      SRD   8; // Slide Zone nubmer to beginning 0000ZZ00 -> 0000ZZ
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.ZoneID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF; // Filter Section number only
      AD    ; 
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".Register.Body.EquipmentID; // Transfer to outgoing messages

DA99: NOP   0; 
NETWORK
TITLE =EA: Copy BIR and other required information into message

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Data,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_LIC_Number);

      L     #t_LIC_Number; // Write LIC number in the message
      T     "DB_Outgoing_Msgs".Register.Body.LIC; 

      L     #t_Register_Reason; 
      T     "DB_Outgoing_Msgs".Register.Body.RegisterReason; 

      CALL "FC_Read_ANY_Record" (
           i_Record_Number          := #t_LIC_Number,
           i_ANY_Data_Record        := "DB_UDT_LIC_Record".BIR,
           i_ANY_Data               := "DB_Outgoing_Msgs".Register.Body.BIR,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num);

      L     0; 
      T     "DB_Outgoing_Msgs".Register.Body.TIR.ID; 

      L     "DB_Setting".common.External_Log_Level; 
      L     4; 
      >I    ; 
      JCN   EA01; 

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Data,
           i_P_INT_Record           := "DB_UDT_LNK_Record".TIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_TIC_Number);

      CALL "FC_Read_ANY_Record" (
           i_Record_Number          := #t_TIC_Number,
           i_ANY_Data_Record        := "DB_UDT_TIC_Record".TIR,
           i_ANY_Data               := "DB_Outgoing_Msgs".Register.Body.TIR,
           i_DB                     := "DB_TIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num);

EA01: NOP   0; 
NETWORK
TITLE =FA: Put message in buffer

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".Default,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".Register,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "FC_FIFO" (
           i_FIFO_DB_Num            := #i_FIFO_PLC_DB_num,
           i_Mode                   := 'L',
           i_ANY_Data               := "DB_Outgoing_Msgs".Merged_Message,
           i_ID                     := #i_ID,
           o_RET_VAL_FIFO           := #t_Ret_Val_Word);

NETWORK
TITLE =GA: Restore AR1

      L     #t_AR1_Backup; 
      LAR1  ; 
END_FUNCTION

