FUNCTION "FC_Int_To_Any_ASCII" : VOID
TITLE =%version: 0.04 % CN: 31
//Function:
//Convert an Integer to ANY Characters. 
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:05:09 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.04
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.04
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.04
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.04
//CR8255 Update internal logging event value            nlcsu    11-11-11   0.03
//CR6415 Remove o_RET_VAL                               nlple    28-09-11   0.02
//Initial Revision                                      nlHdL    31-01-11   0.01
//
//Description:
//IMPORTANT
//When u use symbolics at the input of type ANY that refer to a variable of the 
//type array or structure be aware that the number of array or structure is even 
//!                                                       
//
//examples: array[1..2]; array[1..4]; array[1..24]; etc.  
//                                           
//            t_char   STRUCT   
//             |nr_1   BYTE    
//             |nr_2   BYTE    
//             |nr_3   BYTE     
//             |nr_4   BYTE      
//
//When called, this function converts input i_integer_number to ASCII format and 
//returns the result through o_ASCII_number. Then de data will be send to the 
//destination pointer address. The integer must be positive within the range 0 to 
//+32767. When the integer is out of range, the conversion will not be carried 
//out.
//Contents of the address registers are being remembered during the block call. 
//This way the address registers can be used in the current block.
//The output o_RET_VAL contains information about the cause of the errror.
//?Code 0000:
//No error.
//.Code 3115: {information code}
//The area destination of the any pointer is too small (<5 bytes). When the 
//integer number is greater than the destination, only the msb's of the integer 
//number will be copied.
//.Code 3110: {error code}
//The double integer number is out of range. BR-bit is set.
//.Code 3113: {error code}
//Data type is neither byte nor char. BR-bit is set.
//.Code 3114: {error code}
//Wrong memory area from any pointer. BR-bit is set.
//
//Example: 12345 is converted in '12345' (31 32 33 34 35 hex.) 
//
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_INT : INT ;	//Integer input
  i_ANY_ASCII_Dest : ANY ;	//ANY pointer to the ASCII to result (even number of bytes)
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_TEMP
  t_Byte : STRUCT 	//5 Bytes
   Num_1 : BYTE ;	
   Num_2 : BYTE ;	
   Num_3 : BYTE ;	
   Num_4 : BYTE ;	
   Num_5 : BYTE ;	
  END_STRUCT ;	
  t_Int_H : INT ;	//Integer High
  t_Int_L : INT ;	//Integer Low
  t_BCD_H : DWORD ;	//BCD Format High
  t_ANY_P_Length : INT ;	//Length of ANY
  t_Data_Type : DWORD ;	//Data Type of ANY
  t_ANY_P_Byte_Address : DWORD ;	//Pointer of ANY
  t_AR1_Store : DWORD ;	//Store for AR1
  t_AR2_Store : DWORD ;	//Store for AR2
  t_Loop_cntr : INT ;	//Loop Counter
  t_Data_Type_Byte : BYTE ;	//Data Type
  t_DB_Number : INT ;	//Number of DB
  t_Integer : INT ;	//Integer for storage of data
  t_AR1_Memory : DWORD ;	//Backup for AR1	
  t_AR2_Memory : DWORD ;	//Backup for AR2	
  t_Event_Data : INT ;	//Temp event data
  t_Ret_Event : INT ;	//Temp return value event
END_VAR
BEGIN
NETWORK
TITLE =AA: store address registers and reset return value
//The address registers are used in this block. In this network the address 
//registers are stored to be remembered. The return value of this function is 
//presetted on zero.
      TAR1  ; //Store AR1
      T     #t_AR1_Store; 
      TAR2  ; //Store AR2
      T     #t_AR2_Store; 
NETWORK
TITLE =BA: check integer
//Checks input i_integer_number on range. 
//Integer must be between -32768 and +32767. If not, o_RET_VAL = 8003 and there 
//is no conversion.
      A(    ; 
      L     #i_INT; 
      L     32767; 
      <=I   ; //IF integer <= 32767
      )     ; 
      A(    ; 
      L     #i_INT; 
      L     -32768; 
      >=I   ; //AND integer >= -32768
      )     ; 
      JC    BA99; 
      SET   ; //set RLO-bit
      SAVE  ; //save RLO status in BR-bit

      L     0; 
      T     #t_Event_Data; 

      CALL "FC_Write_Event" (// Report event 'Data_Type_Conversion: Integer number is out of range (-32768 <= X <= 32767)' (3110)
           i_Message_ID             := 3110,
           i_Event_value            := 1,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Event);

      JU    GA01; 

BA99: NOP   0; 

NETWORK
TITLE =CA: split integer number
//Integer number is split into a t_Int_H (High) and a t_Int_L (Low) part.
      L     #i_INT; 
      L     10; 
      /D    ; 
      T     #t_Int_H; //byte 1..4
      L     #i_INT; 
      L     10; 
      MOD   ; 
      T     #t_Int_L; //byte 5 

NETWORK
TITLE =DA: convert integer to ASCII
//Converts integer-number into ASCII-format. The ASCII number is transported to 
//the local data area.
      L     #t_Int_H; 
      ITD   ; //convert integer to double integer
      DTB   ; //convert double integer to BCD
      T     #t_BCD_H; //save BCD for calculations
      L     DW#16#F0F; //select char2 and char4
      AD    ; 
      L     DW#16#3030; //add hex30 to char2 and char4
      OD    ; 
      T     #t_Byte.Num_4; //save char4 
      SRD   8; 
      T     #t_Byte.Num_2; //save char2
      L     #t_BCD_H; //load saved BCD
      L     DW#16#F0F0; //select char1 and char3
      AD    ; 
      L     DW#16#30300; //add hex30 to char1 and char3
      OD    ; 
      SRD   4; 
      T     #t_Byte.Num_3; //save char3
      SRD   8; 
      T     #t_Byte.Num_1; //save char1

      L     #t_Int_L; 
      ITB   ; //convert integer to BCD
      L     DW#16#30; //add hex30 to char5
      OW    ; 
      T     #t_Byte.Num_5; //save char5  

NETWORK
TITLE =EA: check any pointer
//The any pointer is checked on data type and memory area. And further 
//information 
//is stored to be used later in the program.
      L     P##i_ANY_ASCII_Dest; //input any pointer
      LAR1  ; 

//check data type on byte
      O(    ; 
      L     B [AR1,P#1.0]; 
      L     B#16#2; 
      ==I   ; //IF data type =byte 
      )     ; 
      O(    ; 
      L     B [AR1,P#1.0]; 
      L     B#16#3; 
      ==I   ; //IF data type =char 
      )     ; 
      JC    EA01; //THEN copy any pointer
      SET   ; //set RLO-bit
      SAVE  ; //save RLO status in BR-bit

      L     B [AR1,P#1.0]; 
      T     #t_Integer; 

      CALL "FC_Write_Event" (// Report event 'Data_Type_Conversion: Data type ANY pointer is incorrect (Not byte or char)' (3113)
           i_Message_ID             := 3113,
           i_Event_value            := #t_Integer,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Event);

      JU    GA01; 

EA01: L     W [AR1,P#2.0]; //load byte 2&3 = message length
      T     #t_ANY_P_Length; //store message length
      L     W [AR1,P#4.0]; //load byte 4&5 = DB number
      T     #t_DB_Number; //store DB number
      A(    ; 
      L     W#16#0; 
      >I    ; //IF1 DB pointer
      )     ; 
      JCN   EA03; //ELSE1 do not open DB or DI
      A(    ; //THEN1:
      L     B [AR1,P#6.0]; 
      L     B#16#84; 
      ==I   ; //IF2 memory area = DB
      )     ; 
      JCN   EA02; 
      OPN   DB [#t_DB_Number]; //THEN2 open DB
      JU    EA03; 

EA02: OPN   DI [#t_DB_Number]; //ELSE2 open DI

EA03: L     B [AR1,P#6.0]; //load area code of crossing pointer
      T     #t_Data_Type_Byte; //store data type (byte)
      SLD   24; 
      T     #t_Data_Type; //store data type for area pointer
      L     D [AR1,P#6.0]; //load area crossing pointer
      AD    DW#16#FFFF; //mask address area
      SRD   3; //remove bit address from accu 1
      T     #t_ANY_P_Byte_Address; //store begin byte address  

NETWORK
TITLE =FA: create destination and source pointer
//Depending on the length of the destination area destination and source pointers 
//are being created. IF length>=5 THEN source pointer reserves a 5 byte space in 
//the destination area ELSE only msb's of the integer are copied
//
      L     #t_ANY_P_Length; 
      L     5; 
      >=I   ; //IF1 length >= 5
      JCN   FA01; 

//create destination pointer
      L     #t_ANY_P_Length; 
      L     5; 
      T     #t_Loop_cntr; //set loop counter
      -I    ; 
      L     #t_ANY_P_Byte_Address; 
      +I    ; 
      ITD   ; 
      SLD   3; 
      L     #t_Data_Type; 
      +D    ; 
      LAR2  ; 

//create source pointer
      L     P##t_Byte; 
      LAR1  ; // store source pointer in AR1
      JU    FA99; 

//create destination pointer
FA01: L     D [AR1,P#6.0]; //ELSE1 {length < 5}
      LAR2  ; 

//create source pointer
      L     5; 
      L     #t_ANY_P_Length; 
      T     #t_Loop_cntr; 
      -I    ; 
      SLW   3; 
      L     DW#16#86000000; 
      OD    ; 
      LAR1  ; 

      TAR1  #t_AR1_Memory; //Store Address Registers
      TAR2  #t_AR2_Memory; 

      CALL "FC_Write_Event" (// Report event 'Data_Type_Conversion: Area destination of the ANY pointer is too small' (3115)
           i_Message_ID             := 3115,
           i_Event_value            := #t_ANY_P_Length,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Event);

      LAR1  #t_AR1_Memory; //Restore Address Registers
      LAR2  #t_AR2_Memory; 

FA99: NOP   0; 

NETWORK
TITLE =GA: copy contents of i_ANY_P_ASCII
//Copy bytes from source area to local data area.
//CASE t_Data_Type_Byte OF
      L     #t_Data_Type_Byte; 
      L     B#16#83; 
      ==I   ; //1: t_Data_Type_Byte = 83
      L     #t_Loop_cntr; 
      JC    GA01; //copy from memory bits memory area
      L     #t_Data_Type_Byte; 
      L     B#16#84; 
      ==I   ; //2: t_Data_Type_Byte = 84
      L     #t_Loop_cntr; 
      JC    GA02; //copy from data block
      L     #t_Data_Type_Byte; 
      L     B#16#85; 
      ==I   ; //3: t_Data_Type_Byte = 85
      L     #t_Loop_cntr; 
      JC    GA03; //copy from instance data block
      L     #t_Data_Type_Byte; 
      L     B#16#87; 
      ==I   ; //4: t_Data_Type_Byte = 87
      L     #t_Loop_cntr; 
      JC    GA04; //copy from previous local data
      SET   ; //set RLO-bit
      SAVE  ; //save RLO status in BR-bit

      L     #t_Data_Type_Byte; 
      T     #t_Integer; 

      CALL "FC_Write_Event" (// Report event 'Data_Type_Conversion: The ANY pointer has a wrong memory area' (3114)
           i_Message_ID             := 3114,
           i_Event_value            := #t_Integer,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Ret_Event);

      JU    GA01; 

GA01: T     #t_Loop_cntr; 
      L     LB [AR1,P#0.0]; 
      T     MB [AR2,P#0.0]; 
      +AR1  P#1.0; 
      +AR2  P#1.0; 
      L     #t_Loop_cntr; 
      LOOP  GA01; 
      JU    GA05; 

GA02: T     #t_Loop_cntr; 
      L     LB [AR1,P#0.0]; 
      T     DBB [AR2,P#0.0]; 
      +AR1  P#1.0; 
      +AR2  P#1.0; 
      L     #t_Loop_cntr; 
      LOOP  GA02; 
      JU    GA05; 

GA03: T     #t_Loop_cntr; 
      L     LB [AR1,P#0.0]; 
      T     DIB [AR2,P#0.0]; 
      +AR1  P#1.0; 
      +AR2  P#1.0; 
      L     #t_Loop_cntr; 
      LOOP  GA03; 
      JU    GA05; 

GA04: T     #t_Loop_cntr; 
      L     LB [AR1,P#0.0]; 
      T     B [AR2,P#0.0]; 
      +AR1  P#1.0; 
      +AR2  P#1.0; 
      L     #t_Loop_cntr; 
      LOOP  GA04; 

GA05: NOP   0; 

NETWORK
TITLE =HA: restore stored address registers
//The stored adderss registers are restored in this network.
      L     #t_AR1_Store; 
      LAR1  ; 
      L     #t_AR2_Store; 
      LAR2  ; 

END_FUNCTION

