FUNCTION_BLOCK "FB_DAT_PLC_Log"
TITLE =%version: 0.19 %  CN: 40
//Function:
//Logging events are placed in DB_Log_Event according to the logging level. 
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Tuesday, April 17, 2018 10:12:31 AM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#27962: ICS events to internal PLC logging          nlHdL    17-04-18   0.19
//ra#24941: Screening pending updates                   nldy     25-10-17   0.18
//ra#21133: Add screening pending conditions            inajos   18-09-17   0.17
//ra#22220: Match new UDT_HBS_Record structure          nldy     22-05-17   0.16
//ra#22146: FB_TCTC_Snd_Proddata use de-assign event    nlHdL    25-04-17   0.15
//ra#22146: FB_TCTC_Snd_Proddata use de-assign event    nlHdL    25-04-17   0.14
//ra#18111: Implement ICS trace to the GEN Libray       nlHdL    20-02-17   0.13
//ra#18904: Block Updated                               inajos   13-12-16   0.12
//Screen Pending updates from SIN_T1_CONV_COMPONENT     inajos   28-11-16   0.11
//ra#11147: FB_DAT_SAC changed to FB_DAT_Routing        nlHdL    28-04-16   0.10
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.09
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.09
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.09
//15970: Clean-up routine deregister with AZS number    nlHdL    20-11-13   0.09
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.08
//CR19512 Update sources according S7 Manager           nlHdL    08-03-13   0.07
//DeAssign LNK added for deregister events              nlLvdG   23-03-12   0.06
//No modification, updated version header               nlcsu    27-10-11   0.05
//CR8005 Added new field value to Log data DB           nlcsu    27-10-11   0.04
//PR5877 Changing interface FC_FIFO                     nlple    10-02-11   0.03
//Block update during data layer test                   nlHdL    15-10-10   0.02
//Initial Revision                                      nlMRe    03-09-10   0.01
//
//Description:
//The local Event DB is read and the logging messages are stored in in the 
//DB_Log_Event. This is only if the required logging level is high enough.
//The SAC (Routing) events can also be stored if the configuration is TRUE.
//The Statisticals can also be stored, if the configuratino is set to TRUE.
//From the events that are handled, the bit "Handled by PLC LOG" is set.
//At the end of the fucntion, the local Event DB is cleared.
//
//Log_Level |   Event_ID
//------------------------
//  -1      |  nothing
//  0       |  3000 Till 3099
//  1       |  3100 Till 3199
//  2       |  3200 Till 3299
//  3       |  3300 Till 3399
//  4       |  3400 Till 3499
//  5       |  3500 Till 3599
//  6       |  3600 Till 3699
//  7       |  3700 Till 3799
//  8       |  3800 Till 3899
//  9       |  3900 Till 3999
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_Local_Buffer : BLOCK_DB ;	//Data Structure: Local Buffer DB
  i_PLC_Log_FIFO_DB : BLOCK_DB ;	//Data structure: PLC FIFO Log DB
  i_CFG_Log_Level : INT ;	//CFG: [-1..10] Level of logging inside the PLC (-1 = no logging)
  i_CFG_PLC_Log_Route_Msgs : BOOL ;	//CFG: Log Routing messages (If TRUE = Messages are logged)
  i_CFG_LOG_BPI_Statistics : BOOL ;	//CFG: Log BPI statisticals (If TRUE = Messages are logged)
END_VAR
VAR
  s_Log_Data : "UDT_Log_Event";	//Data which will be logged
  s_Event_Value : INT ;	//Value for the statisticals
  s_Current_Event_ID : INT ;	//The current message ID which is read from the local event DB.
END_VAR
VAR_TEMP
  t_P_Logging_Text : ANY ;	//Pointer to the logging text.
  t_Event_DB_Num : INT ;	//Number of the Local Event DB
  t_PLC_Log_DB_Num : INT ;	//The number of the PLC Log DB 
  t_DB_No_Logging_Text : INT ;	//The DB number where the logging text is located
  t_Entries_Used : INT ;	//Number ot the entries used in the Local Event DB
  t_result : INT ;	
  t_Send_FIFO_Pend_Ups : INT ;	//Pending Updates Send FIFO
  t_HBS : INT ;	//HBS Record
  t_Return_FIFO : WORD ;	//Return value for logging FIFO
  t_Next_Event_to_Read : INT ;	//Next Message wich is going to be read
  t_Calculated_log_level : INT ;	//Log level of the event
  t_Next_Entry_to_Clear : INT ;	//The next entry to clear in Event DB
  t_Adres_Next_Event : INT ;	//Calculated addres of next record
  t_Return_Int : INT ;	//Return Value Int
  t_DB_Event_Pend_Num : INT ;	//Event DB Number Pending
  t_Pending_Items_Allowed : BOOL ;	//Pending items are allowed
END_VAR
BEGIN
NETWORK
TITLE =AA: Read local PLC DB number and HLC DB

      OPN   #i_PLC_Log_FIFO_DB; 
      L     DBNO; 
      T     #t_PLC_Log_DB_Num; 

      A     "DB_HBS_List".s_Pending_Items_Allowed; 
      =     #t_Pending_Items_Allowed; 

      OPN   "DB_Event_Pending"; 
      L     DBNO; 
      T     #t_DB_Event_Pend_Num; 

      OPN   #i_Local_Buffer; // Opn local Event buffer DB
      L     DBNO; 
      T     #t_Event_DB_Num; 

      L     DBW    0; // Load number of entries used in Local HLC DB
      T     #t_Entries_Used; // Transfer to temporery

NETWORK
TITLE =BA: SCAN DB and Log the Log messages

      L     1; // Start with the first record
      T     #t_Next_Event_to_Read; 

      L     #t_Entries_Used; // Check if there are events to Log
      L     0; 
      <>I   ; 
      JCN   BA99; 

BA01: L     #t_Next_Event_to_Read; // Load next record number
      L     1; // Take begin of record
      -I    ; 
      L     6; // Multiply by record length
      *I    ; 
      L     4; // Add header length
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      T     #t_Adres_Next_Event; 
      LAR1  ; // Load to static and AR1

      L     DBW [AR1,P#0.0]; // Load Value of the event 
      T     #s_Event_Value; 

      L     DBW [AR1,P#2.0]; 
      T     #s_Current_Event_ID; 

      L     #s_Current_Event_ID; // Check if event is a Routing event
      L     1000; 
      >=I   ; 
      A(    ; 
      L     #s_Current_Event_ID; 
      L     1999; 
      <=I   ; 
      )     ; 
      A     #i_CFG_PLC_Log_Route_Msgs; // And Logging is enabled for Routing messages
      JCN   BA02; 

      JU    BA04; // Then LOG it.

BA02: L     #s_Current_Event_ID; // Check if event is a Statistical message
      L     2000; 
      >=I   ; 
      A(    ; 
      L     #s_Current_Event_ID; 
      L     2899; 
      <=I   ; 
      )     ; 
      A     #i_CFG_LOG_BPI_Statistics; 
      JCN   BA13; 

      JU    BA04; 

BA13: L     #s_Current_Event_ID; // Check if event is a ICS exception trace
      L     2603; 
      ==I   ; 
      A(    ; 
      L     #i_CFG_Log_Level; 
      L     7; // Check if log should be logged
      >=I   ; 
      )     ; 
      JCN   BA03; 

      JU    BA04; 

BA03: L     #s_Current_Event_ID; // Check if event is a Logging event
      L     3000; 
      >=I   ; 
      A(    ; 
      L     #s_Current_Event_ID; 
      L     3999; 
      <=I   ; 
      )     ; 
      JCN   BA05; 

      L     #s_Current_Event_ID; // Load logging level
      L     3000; 
      -I    ; 
      L     100; 
      /D    ; 
      T     #t_Calculated_log_level; 

      L     #t_Calculated_log_level; // Check if log should be logged
      L     #i_CFG_Log_Level; 
      <=I   ; 
      JCN   BA05; 

BA04: L     "MW_Date"; // Timestamp (Date + Time_Of_Day)
      T     #s_Log_Data.Event_Date; 


      L     "MD_Time_Of_Day"; 
      T     #s_Log_Data.Event_Time; 

      L     #s_Current_Event_ID; 
      T     #s_Log_Data.Event_ID; 

      L     #i_ID; 
      T     #s_Log_Data.ID; 

      L     #s_Event_Value; 
      T     #s_Log_Data.Value; 

      CALL "FC_FIFO" (
           i_FIFO_DB_Num            := #t_PLC_Log_DB_Num,
           i_Mode                   := 'L',
           i_ANY_Data               := #s_Log_Data,
           i_ID                     := #i_ID,
           o_RET_VAL_FIFO           := #t_Return_FIFO);


      OPN   #i_Local_Buffer; // Opn local Event buffer DB

      L     #t_Adres_Next_Event; 
      LAR1  ; 

      SET   ; 
      =     DBX [AR1,P#4.3]; // Set "Handled By PLC Log" bit

BA05: NOP   0; 

      L     #t_Adres_Next_Event; // Load adress current event
      LAR1  ; // Transfer to AR 1

      L     #t_Next_Event_to_Read; // Increase next event with 1
      L     1; 
      +I    ; 
      T     #t_Next_Event_to_Read; // If next record to read is equal or smaller
      L     #t_Entries_Used; // then number of events in DB, than do next event
      >I    ; 
      JCN   BA01; 

BA99: NOP   0; 
NETWORK
TITLE =CA: Clear Event DB

      L     1; // Start with the first record
      T     #t_Next_Entry_to_Clear; 

      L     #t_Entries_Used; // Check if there are events 
      L     0; 
      <>I   ; 
      JCN   CA99; 

CA01: L     #t_Next_Entry_to_Clear; // Load next record number
      L     1; // Take begin of record
      -I    ; 
      L     6; // Multiply by record length
      *I    ; 
      L     4; // Add header length
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Load to static and AR1

      A(    ; 
      L     DBW [AR1,P#2.0]; // IF deregister (lost tracking)
      L     206; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     DBW [AR1,P#2.0]; // OR deregister lost tracking) in degraded mode
      L     1206; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     DBW [AR1,P#2.0]; // IF deregister (end of tracing)
      L     207; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     DBW [AR1,P#2.0]; // OR deregister (end of tracing) in degraded mode
      L     1207; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     DBW [AR1,P#2.0]; // OR deregister clean up routine
      L     1216; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     DBW [AR1,P#2.0]; // OR deassign check carrier list and clean up routine
      L     2906; 
      ==I   ; 
      )     ; 
      JCN   CA02; 

      L     DBW [AR1,P#0.0]; // Load Value for Deassign LNK
      T     #s_Event_Value; 

      CALL "FC_Read_Int_Record" (// Check if HBS record is present
           i_Record_Number          := #s_Event_Value,
           i_P_INT_Record           := "DB_UDT_LNK_Record".HBS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_Event_DB_Num,
           o_INT                    := #t_HBS);

      L     #t_HBS; // When HBS record is present
      L     0; 
      <>I   ; // Send UpdatePendingStatus with reason 0
      JCN   CA10; // ELSE just deassign the LNK

      A     #t_Pending_Items_Allowed; 
      JCN   CA10; // If pending functionality not available: dereg. immediately

      CALL "FC_Write_Event" (
           i_Message_ID             := 200,
           i_Event_value            := #s_Event_Value,//Link Number
           i_DB_Event_Num           := #t_DB_Event_Pend_Num,
           o_Return_Value           := #t_Return_Int);

      JU    CA02; 

CA10: CALL "FC_Deassign_LNK" (
           i_LNK                    := #s_Event_Value);

CA02: L     #t_Next_Entry_to_Clear; // Load next record number
      L     1; // Take begin of record
      -I    ; 
      L     6; // Multiply by record length
      *I    ; 
      L     4; // Add header length
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Load to static and AR1

      L     0; 
      T     DBW [AR1,P#0.0]; // Clear Value
      T     DBW [AR1,P#2.0]; // Clear Event ID

      CLR   ; 
      =     DBX [AR1,P#4.0]; // Clear "Handled By Routing" bit
      =     DBX [AR1,P#4.1]; // Clear "Handled by BPI stats" bit
      =     DBX [AR1,P#4.2]; // Clear "Handled by BPI LOG" bit
      =     DBX [AR1,P#4.3]; // Clear "Handled by PLC LOG" bit

      L     #t_Next_Entry_to_Clear; // Increase next message with 1
      L     1; 
      +I    ; 
      T     #t_Next_Entry_to_Clear; // If next record to read is equal or smaller
      L     #t_Entries_Used; // then number of events in DB, than do next event
      >I    ; 
      JCN   CA01; 

CA99: NOP   0; 

      L     0; 
      T     DBW    0; // Clear entries used
END_FUNCTION_BLOCK

