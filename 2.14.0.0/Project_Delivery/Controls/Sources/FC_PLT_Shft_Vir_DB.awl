FUNCTION "FC_PLT_Shft_Vir_DB" : VOID
TITLE =%version: 1.01 % CN: 33
//Function:
//Shift the item present in the virtual part (position > section length) also 
//included the 50% rule for these item. 
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Thursday, January 26, 2017 2:11:48 PM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
// Init version based on version 1.06 of PLT_Shft_DB    nlHdL    26-01-17   1.01
//
//Description:
//This function shifts the entries in a PLT which are present within the vitual 
//part. Virtual part is the part where the position is greather then the section 
//length. If a item (leading and trailing edge) is found for the 50% of the item a 
//downstream displacment is used to shift the entries. After the shift the list is 
//sorted.
//This function includes to the following steps:
//
//1) Check if entry1 >section length. Virual entry is present.
//2) Check if item (Leading and trailing edge) is present. Determine item length 
//and if pull fase is active add info state for downstream displacement.
//3) Shift the entries with downstream displacement with the displacment. 
//4) Skip all other entries.
//5) Sort the list.
//                                                                          
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_DB_PLT_Num : INT ;	//Number of DB Position Leading Trailing Edge
  i_Upstr_Displacement : INT ;	//Upstream Displacement
END_VAR
VAR_TEMP
  t_PLT_DB_Nr : INT ;	//Copy of i_DB_Num_PLT
  t_Up_displacement : INT ;	//Upstream displacement
  t_Dwn_displacement : INT ;	//Downstream displacement
  t_Entries_Used : BOOL ;	//Entries used in tracking DB
  t_Dis_Up : BOOL ;	//Use upstream displacment
  t_Dis_Dwn : BOOL ;	//Use downstream displacment
  t_No_Dis : BOOL ;	//Entrie is halted
  t_Sort_Owner : BOOL ;	//Sort list when Owner state is active
  t_Bag_Info : BOOL ;	//Bag on negative position
  t_Clear_Owner : BOOL ;	//Clear owner if no request and owner is active
  t_Virtual_Info_Prev : BOOL ;	//Previous info was a virtual item
  t_Sort_Active : BOOL ;	//Check if first sort was started to actived the second sort
  t_Info : STRUCT 	//Struct of Info State
   Spare_W01 : BOOL ;	//Spare W01
   Spare_W02 : BOOL ;	//Spare W02
   Claimend : BOOL ;	//Claimend entry
   Virtual : BOOL ;	//Virtual item 
   PEC : BOOL ;	//PEC entry
   Owner : BOOL ;	//Entry with Owner state
   Spare_W4 : BOOL ;	//Spare W04
   Spare_W8 : BOOL ;	//Spare W08
   PEC_IO : BOOL ;	//PEC State IO
   PEC_Latch : BOOL ;	//PEC State Latch
   PEC_Request : BOOL ;	//PEC Request (Check if PEC is still active)
   Spare_PEC_B3 : BOOL ;	//Spare B3
   Owner_Halted : BOOL ;	//Owner State Halted entry
   Owner_Up : BOOL ;	//Owner State Upstream displacement entry
   Owner_Dwn : BOOL ;	//Owner State Downstream displacement entry
   Owner_Request : BOOL ;	//Owner State requested
  END_STRUCT ;	
  t_Entry_Pos : INT ;	//Position of entry
  t_Entry_Info : INT ;	//Info of entry
  t_Entry_Physical : INT ;	//Physical entry
  t_Entry_Link : INT ;	//Link of entry
  t_Nr_Entries_Used : INT ;	//Number of Entries used in PLT
  t_Entry_Pos_Prev : INT ;	//Position of previous entry
  t_LAR1 : DWORD ;	//Back up AR1
  t_Section_Length : INT ;	//Section length from PLT
  t_Pos_trailing : INT ;	//Position of trailing edge
  t_Loop_CNT : INT ;	//Loop counter for the entries
  t_LAR1_Trailing : DWORD ;	//BackUp AR1 of trailing edge
  t_Item_Length : INT ;	//Item length in virtual part
  t_Double_Position : DINT ;	//Position trailing *2
END_VAR
BEGIN
NETWORK
TITLE =AA: Init: displacement, max nr of entries and entries used
//- Present the displacement
//- Check first entry if virtual part is active, else end block.
      SET   ; 
      R     #t_Sort_Owner; 
      R     #t_Virtual_Info_Prev; 

      L     #i_DB_PLT_Num; // Open tracking DB
      T     #t_PLT_DB_Nr; 
      OPN   DB [#t_PLT_DB_Nr]; 

      L     DBW    0; // IF entries used in PLT DB 
      L     0; 
      >I    ; 
      =     #t_Entries_Used; // THEN set temp entries used  

      L     0; 
      T     #t_Up_displacement; 
      T     #t_Dwn_displacement; 

//Set upstream displacement
      L     #i_Upstr_Displacement; 
      T     #t_Up_displacement; 

      L     0; 
      T     #t_Dwn_displacement; 

//---- check if entries within virtual positions are present else end block.
      L     DBW   12; 
      T     #t_Section_Length; 
      L     DBW   14; 
      >=I   ; 
      BEC   ; 

NETWORK
TITLE =BA: Add 50% rule to the entries

      L     0; 
      T     #t_Pos_trailing; 
      L     1; 
      T     #t_Loop_CNT; 

// Determine pointer to first entry
      L     14; // First entry starts at P#14.0
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Pointer to last used entry in PLT DB  

//Found trailing edge in virtual part
BA01: L     DBW [AR1,P#4.0]; 
      L     2; 
      ==I   ; 
      JCN   BA02; 

      L     #t_Section_Length; 
      L     DBW [AR1,P#0.0]; 
      <I    ; 
      JCN   BA04; 
      T     #t_Pos_trailing; 

      TAR1  #t_LAR1_Trailing; 

BA02: L     DBW [AR1,P#4.0]; 
      L     1; 
      ==I   ; 
      JCN   BA04; 

      L     #t_Pos_trailing; 
      L     0; 
      >I    ; 
      JCN   BA04; 
//Item_length
      L     #t_Pos_trailing; 
      L     DBW [AR1,P#0.0]; 
      -I    ; 
      T     #t_Item_Length; 

      L     #t_Section_Length; 
      L     2; 
      *D    ; 
      L     #t_Item_Length; // 50 % handed over
      +D    ; 
      T     #t_Double_Position; 

//section_length + 1/2 item > pos_trailing
//2*section_length + item > 2*pos_trailing
//Remove divided function by multiplying the other values
      L     #t_Pos_trailing; 
      L     2; 
      *D    ; 
      L     #t_Double_Position; 
      >D    ; 
      JCN   BA99; 
//Included upstream displacement
      L     W#16#20A0; //Request owner up
      T     DBW [AR1,P#2.0]; //write to info state

//Wtite Upstream displacement to the trailing edge
      LAR1  #t_LAR1_Trailing; 

      L     W#16#20A0; //Request owner up
      T     DBW [AR1,P#2.0]; //write to info state

      JU    BA99; 

//Loop
BA04: L     #t_Loop_CNT; 
      L     1; 
      +I    ; 
      T     #t_Loop_CNT; 

// Check loop counter
      L     #t_Loop_CNT; 
      L     DBW    0; 
      >I    ; 
      JC    BA99; // IF Entry pointer > 0

      TAR1  ; 
      L     P#8.0; // 8 bytes for each record increase pointer with 1 entry.
      +D    ; // Entry pointer = Entry pointer + P#8.0

      LAR1  ; // Store Entry pointer in address-register 

      JU    BA01; // AND loop

BA99: NOP   0; 
NETWORK
TITLE =CA: Update PLT entries with displacement 

      A     #t_Entries_Used; // IF entries used in PLT DB
      JCN   CA90; 

//Preset temp var
      L     -900; 
      T     #t_Entry_Pos_Prev; 

// Determine pointer to last entry
      L     DBW    0; // Number of entries used in PLT DB
      L     8; // 8 bytes for each entry
      *I    ; 
      L     6; // Header offset
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; 

// LOOP


// 1) Check if up are downstream is active or entrie is halted
CA01: LAR2  P##t_Info; 
      L     DBW [AR1,P#2.0]; // Load info_sate of the entrie
      T     LW [AR2,P#0.0]; 

//------------------Check PEC State Used after restart ---------------------------
      A     #t_Info.PEC; 
      A     #t_Info.PEC_Request; 
      JCN   CA02; 


      BE    ; 
//Entrie is halted no displacement
CA02: A     #t_Info.Owner_Request; 

      O     #t_Info.PEC; 
      =     #t_No_Dis; 

//Check owner correct
      A     #t_Info.Owner_Up; 
      AN    #t_Info.Owner; 
      R     #t_Info.Owner_Up; 

      A     #t_Info.Owner_Dwn; 
      AN    #t_Info.Owner; 
      R     #t_Info.Owner_Dwn; 

      A     #t_Info.Owner_Halted; 
      AN    #t_Info.Owner; 
      R     #t_Info.Owner_Halted; 

      A     #t_Info.Owner_Request; 
      AN    #t_Info.Owner; 
      R     #t_Info.Owner_Request; 

//Entrie is shifted by upstream displacement
      A     #t_Info.Owner_Request; 
      A     #t_Info.Owner_Up; 
      AN    #t_Info.PEC; 
      =     #t_Dis_Up; 

//Entrie is shifted by downstream displacement
      A     #t_Info.Owner_Request; 
      A     #t_Info.Owner_Dwn; 
      AN    #t_Info.PEC; 
      =     #t_Dis_Dwn; 

      A     #t_Info.Owner; 
      AN    #t_Info.Owner_Request; 
      =     #t_Clear_Owner; 

// 2) Update actual position with upstream displacement
      A     #t_Dis_Up; 
      JCN   CA03; 

      SET   ; 
      =     #t_Sort_Owner; 

      L     DBW [AR1,P#0.0]; // New position = position - upstream displacement
      L     #t_Up_displacement; 
      -I    ; 
      T     #t_Entry_Pos; 
      L     #t_Entry_Pos_Prev; 
      >I    ; 
      O     #t_Info.Claimend; 
      JCN   CA42; 

//If calculated pos > previous then write current
      L     #t_Entry_Pos; 

CA42: T     DBW [AR1,P#0.0]; 


//Next loop
      JU    CA40; 

// 3) Update actual position with downstream displacement
CA03: A     #t_Dis_Dwn; 
      JCN   CA04; 

      SET   ; 
      =     #t_Sort_Owner; 

      L     DBW [AR1,P#0.0]; // New position = position - Dwnstream displacement
      L     #t_Dwn_displacement; 
      -I    ; 
      T     #t_Entry_Pos; 
      L     #t_Entry_Pos_Prev; 
      >I    ; 
      O     #t_Info.Claimend; 
      O     #t_Virtual_Info_Prev; 
      JCN   CA43; 

//If calculated pos > previous then write current
      L     #t_Entry_Pos; 
CA43: T     DBW [AR1,P#0.0]; 

//Clear the request

//Next loop
      JU    CA40; 

// 4) Update actual position with displacement
CA04: A     #t_No_Dis; 
      JCN   CA46; 

      SET   ; 
      =     #t_Sort_Owner; 

      A     #t_Info.Owner_Request; 
      JCN   CA40; 

//Only clear the request no displacement

//Next loop
      JU    CA40; 

CA46: A     #t_Clear_Owner; 
      JCN   CA06; 

//Clear the owner

CA06: L     DBW [AR1,P#0.0]; // New position = position - displacement
      L     #t_Dwn_displacement; 
      -I    ; 
      T     #t_Entry_Pos; 
      L     #t_Entry_Pos_Prev; 
      <I    ; 
      =     #t_Bag_Info; 

      A(    ; 
      L     DBW [AR1,P#4.0]; 
      L     0; 
      >I    ; 
      )     ; 
      AN    #t_Info.Virtual; 
      AN    #t_Info.Claimend; 
      A     #t_Bag_Info; 
      JC    CA45; 

//If calculated pos > previous then write current
      L     #t_Entry_Pos; 
      T     DBW [AR1,P#0.0]; 

//Check info virtual and pos < previous
      A     #t_Bag_Info; 
      A(    ; 
      L     DBW [AR1,P#4.0]; 
      L     0; 
      <I    ; 
      )     ; 
      JCN   CA40; 

      TAR1  #t_LAR1; 
      JU    DA00; 

CA45: L     #t_Entry_Pos_Prev; 
      T     DBW [AR1,P#0.0]; 

// 5) Set pointer to next entry
//Sort list when owner state is active
CA40: A     #t_Sort_Owner; 
      JCN   CA41; 

      TAR1  #t_LAR1; 
      JU    EA00; //Sort list

CA41: L     DBW [AR1,P#0.0]; 
      T     #t_Entry_Pos_Prev; 

      L     DBW [AR1,P#4.0]; 
      L     0; 
      <I    ; 
      =     #t_Virtual_Info_Prev; 

      TAR1  ; 
      L     P#14.0; // Pointer > header 14 bytes
      -D    ; 
      JMZ   CA90; 

      L     P#6.0; // THEN set pointer to next entry 
      +D    ; // ( -14 bytes + 8 bytes = -6 bytes = next entry)
      LAR1  ; 

      JU    CA01; // AND loop

CA90: SET   ; 
      R     #t_Bag_Info; 
      JU    DA00; 
NETWORK
TITLE =DA: Check sorted list first
//After the position updates, the list needs to be checked if it is still sorted.
//The list is sorted from high position to low position.
//
DA00: A     #t_Entries_Used; // IF entries used in PLT DB
      R     #t_Sort_Active; 
      JCN   DA99; 

//Check if more then 1 entry is used
      L     DBW    0; // Number of entries used in PLT DB
      T     #t_Nr_Entries_Used; 
      L     1; 
      >I    ; 
      JCN   DA90; 

// Determine pointer to first entry
      L     14; // byte 14 is first entry
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; 

// LOOP

// Check if entries are 2
DA01: L     #t_Nr_Entries_Used; 
      L     2; 
      >=I   ; 
      JCN   DA02; 

//If current pos < next pos
      L     DBW [AR1,P#0.0]; 
      L     DBW [AR1,P#8.0]; 
      <I    ; 
      JCN   DA02; 

      L     DBW [AR1,P#0.0]; 
      T     #t_Entry_Pos; 
      L     DBW [AR1,P#2.0]; 
      T     #t_Entry_Info; 
      L     DBW [AR1,P#4.0]; 
      T     #t_Entry_Physical; 
      L     DBW [AR1,P#6.0]; 
      T     #t_Entry_Link; 

      L     DBD [AR1,P#8.0]; 
      T     DBD [AR1,P#0.0]; 
      L     DBD [AR1,P#12.0]; 
      T     DBD [AR1,P#4.0]; 

      L     #t_Entry_Pos; 
      T     DBW [AR1,P#8.0]; 
      L     #t_Entry_Info; 
      T     DBW [AR1,P#10.0]; 
      L     #t_Entry_Physical; 
      T     DBW [AR1,P#12.0]; 
      L     #t_Entry_Link; 
      T     DBW [AR1,P#14.0]; 

      SET   ; 
      S     #t_Sort_Active; 

// Next
DA02: L     #t_Nr_Entries_Used; 
      L     1; 
      -I    ; 
      JMZ   DA90; 
      T     #t_Nr_Entries_Used; 

      TAR1  ; 

      L     P#8.0; // THEN set pointer to next entry 
      +D    ; // + 8 bytes = next entry)
      LAR1  ; 

      JU    DA01; 

DA90: NOP   0; 
      LAR1  #t_LAR1; 
      A     #t_Bag_Info; 
      JC    CA40; //Sort list

//If sort was started then actived the second sort
      A     #t_Sort_Active; 
      JC    EA00; 

DA99: BE    ; 
NETWORK
TITLE =EA: Check sorted list second.
//After the position updates, the list needs to be checked if it is still sorted.
//The list is sorted from high position to low position.
//
EA00: A     #t_Entries_Used; // IF entries used in PLT DB
      JCN   EA91; 

//Check if more then 1 entry is used
      L     DBW    0; // Number of entries used in PLT DB
      T     #t_Nr_Entries_Used; 
      L     1; 
      >I    ; 
      JCN   EA91; 

// Determine pointer to first entry
      L     14; // byte 14 is first entry
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; 

// LOOP

// Check if entries are 2
EA01: L     #t_Nr_Entries_Used; 
      L     2; 
      >=I   ; 
      JCN   EA02; 

//If current pos < next pos
      L     DBW [AR1,P#0.0]; 
      L     DBW [AR1,P#8.0]; 
      <I    ; 
      JCN   EA02; 

      L     DBW [AR1,P#0.0]; 
      T     #t_Entry_Pos; 
      L     DBW [AR1,P#2.0]; 
      T     #t_Entry_Info; 
      L     DBW [AR1,P#4.0]; 
      T     #t_Entry_Physical; 
      L     DBW [AR1,P#6.0]; 
      T     #t_Entry_Link; 

      L     DBD [AR1,P#8.0]; 
      T     DBD [AR1,P#0.0]; 
      L     DBD [AR1,P#12.0]; 
      T     DBD [AR1,P#4.0]; 

      L     #t_Entry_Pos; 
      T     DBW [AR1,P#8.0]; 
      L     #t_Entry_Info; 
      T     DBW [AR1,P#10.0]; 
      L     #t_Entry_Physical; 
      T     DBW [AR1,P#12.0]; 
      L     #t_Entry_Link; 
      T     DBW [AR1,P#14.0]; 

// Next
EA02: L     #t_Nr_Entries_Used; 
      L     1; 
      -I    ; 
      JMZ   EA91; 
      T     #t_Nr_Entries_Used; 

      TAR1  ; 

      L     P#8.0; // THEN set pointer to next entry 
      +D    ; // + 8 bytes = next entry)
      LAR1  ; 

      JU    EA01; 


EA91: NOP   0; 
      A     #t_Sort_Owner; 
      JCN   EA99; 

      SET   ; 
      R     #t_Sort_Owner; 

      LAR1  #t_LAR1; 
      JU    CA41; //Sort list

EA99: NOP   0; 
NETWORK
TITLE =FA: Check if entries on same position have same physical
//Check if more then 1 entry is used
      L     DBW    0; // Number of entries used in PLT DB
      T     #t_Nr_Entries_Used; 
      L     1; 
      >I    ; 
      JCN   FA99; 

// Determine pointer to first entry
      L     14; // byte 14 is first entry
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; 

// LOOP

// Check if entries are 2
FA01: L     #t_Nr_Entries_Used; 
      L     2; 
      >=I   ; 
      JCN   FA12; 

//If current pos < next pos
      L     DBW [AR1,P#0.0]; 
      L     DBW [AR1,P#8.0]; 
      ==I   ; 
      JCN   FA12; 

      L     DBW [AR1,P#4.0]; 
      L     DBW [AR1,P#12.0]; 
      ==I   ; 
      JCN   FA12; 

//loop
//Check if still 2 entries are left to shift
FA02: L     #t_Nr_Entries_Used; 
      L     2; 
      >=I   ; 
      JCN   FA03; 

//shift entries 1 up
      L     DBD [AR1,P#8.0]; 
      T     DBD [AR1,P#0.0]; 
      L     DBD [AR1,P#12.0]; 
      T     DBD [AR1,P#4.0]; 

// Next
      L     #t_Nr_Entries_Used; 
      L     1; 
      -I    ; 
      JMZ   FA03; 
      T     #t_Nr_Entries_Used; 

      TAR1  ; 
      L     P#8.0; 
      +D    ; 
      LAR1  ; // AND set pointer to next entry to handle 

      JU    FA02; // AND loop

//Reset entries used
FA03: L     0; 
      T     DBD [AR1,P#0.0]; 
      T     DBD [AR1,P#4.0]; 

      L     DBW    0; 
      L     1; 
      -I    ; 
      T     DBW    0; // decrease entry counter

      JU    FA99; 

FA12: L     #t_Nr_Entries_Used; 
      L     1; 
      -I    ; 
      JMZ   FA99; 
      T     #t_Nr_Entries_Used; 

      TAR1  ; 

      L     P#8.0; // THEN set pointer to next entry 
      +D    ; // + 8 bytes = next entry)
      LAR1  ; 

      JU    FA01; 


FA99: NOP   0; 
END_FUNCTION

