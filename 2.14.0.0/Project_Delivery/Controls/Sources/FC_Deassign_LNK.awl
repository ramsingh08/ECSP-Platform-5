FUNCTION "FC_Deassign_LNK" : VOID
TITLE =%version: 0.05 % CN: 30
//Function:
//Deassign the LNK 
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:01:34 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.05
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.05
//15797: Keyword release added                          nlwwij   26-09-13   0.05
//CR19512 Update sources according S7 Manager           nlHdL    07-03-13   0.04
//PR6157 Modified AR1 pointers to Dint                  nlHdL    23-12-10   0.03 
//Remove author and name indication                     nlMRe    09-09-10   0.02
//Initial Revision                                      nlHdL    10-06-10   0.01 
//
//Description:
//Deassign the LNK number and also the list numbers from the LNK number
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_LNK : INT ;	//LNK number to deassign
END_VAR
VAR_TEMP
  t_LNK_Entry : INT ;	//Temp entry in LNK
  t_DB_Nr_List : INT ;	//Temp DB number List DB
  t_AR1_BackUp_LNK : DWORD ;	//Temp Back up AR1 LNK DB
  t_Length_Record : INT ;	//Temp Length of Record
END_VAR
BEGIN
NETWORK
TITLE =AA: Check List DB number(s) for LNK entry

      OPN   "DB_LNK_List"; 

      L     DBW    2; // Length record
      T     #t_Length_Record; 
      L     #i_LNK; 
      *D    ; 
      L     DBW    0; // Length header
      +D    ; 
      SLD   3; 
      LAR1  ; // Pointer to LNK entry in DB_LNK

AA01: L     DBW [AR1,P#0.0]; 
      T     #t_LNK_Entry; 
      L     0; 
      ==I   ; 
      JCN   BA01; // Entry is assigned, deassign in the List DB the entry

// Check next entry in record
AA02: L     #t_Length_Record; 
      L     2; 
      -I    ; 
      JZ    AA99; // Check entries stop if entry = 0
      T     #t_Length_Record; 

      TAR1  ; 
      L     P#2.0; 
      +D    ; // Goto next integer
      LAR1  ; // Store Entry pointer in address-register 

      JU    AA01; 

AA99: BE    ; 
NETWORK
TITLE =BA: Search for DB number on LNK position
// IF LNK entry is assigned retreive the DB number of the assigned position in the DB LNK
BA01: NOP   0; 
      TAR1  #t_AR1_BackUp_LNK; 

      L     #t_Length_Record; 
      L     2; 
      >I    ; 
      JCN   CA01; // Skip PLT DB within the record

//Retreive the DB number of the List DB
      OPN   "DB_LNK_List"; 

      L     DBW    0; // Length header
      L     #t_Length_Record; 
      -D    ; 
      SLD   3; 
      LAR1  ; 

      L     DBW [AR1,P#0.0]; 
      T     #t_DB_Nr_List; 

      OPN   DB [#t_DB_Nr_List]; 
      L     DBW    2; // Length of record
      L     #t_LNK_Entry; 
      *D    ; 
      L     DBW    0; // Length header
      +D    ; 
      SLD   3; 
      LAR1  ; // Pointer to entry in DB_List

// Deassign the LNK number into the DB List
      L     0; 
      T     DBW [AR1,P#0.0]; 

NETWORK
TITLE =CA: Deassign LNK number into DB List

CA01: OPN   "DB_LNK_List"; 
      LAR1  #t_AR1_BackUp_LNK; 

// Deassign the List number into the LNK DB
      L     0; 
      T     DBW [AR1,P#0.0]; 

      JU    AA02; // Goto next entry check into LNK DB
END_FUNCTION

