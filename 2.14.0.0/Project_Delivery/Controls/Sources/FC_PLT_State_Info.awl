FUNCTION "FC_PLT_State_Info" : VOID
TITLE =%version: 1.01 % CN: 30
//Function:
//Write a State request on a position and a predefined info.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:03:02 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   1.01
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   1.01
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   1.01
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   1.01
//Initial revision                                      nlHdL    12-04-10   0.01
//
//Description:
//This function reads if there is a entry present on the i_Position_Read with the same info
//as the info_physical, if the entry is found the info_state is written as a request to this entry.
//
//                                                               
//                                                           max read position   
//                                                  position_read      |
//     PLT                                               |             |
//    +-------------------------------------------------------------------+
//    | | | | | | | | | | | | | | | | L | | | | | | | | | | | | | | | | | |
//    | | | | | | | | | | | | | | | | N | | | | | | | | | | | | | | | | | |
//    | | | | | | | | | | | | | | | | K | | | | | | | | | | | | | | | | | | 
//    +-------------------------------------------------------------------+
//                                                       | Displacement|
//                                                       |<----------->|  
//                                                       |             |          
//                            
//                                                                                
//                                                                 
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_DB_PLT_Num : INT ;	//Number of DB Position Leading Trailing Edge
  i_Position : INT ;	//SETT: [cm] Position in PLT
  i_Info_State : WORD ;	//info state to be added
  i_Info_Physical : INT ;	//Info physical to write
END_VAR
VAR_TEMP
  t_PLT_DB_Nr : INT ;	//Copy of i_DB_Num_PLT
  t_Search_Start_Position : INT ;	//t_Search_Start_Position = i_Position
  t_Search_End_Position : INT ;	//t_Search_End_Position = i_Position - Displacement
  t_Cnt_Entry : INT ;	//Counter for number of entries searched
END_VAR
BEGIN
NETWORK
TITLE =AA: Open PLT DB
// 
      L     #i_DB_PLT_Num; 
      T     #t_PLT_DB_Nr; 
      OPN   DB [#t_PLT_DB_Nr]; // Open PLT DB

NETWORK
TITLE =BA: Check if entries are filled in PLT DB
// 
      L     DBW    0; 
      L     0; // Number of entry,s used in PLT DB
      <=I   ; 
      BEC   ; // end function

NETWORK
TITLE =CA: Calculate pointer to data in first record PLT DB  
// 
      L     1; 
      T     #t_Cnt_Entry; 

      L     14; // First entry starts at P#14.0
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Pointer to last used entry in PLT DB  
NETWORK
TITLE =DA: Calculate start- and end-position of search-window
// 
      L     DBW    2; 
      L     0; 
      ==I   ; // Check if displacement > 0
      JCN   DA01; 

      L     #i_Position; // End search position = position
      JU    DA02; 

DA01: L     #i_Position; // End search position = position - correct displacement
      L     DBW    2; // Correct the displacement with -1
      -I    ; 
      L     1; 
      +I    ; 

DA02: T     #t_Search_End_Position; // Search_Start_Position = Position - (Displacement-1) IF dis<>0

      L     #i_Position; 
      T     #t_Search_Start_Position; // Search_End_Position = Position

NETWORK
TITLE =EA: Search for data in search-window
// 
EA01: L     DBW [AR1,P#0.0]; // Actual entry position 
      L     #t_Search_Start_Position; // START OF SEARCH-LOOP
      >I    ; // IF Search-Start-position > read position THEN jump to decrease pointer  
      JC    EA03; // THEN jump to decrement pointer 

      L     #t_Search_End_Position; 
      L     DBW [AR1,P#0.0]; // Actual-position 
      <=I   ; // ELSE Actual-position <= Search-End-Position jump to make outputs  
      JC    EA02; // THEN data found  

      JU    EA99; // ELSE jump to no data found end of search-loop

EA02: L     DBW [AR1,P#4.0]; 
      L     #i_Info_Physical; 
      ==I   ; 
      JCN   EA03; 

      L     DBW [AR1,P#2.0]; 
      L     #i_Info_State; 
      OW    ; // Or Word to update the state with the input state
      T     DBW [AR1,P#2.0]; // Write the state data

      BEU   ; 

EA03: L     #t_Cnt_Entry; 
      L     1; 
      +I    ; 
      T     #t_Cnt_Entry; 

// Check loop counter
      L     #t_Cnt_Entry; 
      L     DBW    0; 
      >I    ; 
      JC    EA99; // IF Entry pointer > 0

      TAR1  ; // Read Entry pointer of address-register

      L     P#8.0; // 8 bytes for each record increase pointer with 1 entry.
      +D    ; // Entry pointer = Entry pointer - P#8.0

      LAR1  ; // Store Entry pointer in address-register 

      JU    EA01; // GOTO START OF SEARCH-LOOP

EA99: NOP   0; 

END_FUNCTION

