FUNCTION "FC_Exec_Failed_Dir" : VOID
TITLE =%version: 0.10 % CN: 32
//Function:
//Report Failed Direction into Route record for tracking report
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:06:56 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.10
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.10
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.10
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.10
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.09
//PR11918: Adopted Decision point update with Dir A & B nlHdL    02-04-13   0.08
//CR13167 Update sources according S7 Manager           nlple    15-03-13   0.07
//CR19512 Update sources according S7 Manager           nlHdL    08-03-13   0.06
//PR11727 Add synergy key words 'created_by' and date   nlHdL    14-11-12   0.05
//Change comment                                        nlLvdG   04-04-12   0.04
//LIC record paths changed                              nlLvdG   23-03-12   0.03
//Update no return value                                nlHdL    03-10-11   0.02
//Initial Revision                                      nlHdL    28-09-11   0.01
//
//Description:
//Report Failed Direction into Route record for tracking report
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_Rep_Route : INT ;	//Replay Route message for tracking report
  i_Failed_Direction : INT ;	//Failed direction to report
  i_Failed_Reason : INT ;	//Failed reason to report
  i_Failed_Destination : INT ;	//Failed destination to report
  i_Failed_Decisionlvl : INT ;	//Failed decisionlevel to report
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_TEMP
  t_Failed_Rep : INT ;	//Failed Replay for Route record
END_VAR
BEGIN
NETWORK
TITLE =AA: Check if destinationis failed and write to ECS if no failed.

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection1.failedreason,
           i_DB                     := "DB_Route_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_Failed_Rep);

//End network if failed reason1 already in the report record
      L     #t_Failed_Rep; 
      L     0; 
      ==I   ; 
      JCN   AA99; //Goto write status

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection1.direction,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Direction,
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection1.failedreason,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Reason,
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection1.destination,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Destination,
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection1.decisionlevel,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Decisionlvl,
           i_DB_Event_Num           := #i_DB_Event_Num);

      BE    ; 
//End block if failed is written

AA99: NOP   0; 
NETWORK
TITLE =BA: Write Failed into Direction 2

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection2.failedreason,
           i_DB                     := "DB_Route_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_Failed_Rep);

//End block if failed reason2 already in the report record
      L     #t_Failed_Rep; 
      L     0; 
      >I    ; 
      BEC   ; 

      L     #i_Failed_Decisionlvl; 
      L     1; 
      ==I   ; 
      JC    BA01; 

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection1.direction,
           i_DB                     := "DB_Route_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_Failed_Rep);

      L     #i_Failed_Direction; 
      L     #t_Failed_Rep; 
      <>I   ; 
      JCN   BA99; 
//If direction is already failed skip

BA01: CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection2.direction,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Direction,
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection2.failedreason,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Reason,
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection2.destination,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Destination,
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #i_Rep_Route,
           i_P_INT_Record           := "DB_UDT_Route_Record".failedDirection2.decisionlevel,
           i_DB                     := "DB_Route_List",
           i_INT                    := #i_Failed_Decisionlvl,
           i_DB_Event_Num           := #i_DB_Event_Num);

BA99: NOP   0; 
END_FUNCTION

