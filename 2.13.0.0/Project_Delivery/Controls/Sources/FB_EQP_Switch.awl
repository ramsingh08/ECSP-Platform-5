FUNCTION_BLOCK "FB_EQP_Switch"
TITLE =%version: 0.11 % CN: 40 
//Function:
//Equipment block for controlling a Switch Unit.
//Device switches between two positions using two proximity switches.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Thursday, June 02, 2016 9:17:34 AM %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#13986: Add the External Stop status to EQP         nlHdL    02-06-16   0.11
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.10
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.10
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.10
//20346: Modify ready to restart add IO_avai and Safety nlHdL    18-08-14   0.10
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.09
//13836: Add IO Available to PS Double Detection        nlHdL    21-05-13   0.08
//CR19512 Update sources according S7 Manager           nlHdL    08-03-13   0.07
//WP5669 Updated to Coding conventions                  nlHdL    17-09-10   0.06
//PR5566 Remove i_ID                                    nlMRe    24-08-10   0.05
//Stop conditions as OR function                        nlHdL    06-08-10   0.04
//Version number corrected                              nlHdL    28-07-10   0.03
//Updated after review, status updated & comment        nlHdL    28-07-10   0.02
//First version                                         nlHdL    28-06-10   0.01
//
//
//Description:                                  
//This module is containing:
//Depending on the input signal i_Req_Dir_2 the motor makes a switches to 
//direction 1 or to direction 2.
//i_Req_Die_2 = 0 -> Direction 1
//i_Req_Die_2 = 1 -> Direction 2
//
//- Status control. - Determines the status of the Switch Motor. 
//- Safety switch over to another direction - If the equipment is switched to a 
//direction, it is for a fixed time not possible to switch over to the other 
//direction. (i_Ext_Req_Halt)
//- Motor Dir Control - Controls the movement of the motor.
//- Motor Time-out Dir 1 Detection - Time out detection of the movement 
//direction 1 of the motor. 
//- Motor Time-out Dir 2 Detection - Time out detection of the movement 
//direction 2 of the motor. 
//
//
//Explanation of the parameters:
//  Parameter prefixes:
//    HW : field IO
//    SET: setting
//    CFG: configuration
//    CMD: command
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_Available_IO : BOOL  := TRUE;	//Signal for indication IO is OK (no Fieldbus or IO error)
  i_Safety_OK : BOOL  := TRUE;	//Safety is OK signal
  i_CMD_Enable : BOOL ;	//CMD: Enable command
  i_CMD_Start : BOOL ;	//CMD: Start command
  i_CMD_Reset : BOOL ;	//CMD: Reset command
  i_IO_PS_A : BOOL ;	//HW: Proximity switch Position A (True = Active)
  i_IO_PS_B : BOOL ;	//HW: Proximity switch Position B (True = Active)
  i_Ext_Req_Stop : BOOL ;	//Request signal from external to stop (restart needed)
  i_Ext_Req_Halt : BOOL ;	//Request signal from external to halt (no restart needed)
  i_Req_Dir_B : BOOL ;	//CMD: Request to go to Out position
  i_Timeout_Dir : INT  := 4000;	//[ms] Time out on changing to direction
END_VAR
VAR_OUTPUT
  o_CMD_MTR_Run : BOOL ;	//CMD: Motor Run Command
  o_CMD_MTR_Reverse : BOOL ;	//CMD: Motor Reverse Command
  o_ST_Running : BOOL ;	//ST: Section is running
  o_ST_Started : BOOL ;	//ST: Started
  o_ST_Request_Halt : BOOL ;	//ST: Request Halt
  o_ST_Request_Stop : BOOL ;	//ST: Request Stop
  o_ST_External_Stop : BOOL ;	//ST: Component is operationally off and not available for operational use
  o_ST_Movement_Time_out : BOOL ;	//ST: Movement time out 
  o_ST_PS_Double : BOOL ;	//ST: Proximity switch Double detection 
  o_Ready_To_Restart : BOOL ;	//Ready To Restart to system control
END_VAR
VAR
  s_Cnt_Timeout_Dir_A : INT ;	//Current time-out value for direction 1 change
  s_Cnt_Timeout_Dir_B : INT ;	//Current time-out value for direction 2 change
  s_EQP_Operational_On : BOOL ;	//section is Operational On
  s_MTR_Dir_A : BOOL ;	//Request motor in direction A
  s_MTR_Dir_B : BOOL ;	//Request motor in direction B
  s_Stop_Motor : BOOL ;	//Request to stop the motor
END_VAR
VAR_TEMP
  t_Movement_Timeout_Dir_A : BOOL ;	//Movement timeout for direction A
  t_Movement_Timeout_Dir_B : BOOL ;	//Movement timeout for direction B
END_VAR
BEGIN
NETWORK
TITLE =AA: Error Time-out detection or double detection
// Time out switch movement
//Evaluation time out movement Dir A
      ON    #s_MTR_Dir_A; //If the motor is not running towards low position
      O     #i_IO_PS_A; //Or the positon dir 1 is reached
      JCN   AA01; //Then Reset timer.
      L     #i_Timeout_Dir; //Set the Time-out timer to default settings
      T     #s_Cnt_Timeout_Dir_A; 
AA01: L     #s_Cnt_Timeout_Dir_A; 
      L     "MW_Prev_Cycle_Time"; //Cycle time (ms) from previous PLC cycle
      -I    ; 
      JPZ   AA02; //If Negative then
      L     0; //Keep counter to zero
AA02: T     #s_Cnt_Timeout_Dir_A; 
      L     #i_Timeout_Dir; //If pre-set value <> 0 Then time-out detection
      L     0; //is enabled.
      <>I   ; 
      A(    ; 
      L     #s_Cnt_Timeout_Dir_A; //If the Time-out period elapsed
      L     0; 
      <=I   ; 
      )     ; 
      =     #t_Movement_Timeout_Dir_A; //.. And set DS error Time_Out

//Evaluation time out movement
      ON    #s_MTR_Dir_B; //If the motor is not running towards low position
      O     #i_IO_PS_B; //Or the positon dir 2 is reached
      JCN   AA03; //Then Reset timer.
      L     #i_Timeout_Dir; //Set the Time-out timer to default settings
      T     #s_Cnt_Timeout_Dir_B; 
AA03: L     #s_Cnt_Timeout_Dir_B; 
      L     "MW_Prev_Cycle_Time"; //Cycle time (ms) from previous PLC cycle
      -I    ; 
      JPZ   AA04; //If Negative then
      L     0; //Keep counter to zero
AA04: T     #s_Cnt_Timeout_Dir_B; 
      L     #i_Timeout_Dir; //If pre-set value <> 0 Then time-out detection
      L     0; //is enabled.
      <>I   ; 
      A(    ; 
      L     #s_Cnt_Timeout_Dir_B; //If the Time-out period elapsed
      L     0; 
      <=I   ; 
      )     ; 
      =     #t_Movement_Timeout_Dir_B; //.. And set DS error Time_Out

NETWORK
TITLE =BA: Report error movement time out
//LAD!
      A     #i_CMD_Reset; 
      A     #i_Available_IO; 
      R     #o_ST_Movement_Time_out; 
      A(    ; 
      O     #t_Movement_Timeout_Dir_A; 
      O     #t_Movement_Timeout_Dir_B; 
      )     ; 
      S     #o_ST_Movement_Time_out; 
      NOP   0; 
NETWORK
TITLE =CA: Report error double detection
//LAD!
      A     #i_CMD_Reset; 
      A     #i_Available_IO; 
      R     #o_ST_PS_Double; 
      A     #i_IO_PS_A; 
      A     #i_IO_PS_B; 
      A     #i_Available_IO; 
      S     #o_ST_PS_Double; 
      NOP   0; 
NETWORK
TITLE =DA: Stop motor on error detection
//LAD!
      O     #o_ST_Movement_Time_out; 
      O     #o_ST_PS_Double; 
      =     #s_Stop_Motor; 
NETWORK
TITLE =EA: Determine 'Operational_ON' status
//LAD!
      A     #i_CMD_Start; 
      S     #s_EQP_Operational_On; 
      A(    ; 
      ON    #i_CMD_Enable; 
      ON    #i_Available_IO; 
      O     #i_Ext_Req_Stop; 
      ON    #i_Safety_OK; 
      O     #s_Stop_Motor; 
      )     ; 
      R     #s_EQP_Operational_On; 
      NOP   0; 
NETWORK
TITLE =FA: Motor Dir A Control
// LAD!
      AN    #i_Req_Dir_B; //Auto mode
      A     #s_EQP_Operational_On; //When a request to go to direction 1 is active
      AN    #i_Ext_Req_Halt; //And the section is not stopped
      AN    #i_IO_PS_A; //And position high is not reached
      =     #s_MTR_Dir_A; //And on Halt signal
//Then AUTO run motor towards direction 1
//When the manual mode is active
//And a manual request to go to high position is active
NETWORK
TITLE =GA: Motor Dir B Control
// LAD!
      A     #i_Req_Dir_B; 
      A     #s_EQP_Operational_On; 
      AN    #i_Ext_Req_Halt; 
      AN    #i_IO_PS_B; 
      =     #s_MTR_Dir_B; 
NETWORK
TITLE =HA: Command Motor Run
//LAD!
      O     #s_MTR_Dir_A; 
      O     #s_MTR_Dir_B; 
      =     #o_CMD_MTR_Run; 
NETWORK
TITLE =IA: Command Motor Reverse
//LAD!
      A     #s_MTR_Dir_B; 
      =     #o_CMD_MTR_Reverse; 
NETWORK
TITLE =JA: Ready to restart indication to Equipment Control
//LAD!
      AN    #s_EQP_Operational_On; 
      AN    #s_Stop_Motor; 
      A     #i_CMD_Enable; 
      AN    #i_Ext_Req_Stop; 
      A     #i_Safety_OK; 
      A     #i_Available_IO; 
      =     #o_Ready_To_Restart; 
NETWORK
TITLE =KA: Status Started
//LAD!
      A     #s_EQP_Operational_On; 
      =     #o_ST_Started; 
NETWORK
TITLE =LA: Status running
//LAD!
      O     #s_MTR_Dir_A; 
      O     #s_MTR_Dir_B; 
      =     #o_ST_Running; 
NETWORK
TITLE =MA: Status Request Halt
//LAD!
      A     #i_Ext_Req_Halt; 
      =     #o_ST_Request_Halt; 
NETWORK
TITLE =NA: Status Request Stop
//LAD!
      A     #i_Ext_Req_Stop; 
      =     #o_ST_Request_Stop; 
NETWORK
TITLE =OA: External stop
//LAD!
      ON    #i_Available_IO; 
      ON    #i_Safety_OK; 
      =     #o_ST_External_Stop; 
END_FUNCTION_BLOCK

