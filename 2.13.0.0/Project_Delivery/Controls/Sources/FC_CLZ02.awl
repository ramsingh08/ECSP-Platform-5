FUNCTION "FC_CLZ02" : VOID
TITLE =%version: 1.13 % CN: 61 
//Function:
//This block contains a CLZ02 with a maximum of 3 bi-directional merge conveyors
//with tracking.
//
//History:
//This version  %created_by:  nlhdl %
//              %date_created:  Monday, April 16, 2018 10:58:13 AM %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                  By:       Date:    Rev:
//----------------------------------------------------  -------  --------  -----
//ra#28681: Template update HOO 2 Directions Lifesign   nlHdL    16-04-18   1.13
//ra#21656: Synchronisation of zone template            inajos   09-03-18   1.12
//ra#27423: Int Prg PEC Offset_FWD & Offset_REV         nlHdL    17-01-18   1.11
//ina#7733: Remove init_sync for TransportDirectionRprt nlHdL    24-11-17   1.10
//veg#1610: CLZ_Status bit 0.0 normal mode              nlHdL    25-10-17   1.09
//ra#25233: CLZ02 - Double Transport direction report   nlHdL    18-10-17   1.08
//ra#24634: Update DAT Layer                            nlHdL    04-09-17   1.07
//ra#18840: CLZ delay start template update             nlHdL    11-07-17   1.06
//ra#21675: Disable track funtion for 2 dir temp update nlHdL    22-06-17   1.05
//ra#20083: Flow control configuration                  nlJClo   26-01-17   1.04
//ra#19406: Add TransportDirReport to 2 dir CLZ         nlJClo   20-12-16   1.03
//ra#17285:Adjust headers to standard                   nlJClo   22-09-16   1.02
//ra#14943:Initial version                              nlJClo   30-06-16   1.01
//Based on "FB_MGZ_2D_Trk_Temp" v. 1.07
//
//
//Description:
//
//The primary function of the collector is collecting individual (departure) 
//baggage items coming from at least one check-in position and transport these 
//items to a downstream conveyor with permanent control over the position of the 
//baggage items. 
//In general the collector is used with multiple infeeds (check-ins).
//
//View from above (conveyor):
//                                                          
//     |          TRS 2          |        |          TRS 1          | 
// +---+-------------------------+---++---+-------------------------+---+
// |   |   <--- Reverse -----    |   ||   |   ---- Forward ---->    |   |         
// |   |       SLAVE(FWD)        |   ||   |       MASTER(FWD)       |   |  
// |   |       MASTER(REV)       |   ||   |       SLAVE(REV)        |   |  
// +---+-------------------------+---++---+-------------------------+---+
//     |                         |        |                         |             
//     ^                         ^        ^                         ^  
//PEC upstream        PEC downstream    PEC upstream        PEC downstream
// 
FAMILY : RAW
VERSION : 0.0

BEGIN
NETWORK
TITLE =#Insert# //Insertion point code generator
//The generated source will be added overhere.


//NETWORK
//TITLE =Switch between normal and redundant mode
//-----------Many blocks common and fixed value parameters are deleted to reduce the template size.-----------
//      NOP   0; 
//// SCADA command sets redundant mode
//      A     "DB_Command".CLZ_ZZ_00.Redundant; 
//      S     "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      R     "DB_Int_Prog_Zone".CLZ_ZZ_00.Normal; 
//
//      A     "DB_Command".CLZ_ZZ_00.Normal; 
//      R     "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      S     "DB_Int_Prog_Zone".CLZ_ZZ_00.Normal; 
//
// SCADA command or other CLZ=redundant resets redundant mode
//      A     "DB_Command".CLZ_ZZ_00.Redundant;                             //Zone ID other CLZ
//      R     "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      S     "DB_Int_Prog_Zone".CLZ_ZZ_00.Normal; 
//
//// Statussen CLZ
//      A     "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      =     "DB_Status".CLZ_ZZ_00.Redundant; 
//
//      A     "DB_Int_Prog_Zone".CLZ_ZZ_00.Normal; 
//      =     "DB_Status".CLZ_ZZ_00.Normal; 
//
//// Halt window gen
//      A     "DB_Status".CLZ_ZZ_00.Redundant;                                //Zone ID other CLZ
//      A     "DB_Status".CLZ_ZZ_00.Normal; 
//      =     "DB_Int_Prog_Zone".CLZ_ZZ_00.Halt_Window_Gen; 
//
////NETWORK
//TITLE =..: Shutter Manager
//// Add This Network only if 2 fire Shutters are present on 1 section
//      CALL  "FC_Dual_SHO_Control" (
//           i_CMD_Controlled_Stop   := "DB_System_Control".MGZ_ZZ_00.Controlled_Stop,
//           i_IO_No_Fire_alarm_SHO_1:= "I_ZZ_99_SG_NO_FIR",
//           i_IO_No_Fire_alarm_SHO_2:= "I_ZZ_98_SG_NO_FIR",
//           i_ST_SHO_1_Close        := "DB_Status".SHO_ZZ_99.Shutter_Close,
//           o_NO_Fire_alarm_SHO_1   := "t_No_Fire_Alarm_SHO_1",
//           o_NO_Fire_alarm_SHO_2   := "t_No_Fire_Alarm_SHO_2",
//           o_Controlled_Stop_SHO_2 := "t_Controlled_Stop_SHO_2");
//
//NETWORK
//TITLE =: BFxx ZZ_01
//// comment:Calcul search window
//
//      L     "DB_Command".CLZ_ZZ_00.Capacity; 
//      L     0; 
//      >I    ; 
//      JCN   AA01; 
//
//      L     "DB_Command".CLZ_ZZ_00.Capacity; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.Capacity_Actual_Value; 
//
//AA01: NOP   0; 
//
//      CALL "FC_Calc_H2H_Distance" (
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Capacity           := "DB_Int_Prog_Zone".CLZ_ZZ_00.Capacity_Actual_Value,
//           i_CFG_Minimum_Capacity   := 300,
//           i_CFG_Maximum_Capacity   := 1800,
//           o_H2H_Length             := "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length,
//           o_Current_Capacity       := "MW_INT_Not_Used_Zone_ZZ",
//           o_ST_Capacity_2Low       := "M_BOOL_Not_Used_Zone_ZZ",
//           o_ST_Capacity_2High      := "M_BOOL_Not_Used_Zone_ZZ",
//           o_ST_CalcH2H_Disable     := "M_BOOL_Not_Used_Zone_ZZ");
//
//// comment:Reset ASI errors
//      A     "DB_System_Control".TRS_ZZ_01.OS_Reset; 
//      ON    "DB_System_Control".TRS_ZZ_01.IO_Available; 
//      R     "DB_Status".TRS_ZZ_01.ASI_Not_Prsnt; 
//      R     "DB_Status".TRS_ZZ_01.ASI_Error; 
//
//// comment:Create ASI slave not present signal
//      A     "DB_Diagnose_ASI_PF".Gateway_xx_Channel_1.Slave_Not_Present[xx]; 
//      A     "DB_System_Control".TRS_ZZ_01.IO_Available; 
//      S     "DB_Status".TRS_ZZ_01.ASI_Not_Prsnt; 
//
//// comment:Create ASI slave error signal
//      A     "DB_Diagnose_ASI_PF".Gateway_xx_Channel_1.Slave_Error[xx]; 
//      A     "DB_System_Control".TRS_ZZ_01.IO_Available; 
//      S     "DB_Status".TRS_ZZ_01.ASI_Error; 
//
//// comment:Create PEC SOS IO Available signal
//      A     "DB_System_Control".TRS_ZZ_01.IO_Available; 
//      AN    "DB_Status".TRS_ZZ_01.ASI_Not_Prsnt; 
//      AN    "DB_Status".TRS_ZZ_01.ASI_Error; 
//      =     #t_TRS_ZZ_01_IO_Avai_SOS; 
//
//// comment:Create PEC EOS IO Available signal
//      A     "DB_System_Control".TRS_ZZ_01.IO_Available; 
//      AN    "DB_Status".TRS_ZZ_01.LMS_ASI_Not_Prsnt; 
//      AN    "DB_Status".TRS_ZZ_01.LMS_ASI_Error; 
//      =     #t_TRS_ZZ_01_IO_Avai_EOS; 
//
//// comment:Equipment Basic
//
//      CALL "FB_EQP_Switch_Dir" , "DI_TRS_ZZ_01_SW_DIR" (
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_DB_PLT_UpStr           := "DB_ZZ_xx_PLT",                                  // Upstream PLT DB
//           i_DB_PLT_DwnStr          := "DB_ZZ_xx_PLT",                                  // Downstream PLT DB
//           i_CMD_Reverse            := "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant,
//           i_CFG_Cascade_Delay_FWD  := 150,
//           i_CFG_Cascade_Delay_REV  := 0,
//           o_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_01.Motor_Run,
//           o_CMD_MTR_Reverse        := "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse,
//           o_Cascade_Delay_Time     := "DB_Int_Prog_Section".TRS_ZZ_01.Cascade_Delay_Time);
//
//// comment:Create command MTR not reverse
//      AN    "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse; 
//      =     "DB_Int_Prog_Section".TRS_ZZ_01.CMD_NOT_MTR_Reverse; 
//      
////Restart report on wait
//      CALL "FC_On_Dly_Timer_Sec" (
//           i_CMD_Start              := "DB_Int_Prog_Zone".CLZ_ZZ_00.FP_TransportDir_Report,
//           i_CFG_Timer_Value        := 30,
//           i_Setpoint               := "DB_Int_Prog_Zone".CLZ_ZZ_00.Restart_TranspDirRep,
//           o_Setpoint               := "DB_Int_Prog_Zone".CLZ_ZZ_00.Restart_TranspDirRep,
//           o_Timer_Elapsed          := "DB_Int_Prog_Zone".CLZ_ZZ_00.Restart_TranspDir_Tim);
//
//      AN    "DB_Int_Programming".TRS_ZZ_01.OS_Direction_Change; //Or restart timer on dir change
//      AN    "DB_Int_Prog_Zone".CLZ_ZZ_00.Restart_TranspDir_Tim; // Timer Elapsed
//      FP    "DB_Int_Prog_Zone".CLZ_ZZ_00.FP_TransportDir_Report; // Repeat 30 sec
//      O     "DB_Int_Programming".TRS_ZZ_01.OS_Direction_Change; // Send on dir change
//      JCN   AA02; 
//
//      L     1; 
//      A      "DB_Int_Programming".TRS_ZZ_01.CMD_MTR_Reverse; 
//      JCN   AA01; 
//      L     2; 
//AA01: T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TransportDirection; 
//
//      CALL "FC_Write_Event" (// TransportDirection Report 1202
//           i_Message_ID             := 1202,
//           i_Event_value            := "DB_Int_Prog_Zone".CLZ_ZZ_00.TransportDirection,
//           i_DB_Event_Num           := "DB_Int_Prog_Zone".CLZ_ZZ_00.Event_Zone,
//           o_Return_Value           := "MW_INT_Not_Used");
//
// comment:Equipment layer - PEC
//AA02: NOP 0;
//      CALL "FB_EQP_PEC_2Dir" , "DI_TRS_ZZ_01_PEC_EOS" (
//           i_Setting                := "DB_Setting".TRS_ZZ_01.PEC_1_2D,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Track_Present      := TRUE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_01_B21_PEC_EOS",
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_01.LPOS_FWD,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_FWD,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_01.EOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC" (
//       i_DB_PLT      :="DB_ZZ_01_PLT",
//       i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_FWD);
//
// comment:Equipment layer - PEC
//      CALL "FB_EQP_PEC_2Dir" , "DI_TRS_ZZ_01_PEC_SOS" (
//           i_Setting                := "DB_Setting".TRS_ZZ_01.PEC_2_2D,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Blockage_Length    := "DB_Setting".common.PEC_Blockage_Length,
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Track_Present      := TRUE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_01_B22_PEC_SOS",
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_Eqp_Available_IO       := #t_TRS_ZZ_01_IO_Avai_SOS,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_01.CMD_NOT_MTR_Reverse,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_01.LPOS_REV,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_REV,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_01.SOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC" (
//       i_DB_PLT      :="DB_ZZ_01_PLT",
//       i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_REV);
//
//
//// comment:Equipment layer - PPI
//
//      CALL "FB_EQP_PPI" , "DI_TRS_ZZ_01_PPI" (
//           i_CFG_PPI_Resolution     := 82,
//           i_CFG_Time_Out_Error     := 492,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_IO_PPI                 := "I_ZZ_01_B23_PPI_PULS",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_01_IO_Avai_EOS,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_01.OS_Reset,
//           o_PPI_Displacement_mm    := "DB_Int_Prog_Section".TRS_ZZ_01.PPI_Displacement,
//           o_ST_PPI_Err             := "DB_Status".TRS_ZZ_01.PPI_Error);
//
//// comment:Offset link with induct
//
//      NOP   0; 
//
//      AN    "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      JCN   AA03; 
//
//      L     0; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_H2H_Stop; 
//
//      L     "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_FWD; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_PEC_Offset; 
//
//// comment:Load offset forward
//      L     "DB_Setting".TRS_ZZ_01.Basic_FWD.Offset; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_Basic_Offset; 
//      JU    AA04; 
//
//AA03: L     "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_REV; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_PEC_Offset; 
//
//      L     "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_H2H_Stop; 
//
//// comment:Load offset reverse
//      L     "DB_Setting".TRS_ZZ_01.Basic_REV.Offset; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_Basic_Offset; 
//AA04: NOP   0; 
//
//// comment:Condition to request stop
//      A     "DB_Status".TRS_ZZ_01.LMS_ASI_Not_Prsnt; 
//      O     "DB_Status".TRS_ZZ_01.LMS_ASI_Error; 
//      O     "DB_Status".TRS_ZZ_01.LMS_Not_Auto; 
//      O     "DB_Status".TRS_ZZ_01.LMS_Not_Hthy; 
//      O     "DB_Status".TRS_ZZ_01.ASI_Not_Prsnt; 
//      O     "DB_Status".TRS_ZZ_01.ASI_Error; 
//      O     "DB_Status".TRS_ZZ_01.EOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_01.EOS_PEC_Miss; 
//      O     "DB_Status".TRS_ZZ_01.PPI_Error; 
//      O     "DB_Status".TRS_ZZ_01.SOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_01.SOS_PEC_Miss; 
//      =     "DB_External".TRS_ZZ_01.Inputs.Request_Stop; 
//
//// comment:Condition to request halt
//      A     "DB_Int_Prog_Section".TRS_ZZ_01.HW_Request_Halt; 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // for every ciz connected to CLZ
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward; 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward; 
//      O     "DB_Int_Prog_Section".CHO_ZZ_99.TRS_Request_Halt;     //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".CHO_ZZ_98.TRS_Request_Halt;     //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_97.Request_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_96.Request_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Section".HOO_ZZ_SS.Request_Halt;        //If HOO is present downstream of this section
//      =     "DB_External".TRS_ZZ_01.Inputs.Request_Halt; 
//
//// comment:Equipment Basic
//      CALL "FB_EQP_Basic" , "DI_TRS_ZZ_01_EQP" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_01.ID,
//           i_Basic_Offset           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_Basic_Offset,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_DB_PLT_DwnStr          := "DB_ZZ_02_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Run_Out_Distance   := 14,
//           i_CFG_Start_Up_Distance  := 7,
//           i_Minimum_Gap            := "DB_Setting".TRS_ZZ_01.Basic.Minimum_Gap,
//           i_Add_Gap_Stop           := "DB_Setting".TRS_ZZ_01.Basic.Add_Gap_Stop,
//           i_Minimum_H2H            := "DB_Setting".TRS_ZZ_01.Basic.Minimum_H2H,
//           i_Add_H2H_Stop           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS1_H2H_Stop,
//           i_CFG_Cascade_Delay_Time := "DB_Int_Prog_Section".TRS_ZZ_01.Cascade_Delay_Time,
//           i_CFG_Slave_Mode         := TRUE,
//           i_CFG_Del_Window_Codes   := FALSE,
//           i_PPI_Displacement       := "DB_Int_Prog_Section".TRS_ZZ_01.PPI_Displacement,
//           i_Dwnstr_PLT_Pos         := 0,
//           i_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_01.OS_Direction_Change,
//           i_Clr_PLT_Data           :=" DB_Status".TRS_ZZ_01.LMS_Not_Auto,
//           o_External               := "DB_External".TRS_ZZ_01.Outputs,
//           o_Motor_Run              := "DB_Int_Prog_Section".TRS_ZZ_01.Motor_Run,
//           o_Ready_To_Restart       := "DB_System_Control".TRS_ZZ_01.Ready_To_Start);
//           
//// comment:Tracking Layer
//      CALL "FB_TRK_Track" , "DI_TRS_ZZ_01_TRK_FWD" (
//           i_Setting                := "DB_Setting".TRS_ZZ_01.Track_FWD,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_FWD,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_01.LPOS_FWD,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_01.LMS_Not_Auto,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse,
//           o_ST_PEC_Miss            := "DB_Status".TRS_ZZ_01.EOS_PEC_Miss,
//           o_ST_PEC_BadTrack        := "DB_Status".TRS_ZZ_01.EOS_PEC_BadTr,
//           o_Update_Performance     := #t_Update_Perf_ZZ_01_EOS,
//           o_Deviation_Last_Update  := #t_Dev_las_ZZ_01_EOS);
//
//// comment:Tracking Layer
//      CALL "FB_TRK_Track" , "DI_TRS_ZZ_01_TRK_REV" (
//           i_Setting                := "DB_Setting".TRS_ZZ_01.Track_REV,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_REV,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_01.LPOS_REV,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_01.LMS_Not_Auto,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".CMD_NOT_MTR_Reverse,
//           o_ST_PEC_Miss            := "DB_Status".TRS_ZZ_01.SOS_PEC_Miss,
//           o_ST_PEC_BadTrack        := "DB_Status".TRS_ZZ_01.SOS_PEC_BadTr,
//           o_Update_Performance     := #t_Update_Perf_ZZ_01_SOS,
//           o_Deviation_Last_Update  := #t_Dev_las_ZZ_01_SOS);
//
//// comment:Hardware Layer - Local Motor Starter - 2 Dir / 1 Spd - LMS-D - 2 Input
//      CALL "FB_HW_MTR_2DIR_LMS" , "DI_TRS_ZZ_01_HW" (
//           i_CMD_Send_Stat          := "DB_System_Control".TRS_ZZ_01.OS_Send_Statistics,
//           i_Event_DB               := "DB_Event_Section",
//           i_CFG_Motor_Switch_Time  := 300,
//           i_IO_LMS_Auto            := "I_ZZ_01_A12_LMS_AUTO",
//           i_IO_LMS_Healthy         := "I_ZZ_01_A12_LMS_HLTY",
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_01.OS_Reset,
//           i_CMD_Req_Motor_Run      := "DB_Int_Prog_Section".TRS_ZZ_01.Motor_Run,
//           i_CMD_Req_Motor_Reverse  := "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse,
//           o_IO_MTR_Fwd             := "Q_ZZ_01_M11_MTR_FWD",
//           o_IO_MTR_Rev             := "Q_ZZ_01_M11_MTR_REV",
//           o_Req_Halt               := "DB_Int_Prog_Section".TRS_ZZ_01.HW_Request_Halt);
//
//============This piece of code to be added only if Shutter is present on this section ==========
// Condition to force run  
//           A     "Q_ZZ_01_M11_MTR_FWD";
//           O(;   
//           A     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           AN    "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse;
//           );
//           =     "Q_ZZ_01_M11_MTR_FWD";
//
//           A     "Q_ZZ_01_M11_MTR_REV";
//           O(;
//           A     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           A     "DB_Int_Prog_Section".TRS_ZZ_01.CMD_MTR_Reverse;
//           );
//           =     "Q_ZZ_01_M11_MTR_REV";
//
//// comment:Data Layer
//      CALL "FB_DAT" , "DI_TRS_ZZ_01_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_01.ID,
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
////NETWORK
////TITLE =BA: BFxx ZZ_02
//// comment:Reset ASI errors
//      A     "DB_System_Control".TRS_ZZ_02.OS_Reset; 
//      ON    "DB_System_Control".TRS_ZZ_02.IO_Available; 
//      R     "DB_Status".TRS_ZZ_02.ASI_Not_Prsnt; 
//      R     "DB_Status".TRS_ZZ_02.ASI_Error; 
//
//// comment:Create ASI slave not present signal
//      A     "DB_Diagnose_ASI_PF".Gateway_xx_Channel_1.Slave_Not_Present[xx]; 
//      A     "DB_System_Control".TRS_ZZ_02.IO_Available; 
//      S     "DB_Status".TRS_ZZ_02.ASI_Not_Prsnt; 
//
//// comment:Create ASI slave error signal
//      A     "DB_Diagnose_ASI_PF".Gateway_xx_Channel_1.Slave_Error[xx]; 
//      A     "DB_System_Control".TRS_ZZ_02.IO_Available; 
//      S     "DB_Status".TRS_ZZ_02.ASI_Error; 
//
//// comment:Create PEC SOS IO Available signal
//      A     "DB_System_Control".TRS_ZZ_02.IO_Available; 
//      AN    "DB_Status".TRS_ZZ_02.ASI_Not_Prsnt; 
//      AN    "DB_Status".TRS_ZZ_02.ASI_Error; 
//      =     #t_TRS_ZZ_02_IO_Avai_SOS; 
//
//// comment:Create PEC EOS IO Available signal
//      A     "DB_System_Control".TRS_ZZ_02.IO_Available; 
//      AN    "DB_Status".TRS_ZZ_02.LMS_ASI_Not_Prsnt; 
//      AN    "DB_Status".TRS_ZZ_02.LMS_ASI_Error; 
//      =     #t_TRS_ZZ_02_IO_Avai_EOS; 
//
//// comment:Equipment Basic
//
//      CALL "FB_EQP_Switch_Dir" , "DI_TRS_ZZ_02_SW_DIR" (
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_DB_PLT_UpStr           := "DB_ZZ_01_PLT",  
//           i_DB_PLT_DwnStr          := "DB_ZZ_01_PLT",
//           i_CMD_Reverse            := "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant,
//           i_CFG_Cascade_Delay_FWD  := 0,
//           i_CFG_Cascade_Delay_REV  := 150,
//           o_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_02.Motor_Run,
//           o_CMD_MTR_Reverse        := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse,
//           o_Cascade_Delay_Time     := "DB_Int_Prog_Section".TRS_ZZ_02.Cascade_Delay_Time);
//
//// comment:Create command MTR not reverse
//      AN    "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse; 
//      =     "DB_Int_Prog_Section".TRS_ZZ_02.CMD_NOT_MTR_Reverse; 
//
//// comment:Equipment layer - PEC
//
//      CALL "FB_EQP_PEC_2Dir" , "DI_TRS_ZZ_02_PEC_EOS" (
//           i_Setting                := "DB_Setting".TRS_ZZ_02.PEC_1_2D,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Track_Present      := TRUE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_02_B21_PEC_EOS",
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_Eqp_Available_IO       := #t_TRS_ZZ_02_IO_Avai_EOS,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_02.LPOS_FWD,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_FWD,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_02.EOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC" (
//           i_DB_PLT      :="DB_ZZ_02_PLT",
//           i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_FWD);
//
//// comment:Equipment layer - PEC
//
//      CALL "FB_EQP_PEC_2Dir" , "DI_TRS_ZZ_02_PEC_SOS" (
//           i_Setting                := "DB_Setting".TRS_ZZ_02.PEC_2_2D,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Track_Present      := TRUE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_02_B22_PEC_SOS",
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_Eqp_Available_IO       := #t_TRS_ZZ_02_IO_Avai_SOS,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_NOT_MTR_Reverse,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_02.LPOS_REV,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_REV,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_02.SOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC" (
//           i_DB_PLT      :="DB_ZZ_02_PLT",
//           i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_REV);
//
//// comment:Equipment layer - PPI
//
//      CALL "FB_EQP_PPI" , "DI_TRS_ZZ_02_PPI" (
//           i_CFG_PPI_Resolution     := 82,
//           i_CFG_Time_Out_Error     := 492,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_IO_PPI                 := "I_ZZ_02_B23_PPI_PULS",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_02_IO_Avai_EOS,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_02.OS_Reset,
//           o_PPI_Displacement_mm    := "DB_Int_Prog_Section".TRS_ZZ_02.PPI_Displacement,
//           o_ST_PPI_Err             := "DB_Status".TRS_ZZ_02.PPI_Error);
//
//// comment:Offset link with induct
//
//      NOP   0; 
//      AN    "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      JCN   BA02; 
//
//      L     0; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_H2H_Stop; 
//
//      L     "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_FWD; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_PEC_Offset; 
//
//// comment:Load offset forward
//      L     "DB_Setting".TRS_ZZ_02.Basic_FWD.Offset; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_Basic_Offset; 
//      JU    BA03; 
//
//BA02: L     "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_REV; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_PEC_Offset; 
//
//      L     "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_H2H_Stop; 
//
//// comment:Load offset reverse
//      L     "DB_Setting".TRS_ZZ_02.Basic_REV.Offset; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_Basic_Offset; 
//BA03: NOP   0; 
//
//// comment:Condition to request stop
//      A     "DB_Status".TRS_ZZ_02.LMS_ASI_Not_Prsnt; 
//      O     "DB_Status".TRS_ZZ_02.LMS_ASI_Error; 
//      O     "DB_Status".TRS_ZZ_02.LMS_Not_Auto; 
//      O     "DB_Status".TRS_ZZ_02.LMS_Not_Hthy; 
//      O     "DB_Status".TRS_ZZ_02.ASI_Not_Prsnt; 
//      O     "DB_Status".TRS_ZZ_02.ASI_Error; 
//      O     "DB_Status".TRS_ZZ_02.EOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_02.EOS_PEC_Miss; 
//      O     "DB_Status".TRS_ZZ_02.PPI_Error; 
//      O     "DB_Status".TRS_ZZ_02.SOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_02.SOS_PEC_Miss; 
//      =     "DB_External".TRS_ZZ_02.Inputs.Request_Stop; 
//
//// comment:Condition to request halt
//      A     "DB_Int_Prog_Section".TRS_ZZ_02.HW_Request_Halt; 
//      O     "DB_Int_Prog_Section".CHO_ZZ_99.Request_Halt_TRS; //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_97.Request_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Section".HOO_ZZ_SS.Request_Halt;        //If HOO is present downstream of this section
//      =     "DB_External".TRS_ZZ_02.Inputs.Request_Halt; 
//
//// comment:Equipment Basic
//      CALL "FB_EQP_Basic" , "DI_TRS_ZZ_02_EQP" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_02.ID,
//           i_Basic_Offset           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_Basic_Offset,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_DB_PLT_DwnStr          := "DB_ZZ_01_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Run_Out_Distance   := 14,
//           i_CFG_Start_Up_Distance  := 7,
//           i_Minimum_Gap            := "DB_Setting".TRS_ZZ_02.Basic.Minimum_Gap,
//           i_Add_Gap_Stop           := "DB_Setting".TRS_ZZ_02.Basic.Add_Gap_Stop,
//           i_Minimum_H2H            := "DB_Setting".TRS_ZZ_02.Basic.Minimum_H2H,
//           i_Add_H2H_Stop           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS2_H2H_Stop,
//           i_CFG_Cascade_Delay_Time := "DB_Int_Prog_Section".TRS_ZZ_02.Cascade_Delay_Time,
//           i_CFG_Slave_Mode         := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse,
//           i_CFG_Del_Window_Codes   := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_NOT_MTR_Reverse,
//           i_PPI_Displacement       := "DB_Int_Prog_Section".TRS_ZZ_02.PPI_Displacement,
//           i_Dwnstr_PLT_Pos         := 0,
//           i_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_02.OS_Direction_Change,
//           i_Clr_PLT_Data           :=" DB_Status".TRS_ZZ_02.LMS_Not_Auto,
//           o_External               := "DB_External".TRS_ZZ_02.Outputs,
//           o_Ready_To_Restart       := "DB_System_Control".TRS_ZZ_02.Ready_To_Start);
//
//// comment:Tracking Layer
//      CALL "FB_TRK_Track" , "DI_TRS_ZZ_02_TRK_FWD" (
//           i_Setting                := "DB_Setting".TRS_ZZ_02.Track_FWD,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_FWD,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_02.LPOS_FWD,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_02.LMS_Not_Auto,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse,
//           o_ST_PEC_Miss            := "DB_Status".TRS_ZZ_02.EOS_PEC_Miss,
//           o_ST_PEC_BadTrack        := "DB_Status".TRS_ZZ_02.EOS_PEC_BadTr,
//           o_Update_Performance     := #t_Update_Perf_ZZ_02_EOS,
//           o_Deviation_Last_Update  := #t_Dev_las_ZZ_02_EOS);
//
//// comment:Tracking Layer
//      CALL "FB_TRK_Track" , "DI_TRS_ZZ_02_TRK_REV" (
//           i_Setting                := "DB_Setting".TRS_ZZ_02.Track_REV,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_REV,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_02.LPOS_REV,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_02.LMS_Not_Auto,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_NOT_MTR_Reverse,
//           o_ST_PEC_Miss            := "DB_Status".TRS_ZZ_02.SOS_PEC_Miss,
//           o_ST_PEC_BadTrack        := "DB_Status".TRS_ZZ_02.SOS_PEC_BadTr,
//           o_Update_Performance     := #t_Update_Perf_ZZ_02_SOS,
//           o_Deviation_Last_Update  := #t_Dev_las_ZZ_02_SOS);
//
//// comment:Hardware Layer - Local Motor Starter - 2 Dir / 1 Spd - LMS-D - 2 Input
//
//      CALL "FB_HW_MTR_2DIR_LMS" , "DI_TRS_ZZ_02_HW" (
//           i_CMD_Send_Stat          := "DB_System_Control".TRS_ZZ_02.OS_Send_Statistics,
//           i_Event_DB               := "DB_Event_Section",
//           i_CFG_Motor_Switch_Time  := 300,
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_02.IO_Available,
//           i_IO_LMS_Auto            := "I_ZZ_02_A12_LMS_AUTO",
//           i_IO_LMS_Healthy         := "I_ZZ_02_A12_LMS_HLTY",
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_02.OS_Reset,
//           i_CMD_Req_Motor_Run      := "DB_Int_Prog_Section".TRS_ZZ_02.Motor_Run,
//           i_CMD_Req_Motor_Reverse  := "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse,
//           o_IO_MTR_Fwd             := "Q_ZZ_02_M11_MTR_FWD",
//           o_IO_MTR_Rev             := "Q_ZZ_02_M11_MTR_REV",
//           o_Req_Halt               := "DB_Int_Prog_Section".TRS_ZZ_02.HW_Request_Halt);
//
//============This piece of code to be added only if Shutter is present on this section ==========
// Condition to force run  
//           A     "Q_ZZ_02_M11_MTR_FWD";
//           O(;
//           A     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           AN    "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse;
//           );
//           =     "Q_ZZ_02_M11_MTR_FWD";
//
//           A     "Q_ZZ_02_M11_MTR_REV";
//           O(;
//           A     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           A     "DB_Int_Prog_Section".TRS_ZZ_02.CMD_MTR_Reverse;
//           );
//           =     "Q_ZZ_02_M11_MTR_REV";
//
//// comment:Data Layer
//      CALL "FB_DAT" , "DI_TRS_ZZ_02_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_02.ID,
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//NETWORK
//TITLE =CA: BFxx ZZ_03
//// comment:Reset ASI errors
//      A     "DB_System_Control".TRS_ZZ_03.OS_Reset; 
//      ON    "DB_System_Control".TRS_ZZ_03.IO_Available; 
//      R     "DB_Status".TRS_ZZ_03.ASI_Not_Prsnt; 
//      R     "DB_Status".TRS_ZZ_03.ASI_Error; 
//
//// comment:Create ASI slave not present signal
//      A     "DB_Diagnose_ASI_PF".Gateway_xx_Channel_1.Slave_Not_Present[xx]; 
//      A     "DB_System_Control".TRS_ZZ_03.IO_Available; 
//      S     "DB_Status".TRS_ZZ_03.ASI_Not_Prsnt; 
//
//// comment:Create ASI slave error signal
//      A     "DB_Diagnose_ASI_PF".Gateway_xx_Channel_1.Slave_Error[xx]; 
//      A     "DB_System_Control".TRS_ZZ_03.IO_Available; 
//      S     "DB_Status".TRS_ZZ_03.ASI_Error; 
//
//// comment:Create PEC SOS IO Available signal
//      A     "DB_System_Control".TRS_ZZ_03.IO_Available; 
//      AN    "DB_Status".TRS_ZZ_03.ASI_Not_Prsnt; 
//      AN    "DB_Status".TRS_ZZ_03.ASI_Error; 
//      =     #t_TRS_ZZ_03_IO_Avai_SOS; 
//
//// comment:Create PEC EOS IO Available signal
//      A     "DB_System_Control".TRS_ZZ_03.IO_Available; 
//      AN    "DB_Status".TRS_ZZ_03.LMS_ASI_Not_Prsnt; 
//      AN    "DB_Status".TRS_ZZ_03.LMS_ASI_Error; 
//      =     #t_TRS_ZZ_03_IO_Avai_EOS; 
//
//// comment:Equipment Switch
//
//      CALL "FB_EQP_Switch_Dir" , "DI_TRS_ZZ_03_SW_DIR" (
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_DB_PLT_UpStr           := "DB_ZZ_xx_PLT",  
//           i_DB_PLT_DwnStr          := "DB_ZZ_xx_PLT",
//           i_CMD_Reverse            := "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant,
//           i_CFG_Cascade_Delay_FWD  := 0,
//           i_CFG_Cascade_Delay_REV  := 150,
//           o_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_03.Motor_Run,
//           o_CMD_MTR_Reverse        := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse,
//           o_Cascade_Delay_Time     := "DB_Int_Prog_Section".TRS_ZZ_03.Cascade_Delay_Time);
//
//// comment:Create command MTR not reverse
//      AN    "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse; 
//      =     "DB_Int_Prog_Section".TRS_ZZ_03.CMD_NOT_MTR_Reverse; 
//
//// comment:Equipment layer - PEC
//
//      CALL "FB_EQP_PEC_2Dir" , "DI_TRS_ZZ_03_PEC_EOS" (
//           i_Setting                := "DB_Setting".TRS_ZZ_03.PEC_1_2D,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Track_Present      := TRUE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_03_B21_PEC_EOS",
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_Eqp_Available_IO       := #t_TRS_ZZ_03_IO_Avai_EOS,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_03.LPOS_FWD,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_FWD,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_03.EOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC" (
//           i_DB_PLT      :="DB_ZZ_03_PLT",
//           i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_FWD);
//
//// comment:Equipment layer - PEC
//
//      CALL "FB_EQP_PEC_2Dir" , "DI_TRS_ZZ_03_PEC_SOS" (
//           i_Setting                := "DB_Setting".TRS_ZZ_03.PEC_2_2D,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Track_Present      := TRUE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_03_B22_PEC_SOS",
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_Eqp_Available_IO       := #t_TRS_ZZ_03_IO_Avai_SOS,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_NOT_MTR_Reverse,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_03.LPOS_REV,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_REV,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_03.SOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC" (
//           i_DB_PLT      :="DB_ZZ_03_PLT",
//           i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_REV);
//
//// comment:Equipment layer - PPI
//
//      CALL "FB_EQP_PPI" , "DI_TRS_ZZ_03_PPI" (
//           i_CFG_PPI_Resolution     := 82,
//           i_CFG_Time_Out_Error     := 492,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_IO_PPI                 := "I_ZZ_03_B23_PPI_PULS",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_03_IO_Avai_EOS,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_03.OS_Reset,
//           o_PPI_Displacement_mm    := "DB_Int_Prog_Section".TRS_ZZ_03.PPI_Displacement,
//           o_ST_PPI_Err             := "DB_Status".TRS_ZZ_03.PPI_Error);
//
//// comment:Offset link with induct
//
//      NOP   0; 
//      AN    "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//      JCN   CA02; 
//
//      L     0; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_H2H_Stop; 
//
//      L     "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_FWD; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_PEC_Offset; 
//
//// comment:Load offset forward
//      L     "DB_Setting".TRS_ZZ_03.Basic_FWD.Offset; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_Basic_Offset; 
//      JU    CA03; 
//
//CA02: L     "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_REV; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_PEC_Offset; 
//
//      L     "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_H2H_Stop; 
//
//// comment:Load offset reverse
//      L     "DB_Setting".TRS_ZZ_03.Basic_REV.Offset; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_Basic_Offset; 
//CA03: NOP   0; 
//
//// comment:Condition to request stop
//      A     "DB_Status".TRS_ZZ_03.LMS_ASI_Not_Prsnt; 
//      O     "DB_Status".TRS_ZZ_03.LMS_ASI_Error; 
//      O     "DB_Status".TRS_ZZ_03.LMS_Not_Auto; 
//      O     "DB_Status".TRS_ZZ_03.LMS_Not_Hthy; 
//      O     "DB_Status".TRS_ZZ_03.ASI_Not_Prsnt; 
//      O     "DB_Status".TRS_ZZ_03.ASI_Error; 
//      O     "DB_Status".TRS_ZZ_03.EOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_03.EOS_PEC_Miss; 
//      O     "DB_Status".TRS_ZZ_03.PPI_Error; 
//      O     "DB_Status".TRS_ZZ_03.SOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_03.SOS_PEC_Miss; 
//      =     "DB_External".TRS_ZZ_03.Inputs.Request_Stop; 
//
//// comment:Condition to request halt
//      A     "DB_Int_Prog_Section".TRS_ZZ_03.HW_Request_Halt; 
//      O     "DB_Int_Prog_Section".CHO_ZZ_99.Request_Halt_TRS; //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_97.Request_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;      // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;      // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Section".HOO_ZZ_SS.Request_Halt;        //If HOO is present downstream of this section
//      =     "DB_External".TRS_ZZ_03.Inputs.Request_Halt; 
//
//// comment:Equipment Basic
//      CALL "FB_EQP_Basic" , "DI_TRS_ZZ_03_EQP" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_03.ID,
//           i_Basic_Offset           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_Basic_Offset,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_DB_PLT_DwnStr          := "DB_ZZ_xx_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Run_Out_Distance   := 14,
//           i_CFG_Start_Up_Distance  := 7,
//           i_Minimum_Gap            := "DB_Setting".TRS_ZZ_03.Basic.Minimum_Gap,
//           i_Add_Gap_Stop           := "DB_Setting".TRS_ZZ_03.Basic.Add_Gap_Stop,
//           i_Minimum_H2H            := "DB_Setting".TRS_ZZ_03.Basic.Minimum_H2H,
//           i_Add_H2H_Stop           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_H2H_Stop,
//           i_CFG_Cascade_Delay_Time := "DB_Int_Prog_Section".TRS_ZZ_03.Cascade_Delay_Time,
//           i_CFG_Slave_Mode         := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse,
//           i_CFG_Del_Window_Codes   := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_NOT_MTR_Reverse,
//           i_PPI_Displacement       := "DB_Int_Prog_Section".TRS_ZZ_03.PPI_Displacement,
//           i_Dwnstr_PLT_Pos         := 0,
//           i_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_03.OS_Direction_Change,
//           i_Clr_PLT_Data           :=" DB_Status".TRS_ZZ_03.LMS_Not_Auto,
//           o_External               := "DB_External".TRS_ZZ_03.Outputs,
//           o_Motor_Run              := "DB_Int_Prog_Section".TRS_ZZ_03.Motor_Run,
//           o_Ready_To_Restart       := "DB_System_Control".TRS_ZZ_03.Ready_To_Start);
//
///// comment:Tracking Layer
//      CALL "FB_TRK_Track" , "DI_TRS_ZZ_03_TRK_FWD" (
//           i_Setting                := "DB_Setting".TRS_ZZ_03.Track_FWD,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_FWD,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_03.LPOS_FWD,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_03.LMS_Not_Auto,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse,
//           o_ST_PEC_Miss            := "DB_Status".TRS_ZZ_03.EOS_PEC_Miss,
//           o_ST_PEC_BadTrack        := "DB_Status".TRS_ZZ_03.EOS_PEC_BadTr,
//           o_Update_Performance     := #t_Update_Perf_ZZ_03_EOS,
//           o_Deviation_Last_Update  := #t_Dev_las_ZZ_03_EOS);
//
//// comment:Tracking Layer
//      CALL "FB_TRK_Track" , "DI_TRS_ZZ_03_TRK_REV" (
//           i_Setting                := "DB_Setting".TRS_ZZ_03.Track_REV,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_REV,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_03.LPOS_REV,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_03.LMS_Not_Auto,
//           i_Disable_Update_Funct   := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_NOT_MTR_Reverse,
//           o_ST_PEC_Miss            := "DB_Status".TRS_ZZ_03.SOS_PEC_Miss,
//           o_ST_PEC_BadTrack        := "DB_Status".TRS_ZZ_03.SOS_PEC_BadTr,
//           o_Update_Performance     := #t_Update_Perf_ZZ_03_SOS,
//           o_Deviation_Last_Update  := #t_Dev_las_ZZ_03_SOS);
//
//// comment:Hardware Layer - Local Motor Starter - 2 Dir / 1 Spd - LMS-D - 2 Input
//
//      CALL "FB_HW_MTR_2DIR_LMS" , "DI_TRS_ZZ_03_HW" (
//           i_CMD_Send_Stat          := "DB_System_Control".TRS_ZZ_03.OS_Send_Statistics,
//           i_Event_DB               := "DB_Event_Section",
//           i_CFG_Motor_Switch_Time  := 300,
//           i_IO_LMS_Auto            := "I_ZZ_03_A12_LMS_AUTO",
//           i_IO_LMS_Healthy         := "I_ZZ_03_A12_LMS_HLTY",
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_03.OS_Reset,
//           i_CMD_Req_Motor_Run      := "DB_Int_Prog_Section".TRS_ZZ_03.Motor_Run,
//           i_CMD_Req_Motor_Reverse  := "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse,
//           o_IO_MTR_Fwd             := "Q_ZZ_03_M11_MTR_FWD",
//           o_IO_MTR_Rev             := "Q_ZZ_03_M11_MTR_REV",
//           o_Req_Halt               := "DB_Int_Prog_Section".TRS_ZZ_03.HW_Request_Halt);
//
//
//============This piece of code to be added only if Shutter is present on this section ==========
// Condition to force run  
//           A     "Q_ZZ_03_M11_MTR_FWD";
//           O(;
//           A     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           AN    "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse;
//           );
//           =     "Q_ZZ_03_M11_MTR_FWD";
//
//           A     "Q_ZZ_03_M11_MTR_REV";
//           O(; 
//           A     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           A     "DB_Int_Prog_Section".TRS_ZZ_03.CMD_MTR_Reverse;
//           );
//           =     "Q_ZZ_03_M11_MTR_REV";
//
//// comment:Data Layer
//      CALL "FB_DAT" , "DI_TRS_ZZ_03_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_03.ID,
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//NETWORK
//TITLE =DA:window generator and reservation balance
//
//// comment:Window generator
//
//      CALL "FB_Window_Generator" , "DI_CLZ_ZZ_00_WIN_GEN" (
//           i_DB_PLT_Most_DwnStr     := "DB_ZZ_ss_PLT",
//           i_DB_PLT_Most_UpStr      := "DB_ZZ_ss_PLT",
//           i_DB_Reservation         := "DB_RES_ZZ_00",
//           i_DB_Event               := "DB_Event_Zone",
//           i_CFG_Window_Length      := "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length,
//           i_CFG_In_Flow_Function   := FALSE,
//           i_Section_Run_Reverse    := "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant,
//           i_Request_Halt           := "DB_Int_Prog_Zone".CLZ_ZZ_00.Halt_Window_Gen);
//
//// comment:Data Layer
//
//      CALL "FB_DAT" , "DI_WGEN_ZZ_00_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_01.ID,//Zone Reports on TRS1
//           i_DB_Event               := "DB_Event_Zone",
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//      CALL "FB_Res_Balance" , "DI_CLZ_ZZ_00_RES_BAL" (
//           i_DB_Res_Source          := "DB_RES_ZZ_00",     // Other CLZ
//           i_DB_Res_Destination     := "DB_RES_ZZ_00",  
//           i_Balance_Res_Enable     := "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant);
//
//============Add below network only if Shutter is present in zone =================
//NETWORK
//TITLE =EA..:SHO ZZ.97
//
//      NOP   0;
// Request stop
//      A     "DB_Status".SHO_ZZ_97.Shutter_Not_Auto;
//      O     "DB_Status".SHO_ZZ_97.Technical_Error;
//      O     "DB_Status".SHO_ZZ_97.Shutter_Not_Hthy;
//      O     "DB_Status".SHO_ZZ_97.ASI_Not_Prsnt;
//      O     "DB_Status".SHO_ZZ_97.ASI_2_Not_Prsnt;
//      O     "DB_Status".SHO_ZZ_97.ASI_Error;
//      O     "DB_Status".SHO_ZZ_97.ASI_2_Error ;
//      =     "DB_External".SHO_ZZ_97.Inputs.Request_Stop;
//
// Energy saving TRS
//      A     "DB_External".TRS_ZZ_SS.Outputs.Energy_Saving;//Most downstream conveyor where Shutter is mounted
//      =     "DB_Int_Prog_Section".SHO_ZZ_97.TRS_Energy_Saving;
//
// Shutter object
//// This block is applicable if SHO is used. 
//// Use appropriate equipment block based on Fire / Security / Fire+Security shutter is used
//
//      CALL  "FB_EQP_Shutter" , "DI_SHO_ZZ_97" (  
//           i_CMD_Enable            := "DB_System_Control".SHO_ZZ_97.Enable,
//           i_CMD_Start             := "DB_System_Control".SHO_ZZ_97.OS_Start,
//           i_CMD_Reset             := "DB_System_Control".SHO_ZZ_97.OS_Reset,
//           i_CMD_Controlled_Stop   := "t_Controlled_Stop_SHO_2",
//           i_DB_PLT_TRS            := "DB_ZZ_SS_PLT",//Most Downstream TRS in Forward Direction
//           i_Safety_OK             := "DB_System_Control".SHO_ZZ_97.Safety_OK,
//           i_Available_IO          := "DB_System_Control".SHO_ZZ_97.IO_Available,
//           i_IO_NOT_Safety_Edge    := "I_ZZ_97_SG_SAF_EDGE",
//           i_IO_PS_Shutter_Opened  := "I_ZZ_97_LS_OPENED",
//           i_IO_PS_Shutter_Closed  := "I_ZZ_97_LS_CLOSED",
//           i_IO_No_Fire_alarm      := "t_No_Fire_Alarm_SHO_2",
//           i_IO_Automatic_Mode     := "I_ZZ_97_SG_AUTO_MODE",
//           o_ST_WN_Restart         := "DB_Status".SHO_ZZ_97.Restart_required);
//
//
//       A    "DB_Int_Prog_Section".SHO_ZZ_97.Request_Disable_Send;
//       AN    "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//       =    "DB_External".TRS_ZZ_01.Inputs.Request_Disable_Send;  // IF SHO Present immediate downstream of  TRS_ZZ_01
//       =    "DB_External".TRS_ZZ_02.Inputs.Request_Disable_Send;  // IF SHO Present immediate downstream of  TRS_ZZ_02
//
//
// Hardware shutter object
//
//      CALL  "FB_HW_Shutter" , "DI_SHO_ZZ_97_HW"(
//           i_CMD_Reset             := "DB_System_Control".SHO_ZZ_97.OS_Reset,
//           i_CMD_Req_Shutter_Open  := "DB_Int_Prog_Section".SHO_ZZ_97.Req_Shutter_Open,
//           i_CMD_Req_Shutter_Close := "DB_Int_Prog_Section".SHO_ZZ_97.Req_Shutter_Close,
//           i_Event_DB              := "DB_Event_Section",
//           i_CFG_Motor_Switch_Time := 300,
//           i_IO_Shutter_Healthy    := "I_ZZ_97_SG_HLTY",
//           i_IO_Automatic_Mode     := "I_ZZ_97_SG_AUTO_MODE",
//           i_IO_No_Technical_Error := "I_ZZ_97_SG_NO_ERROR",
//           o_IO_MTR_Open           := "Q_ZZ_97_SG_OPEN_CMD",
//           o_IO_MTR_Close          := "Q_ZZ_97_SG_CLOSE_CMD",
//           o_ST_Not_Automatic      := "DB_Status".SHO_ZZ_97.Shutter_Not_Auto,
//           o_ST_Technical_Error    := "DB_Status".SHO_ZZ_97.Technical_Error,
//           o_ST_Shutter_NOT_Healthy:= "DB_Status".SHO_ZZ_97.Shutter_Not_Hthy,
//           o_ST_ASI_Slave2_Error   := "DB_Status".SHO_ZZ_97.ASI_2_Error);
//
//
// Data Layer
//Standard Dat Layer.Interface signals removed to reduce the template
//      CALL  "FB_DAT" , "DI_SHO_ZZ_97_DAT"(
//           i_ID_Section            := "DB_Status_Index".SHO_ZZ_SS.ID,
//           i_DB_Event              := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI := FALSE);
//
//
//
//============Add below network only if second Shutter is present in zone =================
//NETWORK
//TITLE =FA..:SHO ZZ.96
//
//      NOP   0;
//
// Request stop
//      A     "DB_Status".SHO_ZZ_96.Shutter_Not_Auto;
//      O     "DB_Status".SHO_ZZ_96.Technical_Error;
//      O     "DB_Status".SHO_ZZ_96.Shutter_Not_Hthy;
//      O     "DB_Status".SHO_ZZ_96.ASI_Not_Prsnt;
//      O     "DB_Status".SHO_ZZ_96.ASI_2_Not_Prsnt;
//      O     "DB_Status".SHO_ZZ_96.ASI_Error;
//      O     "DB_Status".SHO_ZZ_96.ASI_2_Error ;
//      =     "DB_External".SHO_ZZ_96.Inputs.Request_Stop;
//
// Energy saving TRS
//      A     "DB_External".TRS_ZZ_01.Outputs.Energy_Saving;
//      =     "DB_Int_Prog_Section".SHO_ZZ_96.TRS_Energy_Saving;
//
// Shutter object
//// This block is applicable if SHO is used. 
//// Use appropriate equipment block based on Fire / Security / Fire+Security shutter is used
//
//      CALL  "FB_EQP_Shutter" , "DI_SHO_ZZ_96" (  
//           i_CMD_Enable            := "DB_System_Control".SHO_ZZ_96.Enable,
//           i_CMD_Start             := "DB_System_Control".SHO_ZZ_96.OS_Start,
//           i_CMD_Reset             := "DB_System_Control".SHO_ZZ_96.OS_Reset,
//           i_CMD_Controlled_Stop   := "DB_System_Control".SHO_ZZ_96.Controlled_Stop,
//           i_DB_PLT_TRS            := "DB_ZZ_01_PLT",
//           i_IO_NOT_Safety_Edge    := "I_ZZ_96_SG_SAF_EDGE",
//           i_IO_PS_Shutter_Opened  := "I_ZZ_96_LS_OPENED",
//           i_IO_PS_Shutter_Closed  := "I_ZZ_96_LS_CLOSED",
//           i_IO_No_Fire_alarm      := "t_No_Fire_Alarm_SHO_1",
//           i_IO_Automatic_Mode     := "I_ZZ_96_SG_AUTO_MODE",
//           o_ST_WN_Restart         := "DB_Status".SHO_ZZ_96.Restart_required);
//
//       A    "DB_Int_Prog_Section".SHO_ZZ_96.Request_Disable_Send;
//       A   "DB_Int_Prog_Zone".CLZ_ZZ_00.Redundant; 
//       =    "DB_External".TRS_ZZ_02.Inputs.Request_Disable_Send;  // IF SHO Present immediate downstream of  TRS_ZZ_02 in Redundant mode
//       =    "DB_External".TRS_ZZ_01.Inputs.Request_Disable_Send;  // IF SHO Present immediate downstream of  TRS_ZZ_01 in Redundant mode
//
// Hardware shutter object
//
//      CALL  "FB_HW_Shutter" , "DI_SHO_ZZ_96_HW"(
//           i_CMD_Reset             := "DB_System_Control".SHO_ZZ_96.OS_Reset,
//           i_CMD_Req_Shutter_Open  := "DB_Int_Prog_Section".SHO_ZZ_96.Req_Shutter_Open,
//           i_CMD_Req_Shutter_Close := "DB_Int_Prog_Section".SHO_ZZ_96.Req_Shutter_Close,
//           i_Event_DB              := "DB_Event_Section",
//           i_CFG_Motor_Switch_Time := 300,
//           i_IO_Shutter_Healthy    := "I_ZZ_96_SG_HLTY",
//           i_IO_Automatic_Mode     := "I_ZZ_96_SG_AUTO_MODE",
//           i_IO_No_Technical_Error := "I_ZZ_96_SG_NO_ERROR",
//           o_IO_MTR_Open           := "Q_ZZ_96_SG_OPEN_CMD",
//           o_IO_MTR_Close          := "Q_ZZ_96_SG_CLOSE_CMD",
//           o_ST_Not_Automatic      := "DB_Status".SHO_ZZ_96.Shutter_Not_Auto,
//           o_ST_Technical_Error    := "DB_Status".SHO_ZZ_96.Technical_Error,
//           o_ST_Shutter_NOT_Healthy:= "DB_Status".SHO_ZZ_96.Shutter_Not_Hthy,
//           o_ST_ASI_Slave2_Error   := "DB_Status".SHO_ZZ_96.ASI_2_Error);
//
//
//
// Data Layer
//Standard Dat Layer.Interface signals removed to reduce the template
//      CALL  "FB_DAT" , "DI_SHO_ZZ_96_DAT"(
//           i_ID_Section            := "DB_Status_Index".SHO_ZZ_96.ID,
//           i_DB_Event              := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI := FALSE);
//
//
//// ADD below network only if CHO is used in zone
//NETWORK 
//TITLE =GA..:Check Object
//
// Check Object
//
//      CALL  "FB_CHeck_Object" , "DI_CHO_ZZ_99" (
//           i_DB_PLT              := "DB_ZZ_SS_PLT",
//           i_CFG_Delay_On_Height := 0,
//           i_CFG_Delay_On_Length := 0,
//           i_CFG_Horn_Period     := 10,
//           i_CFG_PEC_Length_Pos  := 0,
//           i_CFG_Length_Chk_dis  := 0,
//           i_CMD_Enable          := "DB_System_Control".CHO_ZZ_99.Enable,
//           i_CMD_Start           := "DB_System_Control".CHO_ZZ_99.OS_Start,
//           i_CMD_Reset           := "DB_System_Control".CHO_ZZ_99.OS_Reset,
//           i_Available_IO        := "DB_System_Control".CHO_ZZ_99.IO_Available,
//           i_IO_NOT_PEC_Height   := "I_ZZ_99_B22_PEC_HGHT",
//           i_IO_NOT_PEC_Length   := FALSE,
//           i_CFG_Length_Chk_Prsnt:= FALSE,
//           i_PB_IO_Reset_Check   := "I_ZZ_99_S01_PB_RESET",
//           o_IO_PB_Fault         := "Q_ZZ_99_P01_SL_BAG_FLT",
//           o_IO_SL_Fault         := "Q_ZZ_99_P03_SL_MAN_INT",
//           o_IO_Horn_Fault       := "Q_ZZ_99_P02_BP_MAN_INT",
//           o_Req_Halt_TRS        := "DB_Int_Prog_Section".CHO_ZZ_99.TRS_Request_Halt,
//           o_ST_WN_Restart       := "DB_Status".CHO_ZZ_99.Restart_required,
//           o_ST_Height_Error     := "DB_Status".CHO_ZZ_99.Height_Error,
//           o_ST_Length_Error     := "DB_Status".CHO_ZZ_99.Length_Check,
//           o_Ready_To_Restart    := "DB_System_Control".CHO_ZZ_99.Ready_To_Start);
//
// Data Layer
//Standard Dat Layer.Interface signals removed to reduce the template
//      CALL  "FB_DAT" , "DI_CHO_ZZ_99_DAT" (
//           i_ID_Section            := "DB_Status_Index".CHO_ZZ_99.ID,
//           i_DB_Event              := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI := FALSE);
//
//// ADD below network if second CHO is used in zone
//NETWORK 
//TITLE =HA..:Check Object 98
//
// Height Check Object
//
//      CALL  "FB_CHeck_Object" , "DI_CHO_ZZ_98" (
//           i_DB_PLT              := "DB_ZZ_SS_PLT",
//           i_CFG_Delay_On_Height := 0,
//           i_CFG_Delay_On_Length := 0,
//           i_CFG_Horn_Period     := 10,
//           i_CFG_PEC_Length_Pos  := 0,
//           i_CFG_Length_Chk_dis  := 0,
//           i_CMD_Enable          := "DB_System_Control".CHO_ZZ_98.Enable,
//           i_CMD_Start           := "DB_System_Control".CHO_ZZ_98.OS_Start,
//           i_CMD_Reset           := "DB_System_Control".CHO_ZZ_98.OS_Reset,
//           i_Available_IO        := "DB_System_Control".CHO_ZZ_98.IO_Available,
//           i_IO_NOT_PEC_Height   := "I_ZZ_98_B22_PEC_HGHT",
//           i_IO_NOT_PEC_Length   := FALSE,
//           i_CFG_Length_Chk_Prsnt:= FALSE,
//           i_PB_IO_Reset_Check   := "I_ZZ_98_S01_PB_RESET",
//           o_IO_PB_Fault         := "Q_ZZ_98_P01_SL_BAG_FLT",
//           o_IO_SL_Fault         := "Q_ZZ_98_P03_SL_MAN_INT",
//           o_IO_Horn_Fault       := "Q_ZZ_98_P02_BP_MAN_INT",
//           o_Req_Halt_TRS        := "DB_Int_Prog_Section".CHO_ZZ_98.Request_Halt_TRS,
//           o_ST_WN_Restart       := "DB_Status".CHO_ZZ_98.Restart_required,
//           o_ST_Height_Error     := "DB_Status".CHO_ZZ_98.Height_Error,
//           o_ST_Length_Error     := "DB_Status".CHO_ZZ_98.Length_Check,
//           o_Ready_To_Restart    := "DB_System_Control".CHO_ZZ_98.Ready_To_Start);
//
// Data Layer
//Standard Dat Layer.Interface signals removed to reduce the template
//      CALL  "FB_DAT" , "DI_CHO_ZZ_98_DAT" (
//           i_ID_Section            := "DB_Status_Index".CHO_ZZ_98.ID,
//           i_DB_Event              := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI := FALSE);
//
//// ADD below network if HOO is used in zone
//NETWORK 
//TITLE =IA..:HOO SS
//
//
//      CALL  "FB_HOO_2Dir" , "DI_HOO_ZZ_SS" (
//           i_ID                    := "DB_Status_Index".HOO_ZZ_SS.ID,
//           i_Available_IO          := "DB_System_Control".HOO_ZZ_SS.IO_Available,
//           i_CMD_Enable            := "DB_System_Control".HOO_ZZ_SS.Enable,
//           i_CMD_Start             := "DB_System_Control".HOO_ZZ_SS.OS_Start,
//           i_CMD_Reset             := "DB_System_Control".HOO_ZZ_SS.OS_Reset,
//           i_CMD_HOO_Rcv_Mode      := FALSE,
//           i_Event_DB              := "DB_Event_Section",
//           i_DB_Send_FIFO_PNPN     := "DB_LCC_00_XX_SND",
//           i_DB_Recv_HandOver_FIFO := "DB_LCC_00_XX_RCV",
//           i_CFG_Default_Record    := 1,
//           i_CFG_LM_Border         := FALSE,
//           i_CFG_Send_Lifesign_Req := TRUE, //For HOO03 = TRUE, for HOO04 = FALSE
//           i_RTS                   := "I_ZZ_SS_RTS_Red",
//           i_RTR_Snd               := "I_ZZ_SS_RTR",
//           i_IHO                   := "I_ZZ_SS_IHO_Red",
//           i_Motor_Run             := "I_ZZ_SS_MotorRun_Red",
//           i_TIP                   := "I_ZZ_SS_TIP_Red",
//           i_Reset_E_Saving        := "I_ZZ_SS_ResetESave_Red",
//           i_Lifesign              := "I_ZZ_SS_LifeSign",
//           i_Window_Code           := "I_ZZ_SS_WindowCode_Red",
//           i_ResetRestart          := "I_ZZ_SS_ResetRestart",
//           i_Item_Length           := "IW_ZZ_SS_ItemLength_Red",
//           i_Message_Identifier    := "ID_ZZ_SS_MessageID_Red",
//           i_CFG_Slave_Mode        := FALSE,
//           i_TEP_Snd               := "IW_ZZ_SS_TEP",
//           i_TOP_Snd               := "IW_ZZ_SS_TOP",
//           i_CFG_Run_Out_Distance  := 13,
//           i_DB_PLT_TRS            := "DB_ZZ_SS_PLT",//Please check as applicable TRS 
//           i_DB_PLT_HOO            := "DB_ZZ_SS_PLT",
//           i_TEP_Downstream        := 0,
//           i_TOP_Downstream        := 0,
//           i_Minimum_Gap           := 0,
//           i_Add_Gap_Stop          := 0,
//           i_Minimum_Head_To_Head  := 250,
//           i_Add_Head_To_Head_Stop := 0,
//           i_Dwnstr_Cnv_Speed      := XXXX,
//           i_Dwnstr_Run_out_Dist   := 13,
//           i_Dwnstr_StartUp_Dist   := 13,
//           o_RTS                   := "Q_ZZ_SS_RTS",
//           o_RTR_Rcv               := "Q_ZZ_SS_RTR_Red",
//           o_IHO                   := "Q_ZZ_SS_IHO",
//           o_Motor_Run             := "Q_ZZ_SS_MotorRun",
//           o_TIP                   := "Q_ZZ_SS_TIP",
//           o_Reset_E_Saving        := "Q_ZZ_SS_ResetESave",
//           o_Lifesign              := "Q_ZZ_SS_LifeSign",
//           o_Window_Code           := "Q_ZZ_SS_WindowCode",
//           o_ResetRestart          := "Q_ZZ_SS_ResetRestart",
//           o_Item_Length           := "QW_ZZ_SS_ItemLength",
//           o_Message_Identifier    := "QD_ZZ_SS_MessageID",
//           o_TEP_Rcv               := "QW_ZZ_SS_TEP_Red",
//           o_TOP_Rcv               := "QW_ZZ_SS_TOP_Red",
//           o_Req_Halt_TRS          := "DB_Int_Prog_Section".HOO_ZZ_SS.Request_Halt,
//           o_Reset_E_Save_Section  := "DB_External".TRS_ZZ_SS.Inputs.Request_Reset_EnergySave,,
//           o_ST_Link_Error         := "DB_Status".HOO_ZZ_SS.Connection_Error,
//           o_ST_WN_Restart         := "DB_Status".HOO_ZZ_SS.Restart_required,
//           o_Ready_To_Restart      := "DB_System_Control".HOO_ZZ_SS.Ready_To_Start);
//
// Data Layer
//Standard Dat Layer.Interface signals removed to reduce the template
//      CALL  "FB_DAT" , "DI_DAT_ZZ_SS" (
//           i_ID_Section            := "DB_Status_Index".HOO_ZZ_SS.ID,
//           i_DB_Event              := "DB_Event_Section",
//           i_CFG_PLC_No_Msg_To_BPI := FALSE);
END_FUNCTION

