FUNCTION "FC_PLT_Write" : VOID
TITLE =%version: 1.02 % CN: 31
//Function:
//This function is used to write the data field entry in the PLT DB.
//It also overwrites the current entry which is selected.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Monday, September 12, 2016 11:51:46 AM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#17042: Add done bit check before PLT write         nlHdL    12-09-16   1.02
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   1.01
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   1.01
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   1.01
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   1.01
//13971: Modified PLT concept with state Version1       nlHdL    29-05-13   1.00
// Init version based on version 0.09 of PLT version 0
//
//Description:
//Write data entry in the PLT DB on the write position. If the position to write 
//already exits then the data entry will be added. 
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_DB_PLT_Num : INT ;	//Number of DB Position Leading Trailing Edge
  i_Position : INT ;	//SETT: [cm] Position in PLT
  i_Info_State : WORD ;	//info state to write
  i_Info_Physical : INT ;	//Info physical to write
  i_LNK : INT ;	//Link data to write 
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_TEMP
  t_PLT_DB_Nr : INT ;	//Copy of i_Track_DB_Nr
  t_Data_Overwritten : INT ;	//Copy data field for Report Event with data
  t_Pointer_Last : DWORD ;	//Copy pointer of last enrty
  t_Position : INT ;	//Position to write
  t_Read_pos : INT ;	//Position from entry
  t_Return_Value : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =AA: Open PLT DB
// 
      L     #i_DB_PLT_Num; 
      T     #t_PLT_DB_Nr; 
      OPN   DB [#t_PLT_DB_Nr]; 

NETWORK
TITLE =BA: Check if entries are filled in PLT DB
// 
      AN    DBX   10.0; //End block if PLT DB is not Done (Init)
      BEC   ; 

      L     DBW    0; 
      L     0; // Number of entries used in PLT DB
      <=I   ; 
      JCN   BA99; // IF no entries present in PLT DB
      L     #i_Position; 
      T     DBW   14; // THEN copy position to first entry
      L     #i_Info_State; 
      T     DBW   16; // copy data to first entry 
      L     #i_Info_Physical; 
      T     DBW   18; // copy data to first entry 
      L     #i_LNK; 
      T     DBW   20; // copy data to first entry 
      L     1; 
      T     DBW    0; // number of entries used = 1
      BEU   ; // end function
BA99: NOP   0; 

NETWORK
TITLE =CA: Check if max number of entries is reached 
// 
      L     DBW    0; // Number of entries used in PLT DB
      L     DBW    4; // Max number of entries possible in PLT DB
      >=I   ; // IF Max number of entries reached
      JCN   CA99; 

      L     #i_LNK; // Load data to write
      L     0; 
      >I    ; 
      JCN   CA02; // Jump if there is no LIC data to write 

      CALL "FC_Write_Event" (// Report event: LNK data lost due to full PLT DB (3100)
           i_Message_ID             := 3100,
           i_Event_value            := #t_PLT_DB_Nr,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Return_Value);

CA02: L     #i_Info_Physical; // Load info to write
      L     0; 
      <I    ; 
      JCN   CA03; // Jump if info to write is no reservation or E-save

      CALL "FC_Write_Event" (// Report event: Reservation or Empty window code lost due to full PLT DB (3101)
           i_Message_ID             := 3101,
           i_Event_value            := #t_PLT_DB_Nr,
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_Return_Value           := #t_Return_Value);

CA03: BEC   ; // End function

CA99: NOP   0; 
NETWORK
TITLE =DA: Calculate pointer to last used entry in PLT DB  
// 
      L     #i_Position; 
      T     #t_Position; //Copy position to temp (Used for not writting on double position)

      L     DBW    0; // Number of entries used in PLT DB
      L     8; // 8 bytes for each entry
      *I    ; 
      L     6; // Header offset
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; 
NETWORK
TITLE =EA: Write position and Data in PLT
//Find and shift entries starting from the last one used until the position found 
//is smaller then the position to write the data. If the position is already 
//occupied then jump to next network.
// 
EA00: L     DBW [AR1,P#0.0]; // actual entry position 
      T     #t_Read_pos; 

      L     #t_Read_pos; 
      L     #t_Position; 
      >I    ; 
      JCN   EA01; // IF write position smaller then read position THEN jump to shift data and loop 

      L     #t_Read_pos; 
      L     #t_Position; 
      -I    ; 
      JZ    EA99; // IF write position = read position THEN jump to overwrite data  
      L     #t_Position; 
      T     DBW [AR1,P#8.0]; // ELSE write position in previous handled entry 
      L     #i_Info_State; 
      T     DBW [AR1,P#10.0]; // write state info in previous handeld entry
      L     #i_Info_Physical; 
      T     DBW [AR1,P#12.0]; // write physical info in previous handeld entry
      L     #i_LNK; 
      T     DBW [AR1,P#14.0]; // write data in previous handeld entry
      JU    EA03; // jump to increase entry counter
EA01: L     DBD [AR1,P#0.0]; 
      T     DBD [AR1,P#8.0]; // Shift entry to next entry in PLT DB
      L     DBD [AR1,P#4.0]; 
      T     DBD [AR1,P#12.0]; 

      TAR1  ; // Pointer to actual entry
      L     P#14.0; // 14 bytes, because the header of a PLT DB is 14 bytes long.
      -D    ; // decrease pointer to next record
      JMZ   EA04; // IF there are still records to handle

      L     P#6.0; // THEN set pointer to next record to handle header = 14 entry = 8 (14 - 8 = 6)  
      +D    ; 
      LAR1  ; 
      JU    EA00; // AND loop

EA04: L     #t_Position; 
      T     DBW   14; // position in first entry PLT 
      L     #i_Info_State; 
      T     DBW   16; // State info in first entry PLT
      L     #i_Info_Physical; 
      T     DBW   18; // Physical info in first entry PLT
      L     #i_LNK; 
      T     DBW   20; // data in first entry PLT
EA03: L     DBW    0; 
      L     1; 
      +I    ; 
      T     DBW    0; // increase entry counter
      BEU   ; // end function
EA99: NOP   0; 
NETWORK
TITLE =FA: Overwite data and shift back already handled entries 
//IF data be overwriten detected in previous network than the data  
//overwriten must be reported.
//The entries that have already been shifted in the previous network must be 
//shifted back to avoid that there are empty entries in between used entries.
//The sorted list must stay sorted.  
      L     DBW    4; // Number of entries present in PLT DB
      L     8; // 8 bytes for each entry
      *D    ; 
      L     6; 
      +D    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      T     #t_Pointer_Last; // Copy to pointer last entry in PLT DB

//Check if entrie is empty or negative
      L     DBW [AR1,P#4.0]; 
      L     0; 
      <I    ; 
      JCN   FA20; 

      L     DBW [AR1,P#6.0]; 
      T     #t_Data_Overwritten; // Copy data to be overwritten to temp for report errors 

      L     #i_Info_State; 
      T     DBW [AR1,P#2.0]; // AND write new state info in PLT db

      L     #i_Info_Physical; 
      T     DBW [AR1,P#4.0]; // AND write new physical info in PLT db

      L     #i_LNK; 
      T     DBW [AR1,P#6.0]; // AND write new link in PLT db

      BE    ; 
FA20: NOP   0; 
      L     #t_Position; 
      L     1; 
      +I    ; 
      T     #t_Position; 
      JU    EA00; 

FA01: TAR1  ; 
      L     P#8.0; 
      +D    ; 
      LAR1  ; // AND set pointer to next record to handle 

      L     #t_Pointer_Last; 
      TAR1  ; 
      -D    ; 
      JMZ   FA02; // IF next entry is the last available in the PLT DB THEN jump to delete last entry 

      L     DBW [AR1,P#8.0]; // next entry position 
      L     0; 
      -I    ; 
      JZ    FA02; // IF next entry position = 0 THEN all records are shifted back to there initial position 

      L     DBD [AR1,P#8.0]; 
      T     DBD [AR1,P#0.0]; // ELSE copy complete next entry to actual entry in PLT DB
      L     DBD [AR1,P#12.0]; 
      T     DBD [AR1,P#4.0]; 

      JU    FA01; // AND loop

FA02: L     0; 
      T     DBD [AR1,P#0.0]; // Clear last entry because there is data present from the shift function  
      T     DBD [AR1,P#4.0]; 

      L     #t_Data_Overwritten; 

END_FUNCTION

