FUNCTION "FC_4_CHARs_To_INT" : VOID
TITLE =%version: 0.02 % CN: 30
//Function:  
//Converts 4 CHARs to one INT. 
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:01:23 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.02
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.02
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.02
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.02
//Initial revision                                      nlMvGi   18-08-10   0.01
//
//Description:
//When called, this function converts 4 CHARs to one INT.
//All four CHARs must be a digit: A number within the range '0' to '9'.
//If not no conversion takes place and '-1' will be returned as INT result.
//                                                                     
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_CHAR_1 : CHAR ;	//1st. CHAR, ['0' to '9']
  i_CHAR_2 : CHAR ;	//2nd. CHAR, ['0' to '9']
  i_CHAR_3 : CHAR ;	//3th. CHAR, ['0' to '9']
  i_CHAR_4 : CHAR ;	//4th. CHAR, ['0' to '9']
END_VAR
VAR_OUTPUT
  o_INT : INT ;	//Output of the INT, (Error -1: Not all CHARs were a digit)
END_VAR
VAR_TEMP
  t_4_CHAR : DWORD ;	//4 CHARs put together on a DWORD
  t_Event_Data : INT ;	//Temp even data
END_VAR
BEGIN
NETWORK
TITLE =AA: Convert from 4 CHARs to INT
//Check input i_ASCII_number on range. 
//Range of the digits must be '0' to '9' (30 to 39 hex.) or digit must be null.
//When digits are out of range the result INT will contain -1.
//
      A(    ; // IF (char 1 >= 30)
      L     #i_CHAR_1; 
      L     W#16#30; 
      >=I   ; 
      )     ; 
      A(    ; // AND (char 1 <= 39)
      L     #i_CHAR_1; 
      L     W#16#39; 
      <=I   ; 
      )     ; 
      A(    ; // IF (char 2 >= 30)
      L     #i_CHAR_2; 
      L     W#16#30; 
      >=I   ; 
      )     ; 
      A(    ; // AND (char 2 <= 39)
      L     #i_CHAR_2; 
      L     W#16#39; 
      <=I   ; 
      )     ; 
      A(    ; // IF (char 3 >= 30)
      L     #i_CHAR_3; 
      L     W#16#30; 
      >=I   ; 
      )     ; 
      A(    ; // AND (char 3 <= 39)
      L     #i_CHAR_3; 
      L     W#16#39; 
      <=I   ; 
      )     ; 
      A(    ; // IF (char 4 >= 30)
      L     #i_CHAR_4; 
      L     W#16#30; 
      >=I   ; 
      )     ; 
      A(    ; // AND (char 4 <= 39)
      L     #i_CHAR_4; 
      L     W#16#39; 
      <=I   ; 
      )     ; 
      JC    AA01; // THEN all input characters in correct range (digit '0' to '9' )

      L     0; 
      T     #t_Event_Data; 

      L     -1; // Error: -1: 'Not all 4 CHARs are digits'
      T     #o_INT; 
      BEU   ; 

AA01: L     P##t_4_CHAR; // Load all 4 CHARs into t_4_CHAR
      LAR1  ; 
      L     #i_CHAR_1; 
      T     LB [AR1,P#0.0]; 
      L     #i_CHAR_2; 
      T     LB [AR1,P#1.0]; 
      L     #i_CHAR_3; 
      T     LB [AR1,P#2.0]; 
      L     #i_CHAR_4; 
      T     LB [AR1,P#3.0]; 

      L     #t_4_CHAR; //Filter out the digits
      L     DW#16#F0F0F0F; 
      AD    ; 
      T     #t_4_CHAR; 

      L     LB [AR1,P#0.0]; //Multiply each digit with its weight
      L     10; //1st digit: *10*10*10 
      *I    ; //2nd digit: *10*10    
      L     LB [AR1,P#1.0]; //3th digit: *10
      +I    ; //4th digit: *1
      L     10; //and all add up to result INT
      *I    ; 
      L     LB [AR1,P#2.0]; 
      +I    ; 
      L     10; 
      *I    ; 
      L     LB [AR1,P#3.0]; 
      +I    ; 
      T     #o_INT; 
END_FUNCTION

