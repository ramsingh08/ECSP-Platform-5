FUNCTION_BLOCK "FB_EQP_PEC_Trigger"
TITLE =%version: 0.06 % CN: 40 
//Function:
//Handle a PEC signal which is not direct connected to a section according the configuration
//
//History:
//This version  %created_by:  nlhdl %
//              %date_created:  maandag 7 december 2015 16:10:35 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.06
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.06
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.06
//24690: Mod-His lined up                               nlwwij   25-09-13   0.06
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.05
//CR7812 Removed s_OS_Preset_Signals                    nlHHop   22-09-11   0.04 
//Minor changes for the major update                    nlMRe    16-09-10   0.03
//PR5402 Modified for timer value and displacement      nlHdL    15-07-10   0.02
//Initial Release                                       nlHEb    09-07-10   0.01
//
//Description:
//The PEC on signal are latched by the delay on functionality. 
//To prevent that unwanted triggers are not detected.
//The PEC blockage is done with the direct PEC signal and reports a blockage 
//after the timer is elapsed.
//- Delay On 
//- PEC Blockage
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_CFG_Blockage_Length : INT  := 50;	//CFG: [0.1 sec] / [cm] Delay for detecting a PEC blockage
  i_CFG_Delay_On_Filter : INT ;	//CFG: [msec] / [cm] Delay on leading edge of product (flap filter)
  i_CFG_Reset_Block_PEC_Oc : BOOL ;	//CFG: TRUE = Allow reset of blockage error with PEC still covered
  i_CFG_Time_Displacement : BOOL ;	//CFG: If false time based if true displacement based
  i_IO_NOT_PEC : BOOL  := TRUE;	//HW: Fail safe signal of Photo Electric Cell (TRUE=No product detected)
  i_Eqp_Available_IO : BOOL ;	//CMD: Signal for indication IO is OK (no Fieldbus or IO error)
  i_CMD_Reset : BOOL ;	//CMD: Reset command
  i_Displacement : INT ;	//[cm] Displacement of the section if used (i_CFG_Time_Displacement = TRUE)
END_VAR
VAR_OUTPUT
  o_ST_PEC_Blk : BOOL ;	//ST: PEC blockage
  o_PEC_Flap_Filter : BOOL ;	//CMD: PEC Flap Filter including delay on leading edge of product
END_VAR
VAR
  s_Cnt_Blockage : INT  := 40;	//Counter blockage
  s_Cnt_Delay_On : INT ;	//Counter for delay-on
  s_Copy_FN_PEC : BOOL ;	//Copy flag Negative edge of PEC signal
  s_Copy_FP_PEC : BOOL ;	//Copy flag Positive edge of PEC signal
  s_FP_PEC : BOOL ;	//Positive flank of PEC signal	
  s_FN_PEC : BOOL ;	//Negative flank of PEC signal	
  s_PEC_Flap_Filter : BOOL ;	//PEC signal after flap filtering (delay-on and delay-off)
  s_ST_PEC_Blockage : BOOL ;	//Status Photo Cell blockage
  s_Reset_PEC_Blockage : BOOL ;	//Reset after the PEC Blockage is cleared
  s_Delay_On_Cnt_Active : BOOL ;	//Delay On counter is active
  s_No_Filter_Used : BOOL ;	//Delay on filter is not used	
  s_OS_Clear_Signals : BOOL ;	//One-shot clear signals
END_VAR
VAR_TEMP
  t_Cnt_Value : INT ;	//Counter value [msec] if time or [cm] if displacement
  t_Cnt_Value_Blok : INT ;	//Counter value [0.1 sec] if time or [cm] if displacement
END_VAR
BEGIN
NETWORK
TITLE =AA: Init preset PEC Flap Filter + clear internal signals

      A     #i_IO_NOT_PEC; 
      A     #s_PEC_Flap_Filter; 
      A     #i_CMD_Reset; 
      =     #s_Reset_PEC_Blockage; // Reset after the PEC Blockage is cleared

      AN    #i_IO_NOT_PEC; // IF positive edge of PEC
      FP    #s_Copy_FP_PEC; 
      =     #s_FP_PEC; 

      AN    #i_IO_NOT_PEC; // IF negative edge of PEC
      FN    #s_Copy_FN_PEC; 
      =     #s_FN_PEC; 

      L     #i_CFG_Delay_On_Filter; // IF all settings are 0
      L     0; 
      ==I   ; 
      =     #s_No_Filter_Used; // THEN no filters are used

      A     #s_FN_PEC; // IF FN of PEC
      A     #s_No_Filter_Used; // AND no filters are used
      O     #i_CMD_Reset; // OR Reset Restart (One-Shot)
      O     #s_Reset_PEC_Blockage; // OR Reset after the PEC Blockage is cleared
      =     #s_OS_Clear_Signals; // THEN One-Shot Clear Signals and Sorted List

      A     #s_OS_Clear_Signals; // AND One-Shot Clear Signals
      JCN   AA99; 
      R     #s_PEC_Flap_Filter; 
      R     #s_Copy_FN_PEC; 
      R     #s_Copy_FP_PEC; 
      R     #s_Delay_On_Cnt_Active; 

      L     0; 
      T     #s_Cnt_Delay_On; 

AA99: NOP   0; 
NETWORK
TITLE =BA: Determine the counter value

      A     #i_CFG_Time_Displacement; 
      JCN   BA01; 

      L     #i_Displacement; 
      T     #t_Cnt_Value; 
      T     #t_Cnt_Value_Blok; 

      JU    BA99; 

BA01: L     "MW_Prev_Cycle_Time"; 
      T     #t_Cnt_Value; 

      L     0; 
      A     "M_OS_/0.1_sec."; 
      JCN   BA02; 
      L     1; 
BA02: T     #t_Cnt_Value_Blok; 
BA99: NOP   0; 
NETWORK
TITLE =CA: Blockage handling
//If the PEC detects a product longer than a certain length an error will be 
//generated. 
//This function uses "M_OS_/0.1_sec." are displacement for the countdown of the 
//blockage counter. 
      NOP   0; 
// Reset of the blockage error
      A     #i_IO_NOT_PEC; // IF PEC free
      O     #i_CFG_Reset_Block_PEC_Oc; // OR reset allowed with PEC NOT free
      A     #s_ST_PEC_Blockage; // AND blockage active
      A(    ; // AND
      O     #i_CMD_Reset; // OR reset from main conveyor
      )     ; 
      JCN   CA01; 

      R     #s_ST_PEC_Blockage; // THEN o_blockage will be reset

      L     #i_CFG_Blockage_Length; 
      T     #s_Cnt_Blockage; // and preset blockage counter

// Pre-set of the blockage timer
CA01: A     #i_IO_NOT_PEC; // IF no product detected     
      JCN   CA02; 

      L     #i_CFG_Blockage_Length; 
      T     #s_Cnt_Blockage; // THEN preset blockage counter

// Countdown of blockage timer
CA02: AN    #i_IO_NOT_PEC; // IF product detected
      A     #i_Eqp_Available_IO; // AND I/O are available
      JCN   CA04; 

      L     #s_Cnt_Blockage; 
      L     #t_Cnt_Value_Blok; // THEN countdown blockage counter
      -I    ; 
      T     #s_Cnt_Blockage; 

      JPZ   CA03; 
      L     0; // IF negative THEN keep counter to zero 
CA03: T     #s_Cnt_Blockage; 

// Evaluation of blockage timer
CA04: L     #i_CFG_Blockage_Length; 
      L     0; // IF pre-set value <> 0 THEN block detection   
      <>I   ; // THEN block detection is enabled  
      A(    ; 
      L     #s_Cnt_Blockage; 
      L     0; 
      <=I   ; // AND blockage counter is elapsed
      )     ; 
      AN    #i_IO_NOT_PEC; // AND product detected
      S     #s_ST_PEC_Blockage; // THEN set output blockage  
NETWORK
TITLE =DA: Flap Filtering (Delay On handling)
//To overrule the influence of flaps, the delay ON can be used. 
//The delay pre-set is adjustable through a input parameter. 
//If a value of 0 is pre-set, the latch signal will follow the input immediately. 
//This function uses "M_OS_/0.1_sec." for the countdown of the delay. 
//         
//                           +--------------------------+                  
//s_PEC ---------------------+                          +-----------------        
//                                                     
//                            <--------->                             
//                             delay ON  +--------------+
//s_PEC_Flap_Filter ---------------------+              +-----------------
//
      A     #s_FP_PEC; // IF negative edge of PEC
      JCN   DA01; 

      L     #i_CFG_Delay_On_Filter; 
      T     #s_Cnt_Delay_On; // THEN pre-set counter as Off-Delay 

      SET   ; 
      =     #s_Delay_On_Cnt_Active; 

DA01: A     #s_Delay_On_Cnt_Active; 
      JCN   DA03; 
      L     #s_Cnt_Delay_On; // Load actual value delay counter
      L     #t_Cnt_Value; // Load counter value 
      -I    ; // THEN delay counter := delay counter - previous 'Scan_Time'
      T     #s_Cnt_Delay_On; 
      JPZ   DA02; // IF result is positive THEN store it
      L     0; // ELSE keep counter to zero (not negative)
DA02: T     #s_Cnt_Delay_On; 

DA03: L     #s_Cnt_Delay_On; // IF delay-counter is elapsed
      L     0; 
      <=I   ; 
      JCN   DA99; 

      AN    #i_IO_NOT_PEC; 
      =     #s_PEC_Flap_Filter; // THEN assign PEC Flap Filter

      CLR   ; 
      =     #s_Delay_On_Cnt_Active; 

DA99: NOP   0; 
NETWORK
TITLE =EA: Write to output

      A     #s_PEC_Flap_Filter; 
      =     #o_PEC_Flap_Filter; 

      A     #s_ST_PEC_Blockage; 
      A     #i_Eqp_Available_IO; 
      =     #o_ST_PEC_Blk; 
END_FUNCTION_BLOCK

