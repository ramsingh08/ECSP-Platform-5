FUNCTION "FC_Snd_LifeSignReq" : VOID
TITLE =%version: 0.05 %  CN: 40
//Function:
//Prepare and send message 'LifeSignRequest'
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:13:32 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.05
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.05
//23966: Added or create ID from FIFO block             nlHdL    18-06-15   0.05
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    09-01-15   0.04
//15799: Block consistency update IO symbols, comment   nlHdL    23-09-13   0.02
//Initial Version based on version 0.02 ECS-P GEN       nlLvdG   31-05-13   0.01
//
//Description:
//Prepare and send message 'LifeSignRequest'
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_DB_send_FIFO_Num : INT ;	//Number of DB Send FIFO
  i_Sequence_Number : INT ;	//Sequence number to be used in this message
  i_AreaID : INT ;	//AreaID
  i_Message_ID : INT ;	//ID of the message which needs to be handled
END_VAR
VAR_TEMP
  t_Ret_Val_Word : WORD ;	//Return value
  t_Ret_Val_Int : INT ;	//Return Value
  t_Message_Body : "UDT_Msg_Snd_Body";	//Data structure Message body
  t_AR2_Store_Restore : DWORD ;	//Backup addres register AR2
  t_AR2_Mask : DWORD ;	//'relative address'-mask
  t_ANY_P_Info : ANY ;	//ANY pointer to first record in Info_DB
  t_ID_Area : DWORD ;	//Area ID for report
END_VAR
BEGIN
NETWORK
TITLE =AA: Get Date and Time

      TAR2  ; // Load 'base address register'
      AD    DW#16#FFFFFF; // Mask 'address only' out of area-internal-pointer
      T     #t_AR2_Mask; // 'relative address'-mask

      CALL "READ_CLK" (
           RET_VAL                  := #t_Ret_Val_Int,
           CDT                      := "DB_Outgoing_Msgs".LifeSignRequest.EventTime);

NETWORK
TITLE =BA: Write messageID

      L     #i_Message_ID; 
      T     "DB_Outgoing_Msgs".LifeSignRequest.MessageID; 
NETWORK
TITLE =CA: Copy AreaID

      L     #i_AreaID; 
      T     "DB_Outgoing_Msgs".LifeSignRequest.AreaID; 

      L     #i_AreaID; 
      DTB   ; 
      SLD   16; 
      T     #t_ID_Area; 
NETWORK
TITLE =DA: Copy Sequence Number

      L     #i_Sequence_Number; 
      T     "DB_Outgoing_Msgs".LifeSignRequest.Sequence; 
NETWORK
TITLE =EA: Put message in buffer

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".Default,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".LifeSignRequest,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "FC_FIFO" (
           i_FIFO_DB_Num            := #i_DB_send_FIFO_Num,
           i_Mode                   := 'L',
           i_ANY_Data               := "DB_Outgoing_Msgs".Merged_Message,
           i_ID                     := #t_ID_Area,
           o_RET_VAL_FIFO           := #t_Ret_Val_Word);

END_FUNCTION

