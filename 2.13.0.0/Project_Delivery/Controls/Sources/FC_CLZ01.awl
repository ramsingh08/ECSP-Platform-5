FUNCTION "FC_CLZ01" : VOID
TITLE =%version: 1.06 % CN: 61 
//Function:
//This block contains a CLZ01 with a maximum of 3 one-directional merge conveyors
//with tracking.
//
//History:
//This version  %created_by:  inajos %
//              %date_created:  Friday, March 09, 2018 11:44:41 AM %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                  By:       Date:    Rev:
//----------------------------------------------------  -------  --------  -----
//ra#21656: Synchronisation of zone template            inajos   09-03-18   1.06
//ra#24634: Update DAT Layer                            nlHdL    04-09-17   1.05
//ra#18840: CLZ delay start template update             nlHdL    11-07-17   1.04
//ra#20083: Flow control configuration                  nlJClo   26-01-17   1.03
//ra#17285:Adjust headers to standard                   nlJClo   22-09-16   1.02
//ra#14943:Initial version                              nlJClo   04-07-16   1.01
//Based on "FB_MGZ_Template" v. 1.05
//
//Description:
//
//The primary function of the collector is collecting individual (departure) 
//baggage items coming from at least one check-in position and transport these 
//items to a downstream conveyor with permanent control over the position of the
//baggage items. 
//In general the collector is used with multiple infeeds (check-ins).
//
//View from above (conveyor):
//                                                          
//     |          TRS 2          |        |          TRS 1          | 
// +---+-------------------------+---++---+-------------------------+---+
// |   |                         |   ||   |    ---- Forward ---->   |   |         
// |   |       SLAVE(FWD)        |   ||   |       MASTER(FWD)       |   |  
// |   |                         |   ||   |                         |   |  
// +---+-------------------------+---++---+-------------------------+---+
//     |                         |        |                         |             
//     ^                         ^        ^                         ^  
//PEC upstream        PEC downstream    PEC upstream        PEC downstream
// 
FAMILY : RAW
VERSION : 0.0

BEGIN
NETWORK
TITLE =#Insert# //Insertion point code generator
//The generated source will be added overhere.


//NETWORK
//TITLE =..: TRS1
////EDIT NETWORK WHEN THIS IS THE ONLY MERGE CONVEYOR!!!
//
// Create IO Available signal
//      A     "DB_System_Control".TRS_ZZ_01.IO_Available;
//      AN    "DB_Status".TRS_ZZ_01.LMS_ASI_Not_Prsnt;
//      AN    "DB_Status".TRS_ZZ_01.LMS_ASI_Error;
//      =     #t_TRS_ZZ_01_IO_Available;
//
//
//// Equipment layer PEC
//
//   CALL  "FB_EQP_PEC" , "DI_TRS_ZZ_01_PEC_EOS" (
//       i_Setting               :="DB_Setting".TRS_ZZ_01.PEC_1D,
//       i_DB_PLT                :="DB_ZZ_01_PLT",
//       i_DB_Event              :="DB_Event_Section",
//       i_Dwnstr_PLT_Pos        :=0,
//       i_CFG_Blockage_Length   :="DB_Setting".common.PEC_Blockage_Length,
//       i_CFG_Delay_On_Filter   :=0, // Put value 1 if section is in public area 
//       i_CFG_Delay_Off_Filter  :=20,
//       i_CFG_Min_Product_Length:=15,
//       i_CFG_Preset_PEC_Latch  :="DB_Status".TRS_ZZ_01.LMS_Not_Auto,
//       i_CFG_Track_Present     :=FALSE,
//       i_CFG_Reset_Block_PEC_Oc:=FALSE,
//       i_IO_NOT_PEC            :="I_ZZ_01_B21_PEC_EOS",
//       i_Eqp_Available_IO      :=#t_TRS_ZZ_01_IO_Available,
//       i_CMD_Reset             :="DB_System_Control".TRS_ZZ_01.OS_Reset,
//       o_LPOS                  :="DB_Int_Prog_Section".TRS_ZZ_01.LPOS,
//       o_PEC_Position          :="DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset,
//       o_ST_PEC_Blk            :="DB_Status".TRS_ZZ_01.EOS_PEC_Blk);
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC"
//       i_DB_PLT      :="DB_ZZ_01_PLT"
//       i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset_Forward
//
//
// Equipment layer PPI
//      CALL "FB_EQP_PPI" , "DI_TRS_ZZ_01_PPI" (
//           i_CFG_PPI_Resolution     := 82,
//           i_CFG_Time_Out_Error     := 492,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_IO_PPI                 := "I_ZZ_01_B22_PPI_PULS",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_01_IO_Available,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_01.OS_Reset,
//           o_PPI_Displacement_mm    := "DB_Int_Prog_Section".TRS_ZZ_01.PPI_Displacement,
//           o_ST_PPI_Err             := "DB_Status".TRS_ZZ_01.PPI_Error);
//
//// Collect all errors and create stop request  
//      A     "DB_Status".TRS_ZZ_01.EOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_01.PPI_Error; 
//      O     "DB_Status".TRS_ZZ_01.LMS_ASI_Not_Prsnt;
//      O     "DB_Status".TRS_ZZ_01.LMS_ASI_Error; 
//      O     "DB_Status".TRS_ZZ_01.LMS_Not_Auto;
//      O     "DB_Status".TRS_ZZ_01.LMS_Not_Hthy;
//      =     "DB_External".TRS_ZZ_01.Inputs.Request_Stop;
//     
//// Collect all halt requests and create halt request
//      A     "DB_Int_Prog_Section".TRS_ZZ_01.HW_Request_Halt; 
//      O     "DB_Int_Prog_Section".CHO_ZZ_SS.Request_Halt_TRS; //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_SS.Req_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      =     "DB_External".TRS_ZZ_01.Inputs.Request_Halt; 
//
//
//**********************************************************************************************************
// Change "i_CFG_Slave_Mode" into "FALSE" when this is the only merge conveyor
//**********************************************************************************************************
//
//// Equipment layer basic function
//      CALL "FB_EQP_Basic" , "DI_TRS_ZZ_01_BASIC" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_01.ID,
//           i_Basic_Offset           := "DB_Setting".TRS_ZZ_01.Basic.Offset,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_DB_PLT_DwnStr          := "DB_ZZ_02_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Run_Out_Distance   := 14,
//           i_CFG_Start_Up_Distance  := 7,
//           i_Minimum_Gap            := "DB_Setting".TRS_ZZ_01.Basic.Minimum_Gap,
//           i_Add_Gap_Stop           := "DB_Setting".TRS_ZZ_01.Basic.Add_Gap_Stop,
//           i_Minimum_H2H            := "DB_Setting".TRS_ZZ_01.Basic.Minimum_H2H,
//           i_Add_H2H_Stop           := "DB_Setting".TRS_ZZ_01.Basic.Add_H2H_Stop,
//           i_CFG_Cascade_Delay_Time := 0,
//           i_CFG_Strt_Up_T_E_Save   := "DB_Setting".common.Start_Up_Time_E_Save,
//           i_CFG_Run_Out_E_Save     := "DB_Setting".common.Run_Out_Time_E_Save,
//           i_CFG_Stop_T_E_Save      := "DB_Setting".common.Stop_Time_E_Save,
//           i_CFG_Disbl_E_Save       := "DB_Setting".common.Disable_Energy_Saving,
//           i_CFG_Slave_Mode         := TRUE,
//           i_CFG_Del_Window_Codes   := FALSE,
//           i_PPI_Displacement       := "DB_Int_Prog_Section".TRS_ZZ_01.PPI_Displacement,
//           i_Dwnstr_PLT_Pos         := "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset,
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_01.IO_Available,
//           i_Safety_OK              := "DB_System_Control".TRS_ZZ_01.Safety_OK,
//           i_CMD_Enable             := "DB_System_Control".TRS_ZZ_01.Enable,
//           i_CMD_Start              := "DB_System_Control".TRS_ZZ_01.OS_Start,
//           i_Ext_Req_Stop           := "DB_External".TRS_ZZ_01.Inputs.Request_Stop,
//           i_Ext_Req_Halt           := "DB_External".TRS_ZZ_01.Inputs.Request_Halt,
//           i_Ext_Req_Dis_Send       := "DB_External".TRS_ZZ_01.Inputs.Request_Disable_Send,
//           i_Ext_Req_Rst_ESave      := "DB_External".TRS_ZZ_01.Inputs.Request_Reset_EnergySave,
//           i_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_01.OS_Direction_Change,
//           i_Clr_PLT_Data           :=" DB_Status".TRS_ZZ_01.LMS_Not_Auto,
//           o_External               := "DB_External".TRS_ZZ_01.Outputs,
//           o_Motor_Run              := "DB_Int_Prog_Section".TRS_ZZ_01.Motor_Run,
//           o_ST_Items               := "DB_Status".TRS_ZZ_01.Items, 
//           o_ST_Running             := "DB_Status".TRS_ZZ_01.Running,
//           o_ST_Started             := "DB_Status".TRS_ZZ_01.Started,
//           o_ST_Request_Halt        := "DB_Status".TRS_ZZ_01.Req_Halt,
//           o_ST_Request_Stop        := "DB_Status".TRS_ZZ_01.Req_Stop,
//           o_ST_External_Stop       := "DB_Status".TRS_ZZ_01.Ext_Stop,
//           o_Ready_To_Restart       := "DB_System_Control".TRS_ZZ_01.Ready_To_Start);
//
//      CALL "FB_TRK_Track", "DI_TRS_ZZ_01_TRCK" (
//           i_Setting                := "DB_Setting".TRS_ZZ_01.Tracking,
//           i_DB_PLT                 := "DB_ZZ_01_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_01.PEC_Offset,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_01.LPOS,
//           i_Length_Dif_Accepted    := 0,
//           i_CFG_Num_Missing_Error  := 3,
//           i_CFG_Upd_Perf_WN_Level  := 80,
//           i_CFG_Weighing_Factor    := 5,
//           i_CFG_Default_Record     := X,
//           i_Trigger_Send_Stat      := "DB_System_Control".TRS_ZZ_01.OS_Send_Statistics,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_01.OS_Reset,
//           i_CFG_Clear_Double_Data  := FALSE,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_01.LMS_Not_Auto);
//
//// Hardware layer
//      CALL "FB_HW_MTR_LMS" , "DI_TRS_ZZ_01_HW"
//           i_CMD_Send_Stat          := "DB_System_Control".TRS_ZZ_01.OS_Send_Statistics,
//           i_Event_DB               := "DB_Event_Section",
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_01.IO_Available,
//           i_Quick_Stop             := FALSE,
//           i_LMS_NotPrsnt           := "DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Not_Present[x],
//           i_LMS_Error              := "DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Error[x],
//           i_IO_LMS_Auto            := "I_ZZ_01_A12_LMS_AUTO", 
//           i_IO_LMS_Healthy         := "I_ZZ_01_A12_LMS_HLTY",
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_01.OS_Reset,
//           i_CMD_Req_Motor_Forward  := "DB_Int_Prog_Section".TRS_ZZ_01.Motor_Run,
//           o_IO_MTR_Fwd             := "Q_ZZ_01_M11_MTR_FWD",
//           o_IO_MTR_Dis_Quick_Stop  := "Q_ZZ_01_M11_Disable_QS",
//           o_ST_ASI_NotPrsnt        := "DB_Status".TRS_ZZ_01.LMS_ASI_Not_Prsnt,
//           o_ST_ASI_Err             := "DB_Status".TRS_ZZ_01.LMS_ASI_Error,
//           o_ST_LMS_Not_Auto        := "DB_Status".TRS_ZZ_01.LMS_Not_Auto,
//           o_ST_LMS_Not_Hthy        := "DB_Status".TRS_ZZ_01.LMS_Not_Hthy);
//
//============This piece of code to be added only if Shutter is present on this section ==========
// Condition to force run  
//           A     "Q_ZZ_01_M11_MTR_FWD";
//           O     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           =     "Q_ZZ_01_M11_MTR_FWD";
//
//// Data Layer          
//      CALL "FB_DAT" , "DI_TRS_ZZ_01_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_01.ID,
//           i_DB_Event               := "DB_Event_Section",
//           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
//           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
//           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
//           i_CFG_PLC_Log_Route_Msgs := FALSE,
//           i_CFG_PLC_LOG_BPI_Stat   := FALSE,
//           i_CFG_PLC_No_Msg_To_Rout := FALSE,
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//NETWORK
//TITLE =..: TRS2
////EDIT NETWORK WHEN THIS IS THE LAST DOWNSTREAM MERGE CONVEYOR!!!
////
//
// Create IO Available signal
//      A     "DB_System_Control".TRS_ZZ_02.IO_Available;
//      AN    "DB_Status".TRS_ZZ_02.LMS_ASI_Not_Prsnt;
//      AN    "DB_Status".TRS_ZZ_02.LMS_ASI_Error;
//      =     #t_TRS_ZZ_02_IO_Available;
//
//// Equipment layer PEC
//      CALL "FB_EQP_PEC" , "DI_TRS_ZZ_02_PEC"(
//           i_Setting                := "DB_Setting".TRS_ZZ_02.PEC_1D,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_Dwnstr_PLT_Pos         := 0,
//           i_CFG_Blockage_Length    := 300,
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Delay_Off_Filter   := 20,
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_CFG_Track_Present      := FALSE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_02_B21_PEC_EOS",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_02_IO_Available,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_02.OS_Reset,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_02.LPOS,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_02.EOS_PEC_Blk);
//
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC"
//       i_DB_PLT      :="DB_ZZ_02_PLT"
//       i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset_Forward
//
//
//// Equipment layer PPI
//      CALL "FB_EQP_PPI" , "DI_TRS_ZZ_02_PPI" (
//           i_CFG_PPI_Resolution     := 82,
//           i_CFG_Time_Out_Error     := 492,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_IO_PPI                 := "I_ZZ_02_B22_PPI",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_02_IO_Available,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_02.OS_Reset,
//           o_PPI_Displacement_mm    := "DB_Int_Prog_Section".TRS_ZZ_02.PPI_Displacement,
//           o_ST_PPI_Err             := "DB_Status".TRS_ZZ_02.PPI_Error);
//
//// Collect all errors and create stop request 
//      A     "DB_Status".TRS_ZZ_02.EOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_02.PPI_Error; 
//      O     "DB_Status".TRS_ZZ_02.LMS_ASI_Not_Prsnt;
//      O     "DB_Status".TRS_ZZ_02.LMS_ASI_Error; 
//      O     "DB_Status".TRS_ZZ_02.LMS_Not_Auto;
//      O     "DB_Status".TRS_ZZ_02.LMS_Not_Hthy;
//      =     "DB_External".TRS_ZZ_02.Inputs.Request_Stop; 
//
//// Collect all halt requests and create halt request
//      A     "DB_Int_Prog_Section".TRS_ZZ_02.HW_Request_Halt; 
//      O     "DB_Int_Prog_Section".CHO_ZZ_SS.Request_Halt_TRS; //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_SS.Req_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      =     "DB_External".TRS_ZZ_02.Inputs.Request_Halt; 
//
////**********************************************************************************************************
//// Change "i_CFG_Slave_Mode" into "FALSE" when this is the last downstream merge conveyor
////**********************************************************************************************************
//
//// Equipment layer basic function
//      CALL "FB_EQP_Basic" , "DI_TRS_ZZ_02_BASIC" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_02.ID,
//           i_Basic_Offset           := "DB_Setting".TRS_ZZ_02.Basic.Offset,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_DB_PLT_DwnStr          := "DB_ZZ_03_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Run_Out_Distance   := 14,
//           i_CFG_Start_Up_Distance  := 7,
//           i_Minimum_Gap            := "DB_Setting".TRS_ZZ_02.Basic.Minimum_Gap,
//           i_Add_Gap_Stop           := "DB_Setting".TRS_ZZ_02.Basic.Add_Gap_Stop,
//           i_Minimum_H2H            := "DB_Setting".TRS_ZZ_02.Basic.Minimum_H2H,
//           i_Add_H2H_Stop           := "DB_Setting".TRS_ZZ_02.Basic.Add_H2H_Stop,
//           i_CFG_Cascade_Delay_Time := 0,
//           i_CFG_Strt_Up_T_E_Save   := "DB_Setting".common.Start_Up_Time_E_Save,
//           i_CFG_Run_Out_E_Save     := "DB_Setting".common.Run_Out_Time_E_Save,
//           i_CFG_Stop_T_E_Save      := "DB_Setting".common.Stop_Time_E_Save,
//           i_CFG_Disbl_E_Save       := "DB_Setting".common.Disable_Energy_Saving,
//           i_CFG_Slave_Mode         := TRUE,
//           i_CFG_Del_Window_Codes   := FALSE,
//           i_PPI_Displacement       := "DB_Int_Prog_Section".TRS_ZZ_02.PPI_Displacement,
//           i_Dwnstr_PLT_Pos         := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset,
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_02.IO_Available,
//           i_Safety_OK              := "DB_System_Control".TRS_ZZ_02.Safety_OK,
//           i_CMD_Enable             := "DB_System_Control".TRS_ZZ_02.Enable,
//           i_CMD_Start              := "DB_System_Control".TRS_ZZ_02.OS_Start,
//           i_Ext_Req_Stop           := "DB_External".TRS_ZZ_02.Inputs.Request_Stop,
//           i_Ext_Req_Halt           := "DB_External".TRS_ZZ_02.Inputs.Request_Halt,
//           i_Ext_Req_Dis_Send       := "DB_External".TRS_ZZ_02.Inputs.Request_Disable_Send,
//           i_Ext_Req_Rst_ESave      := "DB_External".TRS_ZZ_02.Inputs.Request_Reset_EnergySave,
//           i_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_02.OS_Direction_Change,
//           i_Clr_PLT_Data           :=" DB_Status".TRS_ZZ_02.LMS_Not_Auto,
//           o_External               := "DB_External".TRS_ZZ_02.Outputs,
//           o_Motor_Run              := "DB_Int_Prog_Section".TRS_ZZ_02.Motor_Run,
//           o_ST_Items               := "DB_Status".TRS_ZZ_02.Items, 
//           o_ST_Running             := "DB_Status".TRS_ZZ_02.Running,
//           o_ST_Started             := "DB_Status".TRS_ZZ_02.Started,
//           o_ST_Request_Halt        := "DB_Status".TRS_ZZ_02.Req_Halt,
//           o_ST_Request_Stop        := "DB_Status".TRS_ZZ_02.Req_Stop,
//           o_ST_External_Stop       := "DB_Status".TRS_ZZ_02.Ext_Stop,
//           o_Ready_To_Restart       := "DB_System_Control".TRS_ZZ_02.Ready_To_Start);
//
//      CALL "FB_TRK_Track", "DI_TRS_ZZ_02_TRCK" (
//           i_Setting                := "DB_Setting".TRS_ZZ_02.Tracking,
//           i_DB_PLT                 := "DB_ZZ_02_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_02.PEC_Offset,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_02.LPOS,
//           i_Length_Dif_Accepted    := 0,
//           i_CFG_Num_Missing_Error  := 3,
//           i_CFG_Upd_Perf_WN_Level  := 80,
//           i_CFG_Weighing_Factor    := 5,
//           i_CFG_Default_Record     := X,
//           i_Trigger_Send_Stat      := "DB_System_Control".TRS_ZZ_02.OS_Send_Statistics,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_02.OS_Reset,
//           i_CFG_Clear_Double_Data  := FALSE,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_02.LMS_Not_Auto);
//
//// Hardware layer
//      CALL "FB_HW_MTR_LMS" , "DI_TRS_ZZ_02_HW"
//           i_CMD_Send_Stat          := "DB_System_Control".TRS_ZZ_02.OS_Send_Statistics,
//           i_Event_DB               := "DB_Event_Section",
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_02.IO_Available,
//           i_Quick_Stop             := FALSE,
//           i_LMS_NotPrsnt           := "DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Not_Present[x],
//           i_LMS_Error              := "DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Error[x],
//           i_IO_LMS_Auto            := "I_ZZ_02_A12_LMS_AUTO", 
//           i_IO_LMS_Healthy         := "I_ZZ_02_A12_LMS_HLTY",
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_02.OS_Reset,
//           i_CMD_Req_Motor_Forward  := "DB_Int_Prog_Section".TRS_ZZ_02.Motor_Run,
//           o_IO_MTR_Fwd             := "Q_ZZ_02_M11_MTR_FWD",
//           o_IO_MTR_Dis_Quick_Stop  := "Q_ZZ_02_M11_Disable_QS",
//           o_ST_ASI_NotPrsnt        := "DB_Status".TRS_ZZ_02.LMS_ASI_Not_Prsnt,
//           o_ST_ASI_Err             := "DB_Status".TRS_ZZ_02.LMS_ASI_Error,
//           o_ST_LMS_Not_Auto        := "DB_Status".TRS_ZZ_02.LMS_Not_Auto,
//           o_ST_LMS_Not_Hthy        := "DB_Status".TRS_ZZ_02.LMS_Not_Hthy);
//
//============This piece of code to be added only if Shutter is present on this section ==========
// Condition to force run  
//           A     "Q_ZZ_02_M11_MTR_FWD";
//           O     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           =     "Q_ZZ_02_M11_MTR_FWD";
//
//// Data Layer
//      CALL "FB_DAT" , "DI_TRS_ZZ_02_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_02.ID,
//           i_DB_Event               := "DB_Event_Section",
//           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
//           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
//           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
//           i_CFG_PLC_Log_Route_Msgs := FALSE,
//           i_CFG_PLC_LOG_BPI_Stat   := FALSE,
//           i_CFG_PLC_No_Msg_To_Rout := FALSE,
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//NETWORK
//TITLE =FA: Calculate H2H Distance according i_CMD_Capacity
//
//      L     "DB_Command".CLZ_ZZ_00.Capacity; 
//      L     0; 
//      >I    ; 
//      JCN   FA01; 
//
//      L     "DB_Command".CLZ_ZZ_00.Capacity; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.Capacity_Actual_Value;  
//
//FA01: NOP   0; 
//      CALL "FC_Calc_H2H_Distance" (
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Capacity           := "DB_Int_Prog_Zone".CLZ_ZZ_00.Capacity_Actual_Value,
//           i_CFG_Minimum_Capacity   := 300,
//           i_CFG_Maximum_Capacity   := 1800,
//           o_H2H_Length             := "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length,
//           o_Current_Capacity       := "MW_INT_Not_Used",
//           o_ST_Capacity_2Low       := "M_BOOL_Not_Used",
//           o_ST_Capacity_2High      := "M_BOOL_Not_Used",
//           o_ST_CalcH2H_Disable     := "M_BOOL_Not_Used");
//
//NETWORK
//TITLE =..: TRS3
////EDIT NETWORK WHEN THIS IS NOT THE LAST DOWNSTREAM MERGE CONVEYOR!!!
//
// Create IO Available signal
//      A     "DB_System_Control".TRS_ZZ_03.IO_Available;
//      AN    "DB_Status".TRS_ZZ_03.LMS_ASI_Not_Prsnt;
//      AN    "DB_Status".TRS_ZZ_03.LMS_ASI_Error;
//      =     #t_TRS_ZZ_03_IO_Available;
//
////Equipment layer PEC
//      CALL "FB_EQP_PEC" , "DI_TRS_ZZ_03_PEC"(
//           i_Setting                := "DB_Setting".TRS_ZZ_03.PEC_1D,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_Dwnstr_PLT_Pos         := 0,
//           i_CFG_Blockage_Length    := 300,
//           i_CFG_Delay_On_Filter    := 0,// Put value 1 if section is in public area 
//           i_CFG_Delay_Off_Filter   := 20,
//           i_CFG_Min_Product_Length := 15,
//           i_CFG_Preset_PEC_Latch   := FALSE,
//           i_CFG_Track_Present      := FALSE,
//           i_CFG_Reset_Block_PEC_Oc := FALSE,
//           i_IO_NOT_PEC             := "I_ZZ_03_B21_PEC_EOS",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_03_IO_Available,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_03.OS_Reset,
//           o_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_03.LPOS,
//           o_PEC_Position           := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset,
//           o_ST_PEC_Blk             := "DB_Status".TRS_ZZ_03.EOS_PEC_Blk);
//
//
//// Add No Esave function only if this section is in public area 
//// Function No Esave
//      CALL  "FC_No_ESave_Trg_PEC"
//       i_DB_PLT      :="DB_ZZ_03_PLT"
//       i_PEC_Position:="DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset_Forward
//
//
// Equipment layer PPI
//      CALL "FB_EQP_PPI" , "DI_TRS_ZZ_03_PPI" (
//           i_CFG_PPI_Resolution     := 82,
//           i_CFG_Time_Out_Error     := 492,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_IO_PPI                 := "I_ZZ_03_B22_PPI",
//           i_Eqp_Available_IO       := #t_TRS_ZZ_03_IO_Available,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_03.OS_Reset,
//           o_PPI_Displacement_mm    := "DB_Int_Prog_Section".TRS_ZZ_03.PPI_Displacement,
//           o_ST_PPI_Err             := "DB_Status".TRS_ZZ_03.PPI_Error);
//      
//      L     "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length; 
//      T     "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_H2H_Stop;
//
// Collect all errors and create stop request 
//      A     "DB_Status".TRS_ZZ_03.EOS_PEC_Blk; 
//      O     "DB_Status".TRS_ZZ_03.PPI_Error; 
//      O     "DB_Status".TRS_ZZ_03.LMS_ASI_Not_Prsnt;
//      O     "DB_Status".TRS_ZZ_03.LMS_ASI_Error; 
//      O     "DB_Status".TRS_ZZ_03.LMS_Not_Auto;
//      O     "DB_Status".TRS_ZZ_03.LMS_Not_Hthy;
//      =     "DB_External".TRS_ZZ_03.Inputs.Request_Stop;  
//
// Collect all halt requests and create halt request
//      A     "DB_Int_Prog_Section".TRS_ZZ_03.HW_Request_Halt; 
//      O     "DB_Int_Prog_Section".CHO_ZZ_SS.Request_Halt_TRS; //IF CHO present on this section 
//      O     "DB_Int_Prog_Section".SHO_ZZ_SS.Req_Halt_TRS;     //IF SHO present on this section 
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      O     "DB_Int_Prog_Zone".CIZ_ZZ_00.Req_Die_Forward;     // Add Die forward interlocks of applicable CIZs.
//      =     "DB_External".TRS_ZZ_03.Inputs.Request_Halt; 
//
//**********************************************************************************************************
// Change "i_DB_PLT_Downstream" into the next Downstream merge conveyor PLT DB "i_TRSx_CFG_DB_PLT" 
// Change "i_CFG_Slave_Mode" into "TRUE" when this is not the last upstream merge conveyor
//**********************************************************************************************************
//
// Equipment layer basic function
//      CALL "FB_EQP_Basic" , "DI_TRS_ZZ_03_BASIC" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_03.ID,
//           i_Basic_Offset           := "DB_Setting".TRS_ZZ_03.Basic.Offset,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_DB_PLT_DwnStr          := "DB_ZZ_xx_PLT",
//           i_DB_Event               := "DB_Event_Section",
//           i_CFG_Conveyor_Speed     := XXXX,
//           i_CFG_Run_Out_Distance   := 14,
//           i_CFG_Start_Up_Distance  := 7,
//           i_Minimum_Gap            := "DB_Setting".TRS_ZZ_03.Basic.Minimum_Gap,
//           i_Add_Gap_Stop           := "DB_Setting".TRS_ZZ_03.Basic.Add_Gap_Stop,
//           i_Minimum_H2H            := "DB_Setting".TRS_ZZ_03.Basic.Minimum_H2H,
//           i_Add_H2H_Stop           := "DB_Int_Prog_Zone".CLZ_ZZ_00.TRS3_H2H_Stop,
//           i_CFG_Cascade_Delay_Time := 300,
//           i_CFG_Strt_Up_T_E_Save   := "DB_Setting".common.Start_Up_Time_E_Save,
//           i_CFG_Run_Out_E_Save     := "DB_Setting".common.Run_Out_Time_E_Save,
//           i_CFG_Stop_T_E_Save      := "DB_Setting".common.Stop_Time_E_Save,
//           i_CFG_Disbl_E_Save       := "DB_Setting".common.Disable_Energy_Saving,
//           i_CFG_Slave_Mode         := FALSE,
//           i_CFG_Del_Window_Codes   := FALSE,
//           i_PPI_Displacement       := "DB_Int_Prog_Section".TRS_ZZ_03.PPI_Displacement,
//           i_Dwnstr_PLT_Pos         := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset,
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_03.IO_Available,
//           i_Safety_OK              := "DB_System_Control".TRS_ZZ_03.Safety_OK,
//           i_CMD_Enable             := "DB_System_Control".TRS_ZZ_03.Enable,
//           i_CMD_Start              := "DB_System_Control".TRS_ZZ_03.OS_Start,
//           i_Ext_Req_Stop           := "DB_External".TRS_ZZ_03.Inputs.Request_Stop,
//           i_Ext_Req_Halt           := "DB_External".TRS_ZZ_03.Inputs.Request_Halt,
//           i_Ext_Req_Dis_Send       := "DB_External".TRS_ZZ_03.Inputs.Request_Disable_Send,
//           i_Ext_Req_Rst_ESave      := "DB_External".TRS_ZZ_03.Inputs.Request_Reset_EnergySave,
//           i_OS_Direction_Change    := "DB_Int_Prog_Section".TRS_ZZ_03.OS_Direction_Change,
//           i_Clr_PLT_Data           :=" DB_Status".TRS_ZZ_03.LMS_Not_Auto,
//           o_External               := "DB_External".TRS_ZZ_03.Outputs,
//           o_Motor_Run              := "DB_Int_Prog_Section".TRS_ZZ_03.Motor_Run,
//           o_ST_Items               := "DB_Status".TRS_ZZ_03.Items, 
//           o_ST_Running             := "DB_Status".TRS_ZZ_03.Running,
//           o_ST_Started             := "DB_Status".TRS_ZZ_03.Started,
//           o_ST_Request_Halt        := "DB_Status".TRS_ZZ_03.Req_Halt,
//           o_ST_Request_Stop        := "DB_Status".TRS_ZZ_03.Req_Stop,
//           o_ST_External_Stop       := "DB_Status".TRS_ZZ_03.Ext_Stop,
//           o_Ready_To_Restart       := "DB_System_Control".TRS_ZZ_03.Ready_To_Start);
//
//      CALL "FB_TRK_Track", "DI_TRS_ZZ_03_TRCK" (
//           i_Setting                := "DB_Setting".TRS_ZZ_03.Tracking,
//           i_DB_PLT                 := "DB_ZZ_03_PLT",
//           i_Event_DB               := "DB_Event_Section",
//           i_Position_PEC_Update    := "DB_Int_Prog_Section".TRS_ZZ_03.PEC_Offset,
//           i_LPOS                   := "DB_Int_Prog_Section".TRS_ZZ_03.LPOS,
//           i_Length_Dif_Accepted    := 0,
//           i_CFG_Num_Missing_Error  := 3,
//           i_CFG_Upd_Perf_WN_Level  := 80,
//           i_CFG_Weighing_Factor    := 5,
//           i_CFG_Default_Record     := X,
//           i_Trigger_Send_Stat      := "DB_System_Control".TRS_ZZ_03.OS_Send_Statistics,
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_03.OS_Reset,
//           i_CFG_Clear_Double_Data  := FALSE,
//           i_OS_Direction_Change    := FALSE,
//           i_HW_MTR_Not_Auto        := "DB_Status".TRS_ZZ_03.LMS_Not_Auto);
//
// Hardware layer           
//      CALL "FB_HW_MTR_LMS" , "DI_TRS_ZZ_03_HW"
//           i_CMD_Send_Stat          := "DB_System_Control".TRS_ZZ_03.OS_Send_Statistics,
//           i_Event_DB               := "DB_Event_Section",
//           i_Available_IO           := "DB_System_Control".TRS_ZZ_03.IO_Available,
//           i_Quick_Stop             := FALSE,
//           i_LMS_NotPrsnt           := "DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Not_Present[x],
//           i_LMS_Error              := "DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Error[x],
//           i_IO_LMS_Auto            := "I_ZZ_03_A12_LMS_AUTO", 
//           i_IO_LMS_Healthy         := "I_ZZ_03_A12_LMS_HLTY",
//           i_CMD_Reset              := "DB_System_Control".TRS_ZZ_03.OS_Reset,
//           i_CMD_Req_Motor_Forward  := "DB_Int_Prog_Section".TRS_ZZ_03.Motor_Run,
//           o_IO_MTR_Fwd             := "Q_ZZ_03_M11_MTR_FWD",
//           o_IO_MTR_Dis_Quick_Stop  := "Q_ZZ_03_M11_Disable_QS",
//           o_ST_ASI_NotPrsnt        := "DB_Status".TRS_ZZ_03.LMS_ASI_Not_Prsnt,
//           o_ST_ASI_Err             := "DB_Status".TRS_ZZ_03.LMS_ASI_Error,
//           o_ST_LMS_Not_Auto        := "DB_Status".TRS_ZZ_03.LMS_Not_Auto,
//           o_ST_LMS_Not_Hthy        := "DB_Status".TRS_ZZ_03.LMS_Not_Hthy);
//
//============This piece of code to be added only if Shutter is present on this section ==========
// Condition to force run  
//           A     "Q_ZZ_01_M11_MTR_FWD";
//           O     "DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS;
//           =     "Q_ZZ_01_M11_MTR_FWD";
//
// Data Layer          
//      CALL "FB_DAT" , "DI_TRS_ZZ_03_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_03.ID,
//           i_DB_Event               := "DB_Event_Section",
//           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
//           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
//           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
//           i_CFG_PLC_Log_Route_Msgs := FALSE,
//           i_CFG_PLC_LOG_BPI_Stat   := FALSE,
//           i_CFG_PLC_No_Msg_To_Rout := FALSE,
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//NETWORK
//TITLE =..: Window generator block call
////EDIT THIS NETWORK WHEN THERE ARE MERGE CONVEYORS ADDED OR DELETED!!!
////
//      NOP   0; 
////**********************************************************************************************************
//// Change "i_DB_PLT_Most_Downstream" into the most downstream PLT DB which is used of all merge conveyors
//// IF only one Merge conveyor then Most_Downsteam and Most_Upstream are both #i_TRS1_DB_PLT
////**********************************************************************************************************
//
//           
//      CALL "FB_Window_Generator" , "DI_CLZ_ZZ_00_WIN_GEN" (
//           i_DB_PLT_Most_DwnStr     := "DB_ZZ_XX_PLT",
//           i_DB_PLT_Most_UpStr      := "DB_ZZ_01_PLT",
//           i_DB_Reservation         := "DB_RES_ZZ_00",
//           i_DB_Event               := "DB_Event_Zone",
//           i_CFG_Window_Length      := "DB_Int_Prog_Zone".CLZ_ZZ_00.Calculated_H2H_Length,
//           i_CFG_In_Flow_Function   := FALSE,
//           i_Section_Run_Reverse    := FALSE);
//           
//      CALL "FB_DAT" , "DI_CLZ_ZZ_00_DAT" (
//           i_ID_Section             := "DB_Status_Index".TRS_ZZ_01.ID,//Report on section
//           i_DB_Event               := "DB_Event_Section",
//           i_PLC_Log_FIFO_DB        := "DB_LOG_Event_FIFO",
//           i_CFG_BPI_Log_Level      := "DB_Setting".common.External_Log_Level,
//           i_CFG_PLC_Log_Level      := "DB_Setting".common.Internal_Log_Level,
//           i_CFG_PLC_Log_Route_Msgs := FALSE,
//           i_CFG_PLC_LOG_BPI_Stat   := FALSE,
//           i_CFG_PLC_No_Msg_To_Rout := FALSE,
//           i_CFG_PLC_No_Msg_To_BPI  := FALSE);
//
//============Add below ntwork only if Shutter is present in zone =================
//NETWORK
//TITLE =..:SHO ZZ.SS
//
//      NOP   0;
//
// Request stop
//      A     "DB_Status".SHO_ZZ_SS.Shutter_Not_Auto;
//      O     "DB_Status".SHO_ZZ_SS.Technical_Error;
//      O     "DB_Status".SHO_ZZ_SS.Shutter_Not_Hthy;
//      =     "DB_External".SHO_ZZ_SS.Inputs.Request_Stop;
//
// Energy saving TRS
//      A     "DB_External".TRS_ZZ_SS.Outputs.Energy_Saving;
//      =     "DB_Int_Prog_Section".SHO_ZZ_SS.TRS_Energy_Saving;
//
// Shutter object
//// This block is applicable if SHO is used. 
//// Use appropriate equipment block based on Fire / Security / Fire+Security shutter is used
//
//    CALL  "FB_EQP_Shutter" , "DI_SHO_ZZ_SS" (  
//       i_CMD_Enable            :="DB_System_Control".SHO_ZZ_SS.Enable,
//       i_CMD_Start             :="DB_System_Control".SHO_ZZ_SS.OS_Start,
//       i_CMD_Reset             :="DB_System_Control".SHO_ZZ_SS.OS_Reset,
//       i_CMD_Controlled_Stop   :="DB_System_Control".SHO_ZZ_SS.Controlled_Stop,
//       i_DB_PLT_TRS            :="DB_ZZ_SS_PLT",
//       i_Safety_OK             :="DB_System_Control".SHO_ZZ_SS.Safety_OK,
//       i_Available_IO          :="DB_System_Control".SHO_ZZ_SS.IO_Available,
//       i_CFG_Time_To_Open      :=130,
//       i_CFG_Time_To_Close     :=130,
//       i_CFG_Time_Contr_Clear  :=100,
//       i_CFG_Time_Clear_Shutter:=200,
//       i_CFG_Time_Force_Run_TRS:=25,
//       i_CFG_Delay_Conveyor_Run:=10,
//       i_CFG_Delay_Safety_Edge :=10,
//       i_CFG_Position_Shutter  :=50,
//       i_CFG_Open_Win_Offset   :=100,
//       i_CFG_Close_Win_Offset  :=25,
//       i_IO_NOT_Safety_Edge    :="I_ZZ_SS_SG_SAF_EDGE",
//       i_IO_PS_Shutter_Opened  :="I_ZZ_SS_LS_OPENED",
//       i_IO_PS_Shutter_Closed  :="I_ZZ_SS_LS_CLOSED",
//       i_IO_No_Fire_alarm      :="I_ZZ_SS_SG_NO_FIR",
//       i_IO_Automatic_Mode     :="I_ZZ_SS_SG_AUTO_MODE",
//       i_Ext_Req_Stop          :="DB_External".SHO_ZZ_SS.Inputs.Request_Stop,
//       i_CMD_TRS_ST_Energy_Save:="DB_Int_Prog_Section".SHO_ZZ_SS.TRS_Energy_Saving,
//       o_Open_Shutter          :="DB_Int_Prog_Section".SHO_ZZ_SS.Request_Shutter_Open,
//       o_Close_Shutter         :="DB_Int_Prog_Section".SHO_ZZ_SS.Request_Shutter_Close,
//       o_Action_Active         :="DB_System_Control".SHO_ZZ_SS.Action_Active,
//       o_Ready_To_Restart      :="DB_System_Control".SHO_ZZ_SS.Ready_To_Start,
//       o_Req_Halt_TRS          :="DB_Int_Prog_Section".SHO_ZZ_SS.Request_Halt_TRS,
//       o_Req_Disable_Send      :="DB_Int_Prog_Section".SHO_ZZ_SS.Request_Disable_Send,
//       o_Force_MTR_TRS         :="DB_Int_Prog_Section".SHO_ZZ_SS.Force_MTR_TRS,
//       o_ST_Started            :="DB_Status".SHO_ZZ_SS.Started,
//       o_ST_Request_Stop       :="DB_Status".SHO_ZZ_SS.Req_Stop,
//       o_ST_External_Stop      :="DB_Status".SHO_ZZ_SS.Ext_Stop,
//       o_ST_Open_Timeout       :="DB_Status".SHO_ZZ_SS.Open_Time_Out,
//       o_ST_Close_timeout      :="DB_Status".SHO_ZZ_SS.Close_Time_Out,
//       o_ST_Shutter_Open       :="DB_Status".SHO_ZZ_SS.Shutter_Open,
//       o_ST_Shutter_Close      :="DB_Status".SHO_ZZ_SS.Shutter_Close,
//       o_ST_Safety_Edge        :="DB_Status".SHO_ZZ_SS.Safety_Edge,
//       o_ST_Clearing_Timeout   :="DB_Status".SHO_ZZ_SS.Clearing_Time_Out,
//       o_ST_Fire_Alarm         :="DB_Status".SHO_ZZ_SS.Fire_Alarm,
//       o_ST_WN_Restart         :="DB_Status".SHO_ZZ_SS.Restart_required);
//
//
//       A "DB_Int_Prog_Section".SHO_ZZ_SS.Req_Disable_Send;
//       = "DB_External".TRS_ZZ_01.Inputs.Request_Disable_Send;  // Add this only if SHO Present above TRS_ZZ_01
//       = "DB_External".TRS_ZZ_02.Inputs.Request_Disable_Send;  // Add this only if SHO Present above TRS_ZZ_02
//       = "DB_External".TRS_ZZ_03.Inputs.Request_Disable_Send;  // Add this only if SHO Present above TRS_ZZ_03
//
// Hardware shutter object
//
//      CALL  "FB_HW_Shutter" , "DI_SHO_ZZ_SS_HW"(
//       i_CMD_Reset             :="DB_System_Control".SHO_ZZ_SS.OS_Reset,
//       i_CMD_Req_Shutter_Open  :="DB_Int_Prog_Section".SHO_ZZ_SS.Request_Shutter_Open,
//       i_CMD_Req_Shutter_Close :="DB_Int_Prog_Section".SHO_ZZ_SS.Request_Shutter_Close,
//       i_CMD_Send_Stat         :="DB_System_Control".SHO_ZZ_SS.OS_Send_Statistics,
//       i_Available_IO          :="DB_System_Control".SHO_ZZ_SS.IO_Available,
//       i_Safety_OK             :="DB_System_Control".SHO_ZZ_SS.Safety_OK,
//       i_Event_DB              :="DB_Event_Section",
//       i_CFG_Motor_Switch_Time :=300,
//       i_ASI_NotPrsnt          :="DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Not_Present[x],
//       i_ASI_Error             :="DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Error[x],
//       i_ASI_2_NotPrsnt        :="DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Not_Present[x],
//       i_ASI_2_Error           :="DB_Diagnose_ASI_PF".Gateway_xx_Channel_x.Slave_Error[x],
//       i_IO_Shutter_Healthy    :="I_ZZ_SS_SG_HLTY",
//       i_IO_Automatic_Mode     :="I_ZZ_SS_SG_AUTO_MODE",
//       i_IO_No_Technical_Error :="I_ZZ_SS_SG_NO_ERROR",
//       o_IO_MTR_Open           :="Q_ZZ_SS_SG_OPEN_CMD",
//       o_IO_MTR_Close          :="Q_ZZ_SS_SG_CLOSE_CMD",
//       o_ST_Not_Automatic      :="DB_Status".SHO_ZZ_SS.Shutter_Not_Auto,
//       o_ST_Technical_Error    :="DB_Status".SHO_ZZ_SS.Technical_Error,
//       o_ST_Shutter_NOT_Healthy:="DB_Status".SHO_ZZ_SS.Shutter_Not_Hthy,
//       o_ST_ASI_NotPrsnt       :="DB_Status".SHO_ZZ_SS.ASI_Not_Prsnt,
//       o_ST_ASI2_NotPrsnt      :="DB_Status".SHO_ZZ_SS.ASI_2_Not_Prsnt,
//       o_ST_ASI_Slave_Error    :="DB_Status".SHO_ZZ_SS.ASI_Error,
//       o_ST_ASI_Slave2_Error   :="DB_Status".SHO_ZZ_SS.ASI_2_Error);
//
//
// Collect All SHO Error
//       O "DB_Status".SHO_ZZ_SS.Shutter_Not_Auto;
//       O "DB_Status".SHO_ZZ_SS.Technical_Error;
//       O "DB_Status".SHO_ZZ_SS.Shutter_Not_Hthy;
//       O "DB_Status".SHO_ZZ_SS.ASI_Not_Prsnt;
//       O "DB_Status".SHO_ZZ_SS.ASI_2_Not_Prsnt;
//       O "DB_Status".SHO_ZZ_SS.ASI_Error;
//       O "DB_Status".SHO_ZZ_SS.ASI_2_Error ;
//       O "DB_Status".SHO_ZZ_SS.Open_Time_Out;
//       O "DB_Status".SHO_ZZ_SS.Close_Time_Out ;
//       O "DB_Status".SHO_ZZ_SS.Safety_Edge;
//       O "DB_Status".SHO_ZZ_SS.Clearing_Time_Out;
//       O "DB_Status".SHO_ZZ_SS.Fire_Alarm;
//       =#t_SHO_Error;
//
//
// Data Layer
//
//      CALL  "FB_DAT" , "DI_SHO_ZZ_SS_DAT"(
//       i_ID_Section            :="DB_Status_Index".SHO_ZZ_SS.ID,
//       i_DB_Event              :="DB_Event_Section",
//       i_PLC_Log_FIFO_DB       :="DB_LOG_Event_FIFO",
//       i_CFG_BPI_Log_Level     :="DB_Setting".common.External_Log_Level,
//       i_CFG_PLC_Log_Level     :="DB_Setting".common.Internal_Log_Level,
//       i_CFG_PLC_Log_Route_Msgs:=FALSE,
//       i_CFG_PLC_LOG_BPI_Stat  :=FALSE,
//       i_CFG_PLC_No_Msg_To_Rout:=FALSE,
//       i_CFG_PLC_No_Msg_To_BPI :=FALSE);
//
//// ADD below network only if CHO is used in zone
//NETWORK 
//TITLE =..:Check Object
//
// Height Check Object
//
//      CALL  "FB_CHeck_Object" , "DI_CHO_ZZ_SS" (
//       i_DB_PLT              :="DB_ZZ_SS_PLT",
//       i_CFG_Delay_On_Height :=0,
//       i_CFG_Delay_On_Length :=0,
//       i_CFG_Horn_Period     :=10,
//       i_CFG_PEC_Length_Pos  :=0,
//       i_CFG_Length_Chk_dis  :=0,
//       i_CMD_Enable          :="DB_System_Control".CHO_ZZ_SS.Enable,
//       i_CMD_Start           :="DB_System_Control".CHO_ZZ_SS.OS_Start,
//       i_CMD_Reset           :="DB_System_Control".CHO_ZZ_SS.OS_Reset,
//       i_Available_IO        :="DB_System_Control".CHO_ZZ_SS.IO_Available,
//       i_IO_NOT_PEC_Height   :="I_ZZ_SS_B22_PEC_HGHT",
//       i_IO_NOT_PEC_Length   :=FALSE,
//       i_CFG_Length_Chk_Prsnt:=FALSE,
//       i_PB_IO_Reset_Check   :="I_ZZ_SS_S01_PB_RESET",
//       i_ASI_NotPrsnt_1      :="DB_Diagnose_ASI_PF".Gateway_XX_Channel_X.Slave_Not_Present[XX],
//       i_ASI_Error_1         :="DB_Diagnose_ASI_PF".Gateway_XX_Channel_X.Slave_Error[XX],
//       i_ASI_NotPrsnt_2      :="DB_Diagnose_ASI_PF".Gateway_XX_Channel_X.Slave_Not_Present[XX],
//       i_ASI_Error_2         :="DB_Diagnose_ASI_PF".Gateway_XX_Channel_X.Slave_Error[XX],
//       i_ASI_NotPrsnt_3      :="DB_Diagnose_ASI_PF".Gateway_XX_Channel_X.Slave_Not_Present[XX],
//       i_ASI_Error_3         :="DB_Diagnose_ASI_PF".Gateway_XX_Channel_X.Slave_Error[XX],
//       o_IO_PB_Fault         :="Q_ZZ_SS_P01_SL_BAG_FLT",
//       o_IO_SL_Fault         :="Q_ZZ_SS_P03_SL_MAN_INT",
//       o_IO_Horn_Fault       :="Q_ZZ_SS_P02_BP_MAN_INT",
//       o_Req_Halt_TRS        :="DB_Int_Prog_Section".CHO_ZZ_SS.TRS_Req_Halt,
//       o_ST_WN_Restart       :="DB_Status".CHO_ZZ_SS.Restart_required,
//       o_ST_Height_Error     :="DB_Status".CHO_ZZ_SS.Height_Error,
//       o_ST_Length_Error     :="DB_Status".CHO_ZZ_SS.Length_Check,
//       o_ST_ASI_NotPrsnt_1   :="DB_Status".CHO_ZZ_SS.ASI_Not_Prsnt,
//       o_ST_ASI_Error_1      :="DB_Status".CHO_ZZ_SS.ASI_Error,
//       o_ST_ASI_NotPrsnt_2   :="DB_Status".CHO_ZZ_SS.ASI_2_Not_Prsnt,
//       o_ST_ASI_Error_2      :="DB_Status".CHO_ZZ_SS.ASI_2_Error,
//       o_ST_ASI_NotPrsnt_3   :="DB_Status".CHO_ZZ_SS.ASI_3_Not_Prsnt,
//       o_ST_ASI_Error_3      :="DB_Status".CHO_ZZ_SS.ASI_3_Error,
//       o_Ready_To_Restart    :="DB_System_Control".CHO_ZZ_SS.Ready_To_Start);
//
// Data Layer
//
//      CALL  "FB_DAT" , "DI_CHO_ZZ_SS_DAT" (
//       i_ID_Section            :="DB_Status_Index".CHO_ZZ_SS.ID,
//       i_DB_Event              :="DB_Event_Section",
//       i_PLC_Log_FIFO_DB       :="DB_LOG_Event_FIFO",
//       i_CFG_BPI_Log_Level     :="DB_Setting".common.External_Log_Level,
//       i_CFG_PLC_Log_Level     :="DB_Setting".common.Internal_Log_Level,
//       i_CFG_PLC_Log_Route_Msgs:=FALSE,
//       i_CFG_PLC_LOG_BPI_Stat  :=FALSE,
//       i_CFG_PLC_No_Msg_To_Rout:=FALSE,
//       i_CFG_PLC_No_Msg_To_BPI :=FALSE);
//
END_FUNCTION

