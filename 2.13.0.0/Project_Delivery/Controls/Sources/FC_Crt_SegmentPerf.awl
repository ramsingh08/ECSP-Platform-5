FUNCTION "FC_Crt_SegmentPerf" : VOID
TITLE =%version: 0.02 %  CN: 31
//Function:
//Prepare and send message 'SegmentPerformanceReport'
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 7 december 2015 16:04:34 %
//              %release: VI_RAW/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.02
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.02
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.02
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    09-01-15   0.02
//Initial Version                                       nlHdL    17-02-14   0.01
//
//Description:
//Prepare and send message 'SegmentPerformanceReport'
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_SegmentID : INT ;	//SegmentID from event DATA needed to send the message
  i_NumberOfItems : INT ;	//Number of items needed to send the message
  i_FIFO_PLC_DB_num : INT ;	//Number of DB PLC FIFO
END_VAR
VAR_TEMP
  t_AR1_Backup : DINT ;	//Save the contents of AR1
  t_Ret_Val_Word : WORD ;	//Return value Word, not used
  t_Ret_Val_Int : INT ;	//Return value Integer, not Used
  t_Loop_Counter : INT ;	//Number of entries in TableDB  Number of entries in the DB index
END_VAR
BEGIN
NETWORK
TITLE =AA: Store AR1 and Get Date and Time

      TAR1  ; // Store AR1
      T     #t_AR1_Backup; 

      CALL "READ_CLK" (
           RET_VAL                  := #t_Ret_Val_Int,
           CDT                      := "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.EventTime);

NETWORK
TITLE =BA: Write messageID

      AN    "M_Comm_Degraded"; // When in degraded mode
      JCN   BA01; 

      L     403; // When NOT in degraded mode
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.MessageID; 

      JU    BA99; 

BA01: L     1403; // When in degraded mode
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.MessageID; 

BA99: NOP   0; 
NETWORK
TITLE =CA: Copy AreaID, ZoneID and SectionID

      L     #i_ID; // Load ID
      L     DW#16#FFFF0000; // Filter Area number only
      AD    ; 
      SRD   16; // Slide Area nubmer to beginning AAAA0000 -> AAAA
      BTD   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.AreaID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF00; // Filter Zone number only
      AD    ; 
      SRD   8; // Slide Zone nubmer to beginning 0000ZZ00 -> 0000ZZ
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.ZoneID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF; // Filter Section number only
      AD    ; 
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.EquipmentID; // Transfer to outgoing messages
NETWORK
TITLE =DA: Retreive ID from segment status DB

      NOP   0; 

// Open segment status DB to retreive the segment status
      OPN   "DB_Segment_Status"; 

      L     DBLG; 
      L     6; // One entry is 6 bytes long
      /D    ; 
      T     #t_Loop_Counter; 

// Set a pointer to the first entry
      L     P#DBX 0.0; 
      LAR1  ; 
      JU    DA01; 

// Set the pointer to the next entry
LOOP: L     P#6.0; 
      +AR1  ; 

// Decrease the loop counter
DA01: L     #t_Loop_Counter; 
      L     1; 
      -I    ; 
      T     #t_Loop_Counter; 

// Load and compare Segment_ID
      L     W [AR1,P#2.0]; 
      L     #i_SegmentID; 
      ==I   ; 
      JC    DA03; 

// Check loop counter
      L     #t_Loop_Counter; 
      L     0; 
      <=I   ; 
      JCN   LOOP; 

// If not found end block no message
      BE    ; 

// Succes write data (RETVAL = 0)
DA03: L     #i_SegmentID; 
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.SegmentID; 

      L     #i_NumberOfItems; 
      T     "DB_Outgoing_Msgs".SegmentPerformanceReport.Body.NumberOfItems; 
NETWORK
TITLE =EA: Put message in buffer

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".Default,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".SegmentPerformanceReport,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "FC_FIFO" (
           i_FIFO_DB_Num            := #i_FIFO_PLC_DB_num,
           i_Mode                   := 'L',
           i_ANY_Data               := "DB_Outgoing_Msgs".Merged_Message,
           i_ID                     := #i_ID,
           o_RET_VAL_FIFO           := #t_Ret_Val_Word);

NETWORK
TITLE =FA: Restore AR1

      L     #t_AR1_Backup; 
      LAR1  ; 
END_FUNCTION

