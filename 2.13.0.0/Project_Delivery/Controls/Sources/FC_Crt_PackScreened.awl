FUNCTION "FC_Crt_PackScreened" : VOID
TITLE =%version: 0.21 % CN: 32
//Function:
//Prepare and send message 'PackageReport' - Screening Result
//
//History:
//This version  %created_by: nldy %
//              %date_created: Wednesday, October 25, 2017 7:04:54 PM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#24941: Screening pending updates                   nldy     25-10-17   0.21
//ra#21133: Send scrn device destination if available   nldy     19-09-17   0.20
//ra#21133: Add EDS destination to report (scrn pend.)  nldy     18-09-17   0.19
//ra#22220: Send multiple screening results at once     nldy     16-05-17   0.18
//ra#14076: Package Instruct and report with pseudoID   nlHdL    14-06-16   0.17
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.16
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.16
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.16
//23155: TIR in message for tubtrace                    nlHdL    24-04-15   0.16
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    09-01-15   0.15
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.08
//18032: package instr & package rep update             nlHdL    14-02-14   0.07
//17936: Update jumplabels add process level 3 till 5   nlHdL    10-02-14   0.06
//17936: Added sending process level 3 till 5           nlHdL    06-02-14   0.05
//17270: Check PID <> 0 when message to HLC             nlHdL    13-12-13   0.04
//17270: Check PID <> 0 when message to HLC             nlHdL    13-12-13   0.04
//15799: Block consistency update IO symbols, comment   nlHdL    23-09-13   0.03
//15170: Changed BTI to BTD for 4 digit Area num        nlHdL    13-08-13   0.02
//Initial Version based on version 0.10 ECS-P GEN       nlLvdG   31-05-13   0.01
//
//Description:
//Prepare and send message 'PackageReport' - Screening Result
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_Data : INT ;	//Data needed to send the message
  i_FIFO_PLC_DB_num : INT ;	//Number of DB PLC FIFO
  i_DB_Event_Num : INT ;	//Number of DB event
END_VAR
VAR_TEMP
  t_AR1_Backup : DINT ;	//Save the contents of AR1
  t_HBS_Results_Pointer : DINT ;	//Pointer to HBS results
  t_Ret_Val_Word : WORD ;	//Return value Word, not used
  t_Ret_Val_Int : INT ;	//Return value Integer, not Used
  t_LIC : INT ;	//The LIC record used to create the message and send to SAC
  t_HBS : INT ;	//HBS Record
  t_TIC_Number : INT ;	//TIC number
  t_Current_Level : INT ;	//Check level x of each process
  t_Current_Process : INT ;	//Check process x
  t_Nr_Of_Processes : INT ;	//Number of processes in the DB
  t_Nr_Bytes_Per_Process : INT ;	//Number of bytes used for each process in DB_HBS_Results
  t_Result_For_Lx_Py : INT ;	//Result for Level x and Process y
  t_HBS_Destination : INT ;	//Destination as filled in in the HBS record
  t_Loop_Value : INT ;	//Loop counter
  t_HBS_Record_Offset : INT ;	//Offset used within HBS record
  t_Send_Message : BOOL ;	//New data found, send message
  t_Process_x_Active : BOOL ;	//Process x contains HBS data
END_VAR
BEGIN
NETWORK
TITLE =AA: Store AR1

      TAR1  ; // Store AR1
      T     #t_AR1_Backup; 

      L     10; 
      T     #t_Nr_Bytes_Per_Process; // 5 INT's
NETWORK
TITLE =BA: Read LIC record

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Data,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_LIC);

NETWORK
TITLE =CA: Write messageID

      AN    "M_Comm_Degraded"; // When in degraded mode
      JCN   CA01; 

      L     210; // When NOT in degraded mode
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.MessageID; 

      JU    CA99; 

CA01: L     1210; // When in degraded mode
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.MessageID; 

CA99: NOP   0; 
NETWORK
TITLE =DA: Copy AreaID, ZoneID and SectionID

      L     #i_ID; // Load ID
      L     DW#16#FFFF0000; // Filter Area number only
      AD    ; 
      SRD   16; // Slide Area nubmer to beginning AAAA0000 -> AAAA
      BTD   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.AreaID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF00; // Filter Zone number only
      AD    ; 
      SRD   8; // Slide Zone nubmer to beginning 0000ZZ00 -> 0000ZZ
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ZoneID; // Transfer to outgoing messages

      L     #i_ID; // Load ID
      L     DW#16#FF; // Filter Section number only
      AD    ; 
      BTI   ; // Convert HEX to INT
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.EquipmentID; // Transfer to outgoing messages
NETWORK
TITLE =EA: Handle LIC code

      L     #t_LIC; // Write LIC number in the message
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.LIC; 
NETWORK
TITLE =FA: Copy Information Record into message

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Data,
           i_P_INT_Record           := "DB_UDT_LNK_Record".HBS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_HBS);

      L     #t_LIC; 
      L     0; 
      >I    ; 
      JCN   FA01; 

      CALL "FC_Read_ANY_Record" (
           i_Record_Number          := #t_LIC,
           i_ANY_Data_Record        := "DB_UDT_LIC_Record".BIR,
           i_ANY_Data               := "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num);

      JU    FA02; 

FA01: CALL "BLKMOV" (
           SRCBLK                   := "DB_Default_LIC".LIC[0].BIR,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR);

FA02: A(    ; 
      L     #t_HBS; 
      L     0; 
      >I    ; 
      )     ; 
      A     "DB_HBS_List".s_Pending_Items_Allowed; 
      JCN   FA10; 

      L     1; 
      T     #t_Loop_Value; 

FA03: L     #t_Loop_Value; 
      L     1; 
      -I    ; 
      L     "DB_HBS_List".HBS_Process_Length; 
      *I    ; 
      T     #t_HBS_Record_Offset; 

      CALL "FC_Read_Bool_RecOff" (
           i_Record_Number          := #t_HBS,
           i_Pointer_Offset         := #t_HBS_Record_Offset,
           i_P_BOOL_Record          := "DB_UDT_HBS_Record".HBS_Process_1.Process_Active,
           i_DB                     := "DB_HBS_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_Process_x_Active);

      A     #t_Process_x_Active; 
      JCN   FA04; 

      CALL "FC_Read_ANY_RecOff" (
           i_Record_Number          := #t_HBS,
           i_Pointer_Offset         := #t_HBS_Record_Offset,
           i_ANY_Data_Record        := "DB_UDT_HBS_Record".HBS_Process_1.Screen_Result,
           i_ANY_Data               := "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Process_1,
           i_DB                     := "DB_HBS_List",
           i_DB_Event_Num           := #i_DB_Event_Num);

      CALL "FC_Read_ANY_RecOff" (
           i_Record_Number          := #t_HBS,
           i_Pointer_Offset         := #t_HBS_Record_Offset,
           i_ANY_Data_Record        := "DB_UDT_HBS_Record".HBS_Process_1.Bag_Status,
           i_ANY_Data               := "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Bag_Status,
           i_DB                     := "DB_HBS_List",
           i_DB_Event_Num           := #i_DB_Event_Num);

      L     #t_Loop_Value; 
      L     "DB_HBS_List".Number_Of_Processes; 
      <I    ; 
      JCN   FA04; 

      L     #t_Loop_Value; 
      L     1; 
      +I    ; 
      T     #t_Loop_Value; 

      JU    FA03; 

FA04: L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.PID; 
      L     0; 
      ==I   ; 
      JCN   FA05; 

      CALL "FC_Read_Dint_Record" (
           i_Record_Number          := #t_HBS,
           i_P_DINT_Record          := "DB_UDT_HBS_Record".HBS_General.PID,
           i_DB                     := "DB_HBS_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_DINT                   := "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.PID);

FA05: L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.LIC; 
      L     0; 
      ==I   ; 
      JCN   FA10; 

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_HBS,
           i_P_INT_Record           := "DB_UDT_HBS_Record".HBS_General.LIC,
           i_DB                     := "DB_HBS_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := "DB_Outgoing_Msgs".PackageReport_Scrn.body.LIC);

FA10: L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.PID; 
      L     0; 
      ==D   ; 
      JCN   FA11; 

      L     2210; // When PID = 0 then send log messagePackageReport no pid
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.MessageID; 

FA11: NOP   0; 
      L     0; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.TIR.ID; 

      L     "DB_Setting".common.External_Log_Level; 
      L     4; 
      >I    ; 
      JCN   FA99; 

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_Data,
           i_P_INT_Record           := "DB_UDT_LNK_Record".TIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_TIC_Number);

      CALL "FC_Read_ANY_Record" (
           i_Record_Number          := #t_TIC_Number,
           i_ANY_Data_Record        := "DB_UDT_TIC_Record".TIR,
           i_ANY_Data               := "DB_Outgoing_Msgs".PackageReport_Scrn.body.TIR,
           i_DB                     := "DB_TIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num);

FA99: NOP   0; 
NETWORK
TITLE =GA: Write pseudo ID's

      L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Process_1.Pseudo_ID; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_1.PseudoID; 

      L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Process_2.Pseudo_ID; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_2.PseudoID; 

      L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Process_3.Pseudo_ID; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_3.PseudoID; 

      L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Process_4.Pseudo_ID; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_4.PseudoID; 

      L     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Process_5.Pseudo_ID; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_5.PseudoID; 
NETWORK
TITLE =HA: Write screening level and result
//Loop through each level and each process of "DB_HBS_Results".
//Check for each level if any of the processes has a value different from 0. If 
//so, a PackageReport should be sent to HLC for the current level. If (for a 
//certain level) multiple processes have a value to report to HLC, the values are 
//combined within 1 HLC message.
//
//If results for multiple levels come in at the same time, the reporting order 
//should start with the lowest level and end with the highest level (1 message 
//for each level with a result).
      OPN   "DB_HBS_Results"; 
      L     DBLG; 
      L     #t_Nr_Bytes_Per_Process; 
      /I    ; 
      T     #t_Nr_Of_Processes; 

      SET   ; 
      R     #t_Send_Message; 

      L     1; 
      T     #t_Current_Level; 
      T     #t_Current_Process; 

HA01: L     #t_Current_Process; 
      L     1; 
      -I    ; 
      L     #t_Nr_Bytes_Per_Process; 
      *I    ; 
      L     #t_Current_Level; 
      +I    ; 
      L     #t_Current_Level; 
      +I    ; 
      L     2; 
      -I    ; 
      SLD   3; 
      T     #t_HBS_Results_Pointer; 

      L     DBW [#t_HBS_Results_Pointer]; 
      T     #t_Result_For_Lx_Py; 
      L     0; 
      >I    ; 
      JCN   HA20; // Result pressent for current level and current process

      AN    #t_Send_Message; 
      JCN   HA02; // Start of new message: Clear DB_Outgoing_Msgs

      L     0; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_1.ScreeningLevel; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_1.Result; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_2.ScreeningLevel; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_2.Result; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_3.ScreeningLevel; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_3.Result; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_4.ScreeningLevel; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_4.Result; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_5.ScreeningLevel; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_5.Result; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Bag.Weight; 

HA02: SET   ; 
      S     #t_Send_Message; 

// Fill in correct data in outgoing messages DB
      L     #t_Current_Process; 
      JL    HA10; 
      JU    HA10; 
      JU    HA11; 
      JU    HA12; 
      JU    HA13; 
      JU    HA14; 
      JU    HA15; 

HA10: JU    HA20; // Invalid process
HA11: L     #t_Current_Level; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_1.ScreeningLevel; 

      L     #t_Result_For_Lx_Py; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_1.Result; 

      L     #t_HBS; 
      L     0; 
      >I    ; 
      JCN   HA20; // If destination is filled in in HBS record, send it as destination

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_HBS,
           i_P_INT_Record           := "DB_UDT_HBS_Record".HBS_Process_1.EDS_Destination,
           i_DB                     := "DB_HBS_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_HBS_Destination);

      L     #t_HBS_Destination; 
      L     0; 
      >I    ; 
      JCN   HA20; 

      L     #t_HBS_Destination; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Destination_1; 

      L     0; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Destination_2; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Destination_3; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Destination_4; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.BIR.Destination_5; 

      JU    HA20; 

HA12: L     #t_Current_Level; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_2.ScreeningLevel; 

      L     #t_Result_For_Lx_Py; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_2.Result; 

      JU    HA20; 

HA13: L     #t_Current_Level; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_3.ScreeningLevel; 

      L     #t_Result_For_Lx_Py; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_3.Result; 

      JU    HA20; 

HA14: L     #t_Current_Level; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_4.ScreeningLevel; 

      L     #t_Result_For_Lx_Py; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_4.Result; 

      JU    HA20; 

HA15: L     #t_Current_Level; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_5.ScreeningLevel; 

      L     #t_Result_For_Lx_Py; 
      T     "DB_Outgoing_Msgs".PackageReport_Scrn.body.ScreeningResult.Process_5.Result; 

HA20: L     #t_Current_Process; 
      L     1; 
      +I    ; 
      T     #t_Current_Process; 

      OPN   "DB_HBS_Results"; 

      L     0; // Reset values in DB_HBS_Results
      T     DBW [#t_HBS_Results_Pointer]; 

      L     #t_Current_Process; 
      L     #t_Nr_Of_Processes; 
      >I    ; 
      JCN   HA01; 

      A     #t_Send_Message; 
      JCN   HA21; // Send message for current level if data available

      CALL "READ_CLK" (
           RET_VAL                  := #t_Ret_Val_Int,
           CDT                      := "DB_Outgoing_Msgs".PackageReport_Scrn.body.EventTime);

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".Default,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "BLKMOV" (
           SRCBLK                   := "DB_Outgoing_Msgs".PackageReport_Scrn,
           RET_VAL                  := #t_Ret_Val_Int,
           DSTBLK                   := "DB_Outgoing_Msgs".Merged_Message);

      CALL "FC_FIFO" (
           i_FIFO_DB_Num            := #i_FIFO_PLC_DB_num,
           i_Mode                   := 'L',
           i_ANY_Data               := "DB_Outgoing_Msgs".Merged_Message,
           i_ID                     := #i_ID,
           o_RET_VAL_FIFO           := #t_Ret_Val_Word);

      SET   ; 
      R     #t_Send_Message; 

HA21: L     1; 
      T     #t_Current_Process; 

      L     1; 
      L     #t_Current_Level; 
      +I    ; 
      T     #t_Current_Level; 

      L     #t_Current_Level; 
      L     5; 
      <=I   ; 
      JC    HA01; 
NETWORK
TITLE =IA: Restore AR1

      L     #t_AR1_Backup; 
      LAR1  ; 
END_FUNCTION

