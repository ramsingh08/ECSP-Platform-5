FUNCTION_BLOCK "FB_HW_MTR_TRI"
TITLE =%version: 0.08 % CN: 40
//Function:
//Hardware driver for the motordrive of a TT / TF.
// Type uses local ASI and a SoftStarter.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Monday, June 19, 2017 8:40:41 AM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#22982: Softstarter error during start up           nlHdL    19-06-17   0.08
//ra#17289: Rename to FB_HW_MTR_TRI                     nlHdL    05-10-16   0.07
//ra#16778: IO name inconsistent                        nlDY     07-09-16   0.06
//ra#16776: Error states + statistic counter update     nlDY     31-08-16   0.05
//ra#15834: Added ASI and circuit breaker errors        nlDY     16-08-16   0.04
//ra#14800: Added LMS not healthy and redundant setup   nlDY     05-07-16   0.03
//ra#14504: HW driver for LMS11 multiple connect not ok nlHdL    09-06-16   0.02
//Initial version, based on version 0.16 HW LMS         nlHdL    08-06-16   0.01
//
//Description:                                  
//
//Generating the ASI errors and thermal overloads, motor connected
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_CMD_Send_Stat : BOOL ;	//CMD: Send Statistical
  i_Event_DB : BLOCK_DB ;	//Data Structure: Event DataBlock 
  i_Available_IO : BOOL  := TRUE;	//Signal for indication IO is OK (no Fieldbus or IO error)
  i_IO_MS_Automatic_Mode : BOOL  := TRUE;	//HW: Maintenance Switch of motor in 'ON' position (ON=TRUE)
  i_IO_LMS_Not_Auto : BOOL ;	//HW: switch of the motor equipment is NOT in 'Automatic' position
  i_IO_LMS_ON : BOOL  := TRUE;	//HW: ON signal from motor equipment (Bypass Softstarter)
  i_IO_LMS_400VAC_OK : BOOL  := TRUE;	//HW: No thermal overload 400Vac power supply 
  i_ASI_NotPrsnt_1 : BOOL ;	//ASI is Not Present
  i_ASI_Error_1 : BOOL ;	//ASI has an Error
  i_ASI_NotPrsnt_2 : BOOL ;	//ASI is Not Present
  i_ASI_Error_2 : BOOL ;	//ASI has an Error
  i_ASI_NotPrsnt_3 : BOOL ;	//ASI is Not Present
  i_ASI_Error_3 : BOOL ;	//ASI has an Error
  i_ASI_NotPrsnt_4 : BOOL ;	//ASI is Not Present
  i_ASI_Error_4 : BOOL ;	//ASI has an Error
  i_MTR1_IO_CON_OK : BOOL  := TRUE;	//HW: Fail safe signal Maintenance Switch on (TRUE=Motor switched on)
  i_MTR1_IO_NOT_THO : BOOL  := TRUE;	//HW: Thermal overload signal (No Thermal overload=TRUE)  
  i_MTR2_IO_CON_OK : BOOL  := TRUE;	//HW: Fail safe signal Maintenance Switch on (TRUE=Motor switched on)
  i_MTR2_IO_NOT_THO : BOOL  := TRUE;	//HW: Thermal overload signal (No Thermal overload=TRUE)  
  i_MTR3_IO_CON_OK : BOOL  := TRUE;	//HW: Fail safe signal Maintenance Switch on (TRUE=Motor switched on)
  i_MTR3_IO_NOT_THO : BOOL  := TRUE;	//HW: Thermal overload signal (No Thermal overload=TRUE)  
  i_MTR4_IO_CON_OK : BOOL  := TRUE;	//HW: Fail safe signal Maintenance Switch on (TRUE=Motor switched on)
  i_MTR4_IO_NOT_THO : BOOL  := TRUE;	//HW: Thermal overload signal (No Thermal overload=TRUE)  
  i_CMD_Reset : BOOL ;	//CMD: Reset command
  i_CMD_Req_Motor_Forward : BOOL ;	//CMD: Run motor forward
  i_CFG_Redundant_Setup : BOOL ;	//CFG: Can run when a motor is disconnected
END_VAR
VAR_OUTPUT
  o_IO_MTR : BOOL ;	//HW: Run signal to motor forward of conveyor
  o_ST_MS_Not_Automatic : BOOL ;	//ST: Maintenance Switch of motor in 'OFF' position
  o_ST_ASI1_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_ASI_Error_1 : BOOL ;	//ST: ASI slave has an error
  o_ST_ASI2_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_ASI_Error_2 : BOOL ;	//ST: ASI slave has an error
  o_ST_ASI3_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_ASI_Error_3 : BOOL ;	//ST: ASI slave has an error
  o_ST_ASI4_NotPrsnt : BOOL ;	//ST: ASI slave is not present
  o_ST_ASI_Error_4 : BOOL ;	//ST: ASI slave has an error
  o_ST_LMS_Not_Auto : BOOL ;	//ST: The local motor starter is reporting not Automatic
  o_ST_LMS_Error : BOOL ;	//ST: The local motor starter is reporting error
  o_ST_THO_400Vac : BOOL ;	//ST: Thermal Overload (400Vac)
  o_MTR1_ST_Not_CON : BOOL ;	//ST: Motor not connected
  o_MTR1_ST_THO : BOOL ;	//ST: Thermal overload
  o_MTR2_ST_Not_CON : BOOL ;	//ST: Motor not connected
  o_MTR2_ST_THO : BOOL ;	//ST: Thermal overload
  o_MTR3_ST_Not_CON : BOOL ;	//ST: Motor not connected
  o_MTR3_ST_THO : BOOL ;	//ST: Thermal overload
  o_MTR4_ST_Not_CON : BOOL ;	//ST: Motor not connected
  o_MTR4_ST_THO : BOOL ;	//ST: Thermal overload
  o_MTR_ST_Multi_Not_CON : BOOL ;	//ST: Error Multiple motors not connected 
END_VAR
VAR
  s_MTR_Error : BOOL ;	//LMS has error
  s_MTR_Disconnected : BOOL ;	//One or more motors are disconnected
  s_Copy_FN_o_IO_MTR : BOOL ;	//Flank Negative of MTR Signal
  s_Statistical : STRUCT 	//Statisticals
   Start_Stop_Cnt : INT ;	//Number of times the drive was started counter
   Started_Time : INT ;	//Number of seconds the drive was started
  END_STRUCT ;	
  s_StartUp_Timer : INT ;	//Start Up Timer for Ready signal
END_VAR
VAR_TEMP
  t_Return_Value_Int : INT ;	//Return value
  t_DB_Event_Num : INT ;	//Number of the local event DB
  t_Available_IO_1 : BOOL ;	
  t_Available_IO_2 : BOOL ;	
  t_Available_IO_3 : BOOL ;	
  t_Available_IO_4 : BOOL ;	
  t_Timer_startup_ready : BOOL ;	
  t_Start_Timer : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =AA: Load DB event number to temp

      OPN   #i_Event_DB; 
      L     DBNO; 
      T     #t_DB_Event_Num; 

NETWORK
TITLE =BA: Handle electrical input statuses
//Some errors and statuses are coming directly from electrical inputs. If the IO 
//becomes not available, those inputs must be ignored, to avoid (as consequence 
//of) all kind of meaningless status changes, which are indicated to HMI.
//
//The IO available signal needs to be suppressed when a reset pulse is given 
//because during the reset pulse the LMS is still not healthy and thus the IO is 
//still not available.
      NOP   0; 

      SET   ; 
      R     #s_MTR_Disconnected; 

// Detect available IO
      A     #i_Available_IO; 
      AN    #i_ASI_NotPrsnt_1; 
      AN    #i_ASI_Error_1; 
      =     #t_Available_IO_1; 

      A     #i_Available_IO; 
      AN    #i_ASI_NotPrsnt_2; 
      AN    #i_ASI_Error_2; 
      =     #t_Available_IO_2; 

      A     #i_Available_IO; 
      AN    #i_ASI_NotPrsnt_3; 
      AN    #i_ASI_Error_3; 
      =     #t_Available_IO_3; 

      A     #i_Available_IO; 
      AN    #i_ASI_NotPrsnt_4; 
      AN    #i_ASI_Error_4; 
      =     #t_Available_IO_4; 

// Reset states on ASI error
      A     #i_CMD_Reset; 
      ON    #i_Available_IO; 
      R     #o_ST_ASI1_NotPrsnt; 
      R     #o_ST_ASI_Error_1; 
      R     #o_ST_ASI2_NotPrsnt; 
      R     #o_ST_ASI_Error_2; 
      R     #o_ST_ASI3_NotPrsnt; 
      R     #o_ST_ASI_Error_3; 
      R     #o_ST_ASI4_NotPrsnt; 
      R     #o_ST_ASI_Error_4; 

      A     #i_CMD_Reset; 
      ON    #t_Available_IO_1; 
      R     #o_ST_THO_400Vac; 

      A     #i_CMD_Reset; 
      ON    #t_Available_IO_2; 
      R     #o_ST_LMS_Error; 

      A     #i_CMD_Reset; 
      ON    #t_Available_IO_3; 
      R     #o_MTR1_ST_Not_CON; 
      R     #o_MTR2_ST_Not_CON; 
      R     #o_MTR_ST_Multi_Not_CON; 
      R     #o_MTR1_ST_THO; 
      R     #o_MTR2_ST_THO; 

      A     #i_CMD_Reset; 
      ON    #t_Available_IO_4; 
      R     #o_MTR3_ST_Not_CON; 
      R     #o_MTR4_ST_Not_CON; 
      R     #o_MTR_ST_Multi_Not_CON; 
      R     #o_MTR3_ST_THO; 
      R     #o_MTR4_ST_THO; 

// Reset MTR disconnected error
// MTR not connected is a warning in a redundant setup
      A     #i_CFG_Redundant_Setup; 
      R     #o_MTR1_ST_Not_CON; 
      R     #o_MTR2_ST_Not_CON; 
      R     #o_MTR3_ST_Not_CON; 
      R     #o_MTR4_ST_Not_CON; 

// Set ASI errors
      A     #i_ASI_NotPrsnt_1; 
      A     #i_Available_IO; 
      S     #o_ST_ASI1_NotPrsnt; 

      A     #i_ASI_Error_1; 
      A     #i_Available_IO; 
      S     #o_ST_ASI_Error_1; 

      A     #i_ASI_NotPrsnt_2; 
      A     #i_Available_IO; 
      S     #o_ST_ASI2_NotPrsnt; 

      A     #i_ASI_Error_2; 
      A     #i_Available_IO; 
      S     #o_ST_ASI_Error_2; 

      A     #i_ASI_NotPrsnt_3; 
      A     #i_Available_IO; 
      S     #o_ST_ASI3_NotPrsnt; 

      A     #i_ASI_Error_3; 
      A     #i_Available_IO; 
      S     #o_ST_ASI_Error_3; 

      A     #i_ASI_NotPrsnt_4; 
      A     #i_Available_IO; 
      S     #o_ST_ASI4_NotPrsnt; 

      A     #i_ASI_Error_4; 
      A     #i_Available_IO; 
      S     #o_ST_ASI_Error_4; 

// MTR 1 Motor not connected
      AN    #i_MTR1_IO_CON_OK; 
      A     #t_Available_IO_3; 
      S     #o_MTR1_ST_Not_CON; 

      A     #o_MTR1_ST_Not_CON; 
      S     #s_MTR_Disconnected; 

// MTR 1 Motor thermal overload
      AN    #i_MTR1_IO_NOT_THO; 
      A     #t_Available_IO_3; 
      S     #o_MTR1_ST_THO; 

// MTR 2 Motor not connected
      AN    #i_MTR2_IO_CON_OK; 
      A     #t_Available_IO_3; 
      S     #o_MTR2_ST_Not_CON; 

      A     #o_MTR2_ST_Not_CON; 
      A     #s_MTR_Disconnected; 
      A     #i_CFG_Redundant_Setup; 
      S     #o_MTR_ST_Multi_Not_CON; 

      A     #o_MTR2_ST_Not_CON; 
      S     #s_MTR_Disconnected; 

// MTR 2 Motor thermal overload
      AN    #i_MTR2_IO_NOT_THO; 
      A     #t_Available_IO_3; 
      S     #o_MTR2_ST_THO; 

// MTR 3 Motor not connected
      AN    #i_MTR3_IO_CON_OK; 
      A     #t_Available_IO_4; 
      S     #o_MTR3_ST_Not_CON; 

      A     #o_MTR3_ST_Not_CON; 
      A     #s_MTR_Disconnected; 
      A     #i_CFG_Redundant_Setup; 
      S     #o_MTR_ST_Multi_Not_CON; 

      A     #o_MTR3_ST_Not_CON; 
      S     #s_MTR_Disconnected; 

// MTR 3 Motor thermal overload
      AN    #i_MTR3_IO_NOT_THO; 
      A     #t_Available_IO_4; 
      S     #o_MTR3_ST_THO; 

// MTR 4 Motor not connected
      AN    #i_MTR4_IO_CON_OK; 
      A     #t_Available_IO_4; 
      S     #o_MTR4_ST_Not_CON; 

      A     #o_MTR4_ST_Not_CON; 
      A     #s_MTR_Disconnected; 
      A     #i_CFG_Redundant_Setup; 
      S     #o_MTR_ST_Multi_Not_CON; 

      A     #o_MTR4_ST_Not_CON; 
      S     #s_MTR_Disconnected; 

// MTR 4 Motor thermal overload
      AN    #i_MTR4_IO_NOT_THO; 
      A     #t_Available_IO_4; 
      S     #o_MTR4_ST_THO; 

// Maintenance Switch of motor in 'OFF' position 
      AN    #i_IO_MS_Automatic_Mode; // HW: Maintenance Switch of motor in 'ON' position (ON=TRUE)
      A     #t_Available_IO_1; // AND IO available
      =     #o_ST_MS_Not_Automatic; // THEN Maintenance Switch of motor in 'OFF' position 

// LMS not automatic
      A     #i_IO_LMS_Not_Auto; 
      A     #t_Available_IO_1; 
      =     #o_ST_LMS_Not_Auto; 

//Timer on start
      A     #o_IO_MTR; 
      =     #t_Start_Timer; 

      CALL "FC_On_Dly_T_0.1s" (
           i_Start                  := #t_Start_Timer,
           i_Enable_Dly             := #t_Start_Timer,
           i_Time_Value             := 10,
           i_Current_Value          := #s_StartUp_Timer,
           o_Status                 := #t_Timer_startup_ready,
           o_Current_Value          := #s_StartUp_Timer);

// LMS Error if after start up no On is present
      AN    #i_IO_LMS_ON; 
      A     #t_Available_IO_2; 
      A     #t_Timer_startup_ready; 
      S     #o_ST_LMS_Error; 

// LMS overload
      AN    #i_IO_LMS_400VAC_OK; 
      A     #t_Available_IO_1; 
      S     #o_ST_THO_400Vac; 

// Motor error
      A     #o_ST_ASI1_NotPrsnt; 
      O     #o_ST_ASI2_NotPrsnt; 
      O     #o_ST_ASI3_NotPrsnt; 
      O     #o_ST_ASI4_NotPrsnt; 
      O     #o_ST_ASI_Error_1; 
      O     #o_ST_ASI_Error_2; 
      O     #o_ST_ASI_Error_3; 
      O     #o_ST_ASI_Error_4; 
      O     #o_MTR1_ST_THO; 
      O     #o_MTR2_ST_THO; 
      O     #o_MTR3_ST_THO; 
      O     #o_MTR4_ST_THO; 
      O     #o_ST_LMS_Error; 
      O     #o_ST_THO_400Vac; 
      O     #o_MTR_ST_Multi_Not_CON; 
      O(    ; 
      AN    #i_CFG_Redundant_Setup; 
      A     #s_MTR_Disconnected; 
      )     ; 
      =     #s_MTR_Error; 

NETWORK
TITLE =CA: Motor run signal

      NOP   0; 

// Determine when the motor forward output should be true
// When a reset pulse is active make motor forward output true to reset the LMS
      A     #i_CMD_Req_Motor_Forward; 
      A     #i_Available_IO; 
      AN    #o_ST_MS_Not_Automatic; 
      AN    #o_ST_LMS_Not_Auto; 
      AN    #s_MTR_Error; 
      =     #o_IO_MTR; 
NETWORK
TITLE =DA: Determine statistical values

      NOP   0; 

// Determine the number of seconds that the motor is running 
      A     #o_IO_MTR; 
      A     "M_OS_New_Second"; 
      JCN   DA01; 

      L     #s_Statistical.Started_Time; 
      L     1; 
      +I    ; 
      T     #s_Statistical.Started_Time; 

// Determine the number of times the motor starts/stops
DA01: A     #o_IO_MTR; 
      FN    #s_Copy_FN_o_IO_MTR; 
      JCN   DA02; 

      L     #s_Statistical.Start_Stop_Cnt; 
      L     1; 
      +I    ; 
      T     #s_Statistical.Start_Stop_Cnt; 

      CALL "FC_Write_Event" (// Report Hardware: Motor Stopped (3902)
           i_Message_ID             := 3902,
           i_Event_value            := 1,
           i_DB_Event_Num           := #t_DB_Event_Num,
           o_Return_Value           := #t_Return_Value_Int);

DA02: A     #i_CMD_Send_Stat; 
      JCN   DA99; 

      CALL "FC_Write_Event" (// Report statistical start/stop information
           i_Message_ID             := 2001,
           i_Event_value            := #s_Statistical.Start_Stop_Cnt,
           i_DB_Event_Num           := #t_DB_Event_Num,
           o_Return_Value           := #t_Return_Value_Int);

// Clear the number of times the motor starts/stops after message has been send
      L     0; 
      T     #s_Statistical.Start_Stop_Cnt; 

      CALL "FC_Write_Event" (// Report statistical started time information
           i_Message_ID             := 2002,
           i_Event_value            := #s_Statistical.Started_Time,
           i_DB_Event_Num           := #t_DB_Event_Num,
           o_Return_Value           := #t_Return_Value_Int);

// Clear the number of seconds that the motor is running after message has been send
      L     0; 
      T     #s_Statistical.Started_Time; 

DA99: NOP   0; 
END_FUNCTION_BLOCK

