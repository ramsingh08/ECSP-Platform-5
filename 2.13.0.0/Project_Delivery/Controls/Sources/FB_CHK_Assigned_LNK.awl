FUNCTION_BLOCK "FB_CHK_Assigned_LNK"
TITLE =%version: 1.07 % CN: 40
//Function:
//Check the assigned LNK number, validate LIC or TIC to same LNK, If not then 
//De-assign the LNK. 
//Check if LNK found in PLT-DB, else LNK will be De-assigned.
//
//History:                                                                        
//This version   %created_by:  nlhdl %
//              %date_created:  Monday, May 07, 2018 8:29:30 AM %
//              %release:  VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#27974: Error Generator LNK number > 510            nlHdL    07-05-18   1.07
//bhs_plf#6109: Clean up routine use loglevel 5         nlHdL    03-04-18   1.06
//ra#27817: Tracking and Deregister messages no LIC     nlHdL    16-02-18   1.05
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   1.04
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   1.04
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   1.04
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    08-01-15   1.04
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.02
//Initial Version based on version 1.03 ECS-P GEN       nlHHop   01-04-14   0.01 
//
//Description:
//Check the assigned LNK number, validate LIC or TIC are assigned to same LNK, If 
//not the same then De-assign the LNK. 
//Check the LIC or TIC assigned in LNK-DB are Active in the PLT-DB, If not found 
//in the PLT-DB, LNK will be De-assigned.
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_DB_Event : BLOCK_DB ;	//Data Structure: Event DB
END_VAR
VAR
  s_LNK_Number : INT ;	//Number of LNK which is checked
  s_List_assigned : BOOL ;	//Temp to check if list is assigned without DB PLT
END_VAR
VAR_TEMP
  t_Record_Length : INT ;	//Temp length of used record
  t_DB_Nr_List : INT ;	//Temp DB number List DB
  t_LNK_Entry : INT ;	//Temp entry in LNK
  t_AR1_BackUp_LNK : DWORD ;	//Temp Back up AR1 LNK DB
  t_Entries_Used : INT ;	//Temp entries used in PLT DB
  t_ECS_Number : INT ;	//ECS number
  t_Return_val : INT ;	//Return value integer
  t_DB_Event_nr : INT ;	//DB number of event DB
  t_LIC_Number : INT ;	//LIC number
  t_TIC_Number : INT ;	//TIC number
  t_ICS_Event_Value : INT ;	//ICS event value which has the form IILLL > II = Instruction value, LLL = Link 
END_VAR
BEGIN
NETWORK
TITLE =AA: Determine the LNK number which will be checked

      SET   ; 
      R     #s_List_assigned; 

      OPN   #i_DB_Event; 
      L     DBNO; 
      T     #t_DB_Event_nr; 

      OPN   "DB_LNK_List"; 
      L     DBW    2; 
      T     #t_Record_Length; 
      L     DBW    6; 
      +     -1; 
      L     #s_LNK_Number; 
      ==I   ; 
      JCN   AA01; 

      L     1; 
      T     #s_LNK_Number; 
      JU    AA99; 

AA01: L     #s_LNK_Number; 
      +     1; 
      T     #s_LNK_Number; 

AA99: NOP   0; 
NETWORK
TITLE =BA: Check if entry is Assigned
//If entry is not assigned then end block.
      L     #t_Record_Length; 
      L     #s_LNK_Number; 
      *D    ; 
      L     DBW    0; // Length header
      +D    ; 
      SLD   3; 
      LAR1  ; // Pointer to LNK entry in DB_LNK

// Loop to check if entry = 0
BA01: L     DBW [AR1,P#0.0]; 
      T     #t_LNK_Entry; 
      L     0; 
      ==I   ; 
      JCN   BA04; // LNK is Assigned goto new LNK number

BA02: L     #t_Record_Length; 
      L     2; 
      -I    ; 
      JZ    BA03; // Check entries stop if entry = 0
      T     #t_Record_Length; 

      TAR1  ; 
      L     P#2.0; 
      +D    ; // Goto next integer
      LAR1  ; // Store Entry pointer in address-register 

      L     #t_Record_Length; 
      L     2; 
      ==I   ; 
      A     #s_List_assigned; 
      JC    DA01; // Check if PLT DB is used if LNK assigned

      JU    BA01; 

// LNK is not Assigned the end block
BA03: NOP   0; 
      BE    ; 

BA04: SET   ; 
      S     #s_List_assigned; 
NETWORK
TITLE =CA: Search for DB number on LNK position
// IF LNK entry is assigned retreive the DB number of the assigned position in 
//the DB LNK
      NOP   0; 
      TAR1  #t_AR1_BackUp_LNK; 

//Retreive the DB number of the List DB
      OPN   "DB_LNK_List"; 

      L     DBW    0; // Length header
      L     #t_Record_Length; 
      -D    ; 
      SLD   3; 
      LAR1  ; 

      L     DBW [AR1,P#0.0]; 
      T     #t_DB_Nr_List; 

      L     #t_Record_Length; 
      L     2; 
      >I    ; 
      JCN   CA99; // Skip PLT DB within the record

      OPN   DB [#t_DB_Nr_List]; 
      L     DBW    2; // Length of record
      L     #t_LNK_Entry; 
      *D    ; 
      L     DBW    0; // Length header
      +D    ; 
      SLD   3; 
      LAR1  ; // Pointer to entry in DB_List

// Check if list number is assigned 
      L     DBW [AR1,P#0.0]; 
      L     0; 
      ==I   ; 
      JCN   CA10; 

//---------------------------------------------------------------------------------------
// Read ECS number from LNK list
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_LNK_Number,
           i_P_INT_Record           := "DB_UDT_LNK_Record".ECS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_INT                    := #t_ECS_Number);

// Check if ECS number is valid
      L     #t_ECS_Number; 
      L     0; 
      >I    ; 
      JCN   CA01; 

// Write correct deregister reason in CIR
      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Expected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #t_DB_Event_nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Unexpected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := TRUE,
           i_DB_Event_Num           := #t_DB_Event_nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Hand_Over,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #t_DB_Event_nr);

// Read ECS number from LNK list
CA01: CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_LNK_Number,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_INT                    := #t_LIC_Number);

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_LNK_Number,
           i_P_INT_Record           := "DB_UDT_LNK_Record".TIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_INT                    := #t_TIC_Number);

      CALL "FC_Write_Event" (
           i_Message_ID             := 3515,
           i_Event_value            := #s_LNK_Number,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

      CALL "FC_Write_Event" (
           i_Message_ID             := 3516,
           i_Event_value            := #t_DB_Nr_List,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

      L     #t_LIC_Number; 
      L     0; 
      <>I   ; 
      JCN   CA02; 

      CALL "FC_Write_Event" (// Report Deregisterpackage (1216)
           i_Message_ID             := 1216,
           i_Event_value            := #s_LNK_Number,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

CA02: L     #t_TIC_Number; 
      L     0; 
      <>I   ; 
      JCN   CA10; 

// Create ICS event value IILLL > II = Instruction value 2 digits
// and LLL = Link number 
      L     #s_LNK_Number; 
      L     3000; //03 ICS-MISSING;
      +I    ; 
      T     #t_ICS_Event_Value; 

//  Write ICS Event for "ICS-MISSING" exception
      CALL "FC_Write_Event" (
           i_Message_ID             := 2603,
           i_Event_value            := #t_ICS_Event_Value,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

//Deassign record after ICS exception trace is send
      CALL "FC_Write_Event" (
           i_Message_ID             := 2906,
           i_Event_value            := #s_LNK_Number,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

CA10: NOP   0; 
      OPN   "DB_LNK_List"; 
      LAR1  #t_AR1_BackUp_LNK; // Restore entry for next check in List DB  
      JU    BA02; //Jump back to check the DB LNK list

CA99: NOP   0; 
NETWORK
TITLE =DA: Check the PLT DB entry

DA01: NOP   0; 
//If DB_PLT = 0 and LNK is assigned goto deassign
      L     DBW [AR1,P#0.0]; 
      L     0; 
      ==I   ; 
      A     #s_List_assigned; 
      JC    DA03; 

//Check DB number for PLT check
      L     DBW [AR1,P#0.0]; 
      T     #t_LNK_Entry; 
      L     0; 
      >I    ; 
      JCN   DA99; 

      L     #t_LNK_Entry; 

// Last entry in PLT DB
      OPN   DB [#t_LNK_Entry]; 

      L     DBW    0; // Number of entries used in PLT DB
      T     #t_Entries_Used; 
      L     8; // 8 bytes for each entry
      *D    ; 
      L     6; 
      +D    ; 
      SLD   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Pointer to last used entry in PLT DB  

DA02: L     DBW [AR1,P#6.0]; 
      L     #s_LNK_Number; 
      ==I   ; 
      JC    DA99; 

      L     #t_Entries_Used; 
      L     1; 
      -I    ; 
      JMZ   DA03; // Check entries stop if entry = 0
      T     #t_Entries_Used; 

      TAR1  ; 
      L     P#8.0; 
      -D    ; // Goto previous entry
      LAR1  ; // Store Entry pointer in address-register 

      JU    DA02; 

//Not found within PLT DB
DA03: NOP   0; 

//---------------------------------------------------------------------------------------
// Read ECS number from LNK list
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_LNK_Number,
           i_P_INT_Record           := "DB_UDT_LNK_Record".ECS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_INT                    := #t_ECS_Number);

// Check if ECS number is valid
      L     #t_ECS_Number; 
      L     0; 
      >I    ; 
      JCN   DA04; 

// Write correct deregister reason in CIR
      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Expected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #t_DB_Event_nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Unexpected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := TRUE,
           i_DB_Event_Num           := #t_DB_Event_nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS_Number,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Hand_Over,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #t_DB_Event_nr);

DA04: CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_LNK_Number,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_INT                    := #t_LIC_Number);

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_LNK_Number,
           i_P_INT_Record           := "DB_UDT_LNK_Record".TIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_INT                    := #t_TIC_Number);

      CALL "FC_Write_Event" (
           i_Message_ID             := 3515,
           i_Event_value            := #s_LNK_Number,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

      CALL "FC_Write_Event" (
           i_Message_ID             := 3516,
           i_Event_value            := #t_LNK_Entry,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

      L     #t_LIC_Number; 
      L     0; 
      <>I   ; 
      JCN   DA05; 

      CALL "FC_Write_Event" (
           i_Message_ID             := 1216,// Report Deregisterpackage (1216)
           i_Event_value            := #s_LNK_Number,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

DA05: L     #t_TIC_Number; 
      L     0; 
      <>I   ; 
      JCN   DA06; 

// Create ICS event value IILLL > II = Instruction value 2 digits
// and LLL = Link number 
      L     #s_LNK_Number; 
      L     3000; //03 ICS-MISSING;
      +I    ; 
      T     #t_ICS_Event_Value; 

//  Write ICS Event for "ICS-MISSING" exception
      CALL "FC_Write_Event" (
           i_Message_ID             := 2603,
           i_Event_value            := #t_ICS_Event_Value,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

DA06: L     #t_LIC_Number; 
      L     0; 
      ==I   ; 
      JCN   DA99; 

//Deassign record after ICS exception trace is send
      CALL "FC_Write_Event" (
           i_Message_ID             := 2906,
           i_Event_value            := #s_LNK_Number,
           i_DB_Event_Num           := #t_DB_Event_nr,
           o_Return_Value           := #t_Return_val);

DA99: NOP   0; 
END_FUNCTION_BLOCK

