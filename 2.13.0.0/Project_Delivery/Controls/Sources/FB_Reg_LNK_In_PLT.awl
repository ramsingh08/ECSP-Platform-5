FUNCTION_BLOCK "FB_Reg_LNK_In_PLT"
TITLE =%version: 0.05 % CN: 33
//Function:
//This FB makes and Register a LNK into PLT DB. 
//
//History:
//This version  %created_by:  nlhdl %
//              %date_created:  Friday, October 06, 2017 8:26:14 AM %
//              %release:  VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ina#7801: 2e bag is registered on CIZ, window length  nlHdL    06-10-17   0.05
//ra#24940: To VI_GEN                                   nldy     20-09-17   0.04
//ra#19181: Disable induct after item is inducted       nlHdL    31-01-17   0.03
//ra#19181: Disable induct after item is inducted       nlHdL    31-01-17   0.03
//ra#13940: Create register on induct with wait for PID nlHdL    15-12-16   0.02
//Initial Version based on FC_Reg_LNK_in_PLT             inajos  22-11-16  0.01
//
//Description:
//On the positive flank of external trigger,when a Leading edge is found without 
//data, a new LNK with LIC or TIC is generated and assigned to the entry in the 
//PLT DB.
//
//                                                             
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_DB_PLT_Num : INT ;	//PLT DB Number
  i_Default_Record : INT ;	//Number of default record to be used to create link.
  i_DB_Event_Nr : INT ;	//Number of DB Event
END_VAR
VAR_OUTPUT
  o_Req_Dis_Induct : BOOL ;	//Request signal to disable induct products
END_VAR
VAR
  s_LNK : INT ;	//Generated LNK
  s_Time_out : INT ;	//Time out waiting for PID
END_VAR
VAR_TEMP
  t_DB_PLT : INT ;	//Number of PLT DB
  t_position : INT ;	//Position entry in PLT DB
  t_Info : INT ;	//Info entry in PLT DB
  t_LNK : INT ;	//New LNK number which was generated
  t_PLT_DB_Found : INT ;	//Number of PLT DB Found
  t_ECS : INT ;	//ECS number of new generated LNK  
  t_ID : DINT ;	//Temp ID in DINT
  t_NOT_USED : INT ;	//Not Used
  t_Item_in_Hand_Over : BOOL ;	//Item in handover
  t_LIC : INT ;	//LIC number from LNK
  t_PID : DINT ;	//PID number from BIR
  t_Timer_Elapsed : BOOL ;	//Timer waiting for PID
  t_Upstr_PLT_DB : INT ;	//Upstream PLT DB
END_VAR
BEGIN
NETWORK
TITLE =AA: Read PLT Header 

      L     #i_DB_PLT_Num; 
      T     #t_DB_PLT; // Determine PLT block DB number

      OPN   DB [#t_DB_PLT]; 
      L     DBW    6; 
      T     #t_Upstr_PLT_DB; 
      OPN   DB [#t_Upstr_PLT_DB]; 
      A     DBX   10.6; //Item in Handover
      =     #t_Item_in_Hand_Over; 

      SET   ; 
      AN    #t_Item_in_Hand_Over; 
      S     #o_Req_Dis_Induct; 

      CALL "FC_PLT_Srch_Inf_Up" (
           i_DB_PLT_Num             := #t_DB_PLT,
           i_Position               := -20,
           i_Window                 := 40,//max runout 40cm 
           i_Info                   := 1,
           o_Position               := #t_position,
           o_Info                   := #t_Info,
           o_LNK                    := #t_LNK,
           o_DB_PLT_Num             := #t_PLT_DB_Found,
           o_Number_Items_Found     := #t_NOT_USED);

      L     #t_PLT_DB_Found; 
      L     0; 
      ==I   ; 
      BEC   ; 

      L     #t_Info; 
      L     1; 
      <>I   ; 
      BEC   ; 
NETWORK
TITLE =DA: Create LNK and write in PLT DB
//Create new Records for default LNK record. ECS, LIC or NIR or TIC with LNK 
//number
      L     #t_LNK; 
      L     0; 
      ==I   ; 
      A     #t_Item_in_Hand_Over; 
      JCN   DA99; 

      CALL "FC_Gen_Default_LNK" (
           i_LNK                    := 0,
           i_Default_Record         := #i_Default_Record,
           i_DB_Event_Num           := #i_DB_Event_Nr,
           o_LNK                    := #t_LNK);

//Write PLT number into LNK record
      CALL "FC_Write_Int_Record" (
           i_Record_Number          := #t_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".DB_PLT_Number,
           i_DB                     := "DB_LNK_List",
           i_INT                    := #t_PLT_DB_Found,
           i_DB_Event_Num           := #i_DB_Event_Nr);

//Write Register event
      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".ECS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Nr,
           o_INT                    := #t_ECS);

//Set expected item bit on true
      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Expected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := TRUE,
           i_DB_Event_Num           := #i_DB_Event_Nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Unexpected_Item,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #i_DB_Event_Nr);

      CALL "FC_Write_BOOL_Record" (
           i_Record_Number          := #t_ECS,
           i_P_BOOL_Record          := "DB_UDT_ECS_Record".CIR.Hand_Over,
           i_DB                     := "DB_ECS_List",
           i_BOOL                   := FALSE,
           i_DB_Event_Num           := #i_DB_Event_Nr);

      L     #i_ID; 
      T     #t_ID; 

      CALL "FC_Write_Dint_Record" (
           i_Record_Number          := #t_ECS,
           i_P_DINT_Record          := "DB_UDT_ECS_Record".CIR.Last_Location,
           i_DB                     := "DB_ECS_List",
           i_DINT                   := #t_ID,
           i_DB_Event_Num           := #i_DB_Event_Nr);

      L     #t_LNK; 
      T     #s_LNK; 

      L     0; 
      T     #s_Time_out; 

      CALL "FC_Write_Event" (// Report Registerpackage (1205)
           i_Message_ID             := 1205,
           i_Event_value            := #s_LNK,
           i_DB_Event_Num           := #i_DB_Event_Nr,
           o_Return_Value           := #t_NOT_USED);

      CALL "FC_PLT_Clr_Position" (
           i_DB_PLT_Num             := #t_PLT_DB_Found,
           i_Position               := #t_position,
           i_Info_Physical          := 1,
           i_DB_Event_Num           := 329);

      CALL "FC_PLT_Write" (
           i_DB_PLT_Num             := #t_PLT_DB_Found,
           i_Position               := #t_position,
           i_Info_State             := W#16#0,
           i_Info_Physical          := 1,
           i_LNK                    := #s_LNK,
           i_DB_Event_Num           := #i_DB_Event_Nr);

DA99: NOP   0; 
NETWORK
TITLE =EA: Check PID release induct

      AN    #t_Item_in_Hand_Over; 
      BEC   ; 

      L     #t_LNK; 
      L     0; 
      >I    ; 
      JCN   EA99; 

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #t_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Nr,
           o_INT                    := #t_LIC);

      L     #t_LIC; 
      L     0; 
      >I    ; 
      JCN   EA99; 

      CALL "FC_Read_Dint_Record" (
           i_Record_Number          := #t_LIC,
           i_P_DINT_Record          := "DB_UDT_LIC_Record".BIR.PID,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Nr,
           o_DINT                   := #t_PID);

      L     #t_PID; 
      L     0; 
      >I    ; 
      R     #o_Req_Dis_Induct; 

//---------------------- Timer
      CALL "FC_On_Dly_Timer_MSec" (
           i_CMD_Start              := #t_Item_in_Hand_Over,
           i_CFG_Timer_Value        := 2000,
           i_Setpoint               := #s_Time_out,
           o_Setpoint               := #s_Time_out,
           o_Timer_Elapsed          := #t_Timer_Elapsed);

      A     #t_Timer_Elapsed; 
      R     #o_Req_Dis_Induct; 

EA99: NOP   0; 
END_FUNCTION_BLOCK

