FUNCTION_BLOCK "FB_DAT_BPI_Log"
TITLE =%version: 0.08 %  CN: 40
//Function:
//Read Event DB and send Logging message if logging level is sufficient.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: Friday, February 17, 2017 11:20:52 AM %
//              %release: VI_GEN/RA_Dev %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//ra#18111: Implement ICS trace to the GEN Libray       nlHdL    20-02-17   0.08
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    14-12-15   0.07
//ra#9751: Add source files ECS-P to VI_RAW             nlHdL    07-12-15   0.07
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.07
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.07
//CR10482 Removed writing of Log text to FIFO DB        nlHHop   26-06-12   0.06
//CR8688 Modification on FC_Crt_Log_Msg                 nlcsu    06-01-12   0.05
//No modification, updated version header               nlcsu    27-10-11   0.04
//Changed severity to fixed value "5" (Debug)           nlCSu    27-10-11   0.03
//Block update during data layer test                   nlHdL    15-10-10   0.02
//Initial Revision                                      nlMRe    03-09-10   0.01
//
//Description:
//The local DB event is read and all log messages are filtered. 
//If the logging level is sufficient, the log message is placed in the FIFO Send 
//DB. The textuals for the message are in FC_LOG_Txt_3000_3999. If the message is 
//send, the bit "Handled by BPI LOG" in the local Event DB is set.
//
//Log_Level |   Event_ID
//------------------------
//  0       |  nothing
//  1       |  Till 3100
//  2       |  Till 3200
//  3       |  Till 3300
//  4       |  Till 3400
//  5       |  Till 3500
//  6       |  Till 3600
//  7       |  Till 3700
//  8       |  Till 3800
//  9       |  Till 3900
//  10      |  Till 3999
//
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_Local_Buffer : BLOCK_DB ;	//Data Structure: Local Buffer DB
  i_PLC_FIFO_DB : BLOCK_DB ;	//Data structure: PLC FIFO DB
  i_CFG_Log_Level : INT ;	//CFG: [-1..9] Log level to BPI (-1 = no logging)
END_VAR
VAR
  s_Event_Value : INT ;	//Value for the statisticals
  s_Current_Event_ID : INT ;	//The current message ID which is read from the local event DB.
END_VAR
VAR_TEMP
  t_Event_DB_Num : INT ;	//Number of the Local Event DB
  t_PLC_FIFO_DB_Num : INT ;	//Number of the PLC FIFO DB for messages
  t_Calculated_log_level : INT ;	//Log level of the event
  t_Adres_Next_Event : INT ;	//Calculated addres of next record
  t_Entries_Used : INT ;	//Number ot the entries used in the Local Event DB
  t_Next_Event_to_Read : INT ;	//Next Message wich is going to be read
END_VAR
BEGIN
NETWORK
TITLE =AA: Read local PLC DB number and HLC DB

      OPN   #i_PLC_FIFO_DB; // Load DB PLC FIFO to get DB number
      L     DBNO; 
      T     #t_PLC_FIFO_DB_Num; 

      OPN   #i_Local_Buffer; // Opn local Event buffer DB
      L     DBNO; 
      T     #t_Event_DB_Num; 

      L     DBW    0; // Load number of entries used in Local Event DB
      T     #t_Entries_Used; // Transfer to temporery
NETWORK
TITLE =BA: SCAN DB and Send Log messages

      L     1; // Start with the first record
      T     #t_Next_Event_to_Read; 

      L     #t_Entries_Used; // Check if there are messages to send
      L     0; 
      <>I   ; 
      JCN   BA99; 

BA01: L     #t_Next_Event_to_Read; // Load next record number
      L     1; // Take begin of record
      -I    ; 
      L     6; // Multiply by record length
      *I    ; 
      L     4; // Add header length
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      T     #t_Adres_Next_Event; 
      LAR1  ; // Load to static and AR1

      L     DBW [AR1,P#0.0]; // Load Value of the event 
      T     #s_Event_Value; 

      L     DBW [AR1,P#2.0]; 
      T     #s_Current_Event_ID; 

      L     #s_Current_Event_ID; // Check if event is a Logging event
      L     3000; 
      >=I   ; 
      A(    ; 
      L     #s_Current_Event_ID; 
      L     3999; 
      <=I   ; 
      )     ; 
      JCN   BA02; 

      L     #s_Current_Event_ID; // Load logging level
      L     3000; 
      -I    ; 
      L     100; 
      /D    ; 
      T     #t_Calculated_log_level; 

      L     #t_Calculated_log_level; // Check if log should be logged
      L     #i_CFG_Log_Level; 
      <=I   ; 
      JCN   BA02; 

      CALL "FC_Crt_Log_Msg" (// Write message in FIFO Send DB
           i_ID                     := #i_ID,
           i_DB_Event_Num           := #t_Event_DB_Num,
           i_FIFO_PLC_DB_num        := #t_PLC_FIFO_DB_Num,
           i_Event_value            := #s_Event_Value,
           i_Event_ID               := #s_Current_Event_ID);

      OPN   #i_Local_Buffer; // Opn local Event buffer DB

      L     #t_Adres_Next_Event; 
      LAR1  ; 

      SET   ; 
      =     DBX [AR1,P#4.2]; // Set "Handled By BPI Log" bit

BA02: L     DBW [AR1,P#2.0]; 
      L     2603; 
      ==I   ; 
      JCN   BA03; 

      CALL "FC_Crt_ICSExcepTrac" (
           i_ID                     := #i_ID,
           i_DB_Event_Num           := #t_Event_DB_Num,
           i_FIFO_PLC_DB_num        := #t_PLC_FIFO_DB_Num,
           i_Event_value            := #s_Event_Value);


BA03: L     #t_Adres_Next_Event; // Load adress current event
      LAR1  ; // Transfer to AR 1

      L     #t_Next_Event_to_Read; // Increase next event with 1
      L     1; 
      +I    ; 
      T     #t_Next_Event_to_Read; // If next record to read is equal or smaller
      L     #t_Entries_Used; // then number of events in DB, than do next event
      >I    ; 
      JCN   BA01; 

BA99: NOP   0; 
END_FUNCTION_BLOCK

